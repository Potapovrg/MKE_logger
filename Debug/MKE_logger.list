
MKE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08008f68  08008f68  00018f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a0  080090a0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080090a0  080090a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090a8  080090a8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090ac  080090ac  000190ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080090b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000090  08009140  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08009140  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bd8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ddf  00000000  00000000  00045c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0004aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  0004c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcb0  00000000  00000000  0004d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df61  00000000  00000000  00069060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009630a  00000000  00000000  00086fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d2cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c50  00000000  00000000  0011d320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f50 	.word	0x08008f50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08008f50 	.word	0x08008f50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_CRC_Init+0x20>)
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <MX_CRC_Init+0x24>)
 8000580:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CRC_Init+0x20>)
 8000584:	f000 fe25 	bl	80011d2 <HAL_CRC_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800058e:	f000 f923 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000bc 	.word	0x200000bc
 800059c:	40023000 	.word	0x40023000

080005a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <HAL_CRC_MspInit+0x3c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d10d      	bne.n	80005ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_CRC_MspInit+0x40>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <HAL_CRC_MspInit+0x40>)
 80005bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_CRC_MspInit+0x40>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023000 	.word	0x40023000
 80005e0:	40023800 	.word	0x40023800

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <MX_GPIO_Init+0xe0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <MX_GPIO_Init+0xe0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <MX_GPIO_Init+0xe0>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4815      	ldr	r0, [pc, #84]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000672:	f000 ff4f 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2101      	movs	r1, #1
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <MX_GPIO_Init+0xe8>)
 800067c:	f000 ff4a 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800069a:	f000 fdb7 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_GPIO_Init+0xe8>)
 80006b6:	f000 fda9 	bl	800120c <HAL_GPIO_Init>

}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020400 	.word	0x40020400

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fbd6 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f814 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ff82 	bl	80005e4 <MX_GPIO_Init>
  MX_CRC_Init();
 80006e0:	f7ff ff4a 	bl	8000578 <MX_CRC_Init>
  MX_SPI1_Init();
 80006e4:	f000 f966 	bl	80009b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006e8:	f000 fb10 	bl	8000d0c <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80006ec:	f007 fcc6 	bl	800807c <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80006f0:	f000 fa98 	bl	8000c24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //DWT_Init();
  //start_exec_time();
  HAL_TIM_Base_Start_IT(&htim2);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <main+0x30>)
 80006f6:	f003 fb51 	bl	8003d9c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006fa:	f007 fce5 	bl	80080c8 <MX_USB_HOST_Process>
 80006fe:	e7fc      	b.n	80006fa <main+0x2a>
 8000700:	200001c0 	.word	0x200001c0

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f007 ffe6 	bl	80086e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000750:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <SystemClock_Config+0xd0>)
 8000752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000778:	2319      	movs	r3, #25
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800077c:	23c0      	movs	r3, #192	; 0xc0
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000780:	2304      	movs	r3, #4
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f002 faff 	bl	8002d90 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000798:	f000 f81e 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2101      	movs	r1, #1
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fd61 	bl	8003280 <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c4:	f000 f808 	bl	80007d8 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3750      	adds	r7, #80	; 0x50
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <USBH_HID_EventCallback>:

uint32_t seconds;
uint32_t miliseconds;

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b08d      	sub	sp, #52	; 0x34
 80007e8:	af06      	add	r7, sp, #24
 80007ea:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_MOUSE)  // if the HID is Mouse
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f005 fd8b 	bl	8006308 <USBH_HID_GetDeviceType>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	f040 80ac 	bne.w	8000952 <USBH_HID_EventCallback+0x16e>
		{
			//exec_time=stop_exec_time();
			miliseconds=TIM2->CNT;
 80007fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000800:	4a56      	ldr	r2, [pc, #344]	; (800095c <USBH_HID_EventCallback+0x178>)
 8000802:	6013      	str	r3, [r2, #0]
			HID_MOUSE_Info_TypeDef *Mouse_Info;
			Mouse_Info = USBH_HID_GetMouseInfo(phost);  // Get the info
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f005 ff01 	bl	800660c <USBH_HID_GetMouseInfo>
 800080a:	60f8      	str	r0, [r7, #12]
			int X_Val = Mouse_Info->x;  // get the x value
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	617b      	str	r3, [r7, #20]
			int Y_Val = Mouse_Info->y;  // get the y value
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	613b      	str	r3, [r7, #16]
			if (X_Val > 127) X_Val -= 255;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	2b7f      	cmp	r3, #127	; 0x7f
 800081c:	dd02      	ble.n	8000824 <USBH_HID_EventCallback+0x40>
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3bff      	subs	r3, #255	; 0xff
 8000822:	617b      	str	r3, [r7, #20]
			if (Y_Val > 127) Y_Val -= 255;
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	2b7f      	cmp	r3, #127	; 0x7f
 8000828:	dd02      	ble.n	8000830 <USBH_HID_EventCallback+0x4c>
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	3bff      	subs	r3, #255	; 0xff
 800082e:	613b      	str	r3, [r7, #16]


			int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d, Time_TIM=%d.%04d s\r\n\0", X_Val, Y_Val, \
					                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2],seconds,miliseconds);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	789b      	ldrb	r3, [r3, #2]
			int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d, Time_TIM=%d.%04d s\r\n\0", X_Val, Y_Val, \
 8000834:	4619      	mov	r1, r3
					                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2],seconds,miliseconds);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	78db      	ldrb	r3, [r3, #3]
			int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d, Time_TIM=%d.%04d s\r\n\0", X_Val, Y_Val, \
 800083a:	4618      	mov	r0, r3
					                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2],seconds,miliseconds);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	791b      	ldrb	r3, [r3, #4]
			int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d, Time_TIM=%d.%04d s\r\n\0", X_Val, Y_Val, \
 8000840:	461c      	mov	r4, r3
 8000842:	4b47      	ldr	r3, [pc, #284]	; (8000960 <USBH_HID_EventCallback+0x17c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a45      	ldr	r2, [pc, #276]	; (800095c <USBH_HID_EventCallback+0x178>)
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	9204      	str	r2, [sp, #16]
 800084c:	9303      	str	r3, [sp, #12]
 800084e:	9402      	str	r4, [sp, #8]
 8000850:	9001      	str	r0, [sp, #4]
 8000852:	9100      	str	r1, [sp, #0]
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4942      	ldr	r1, [pc, #264]	; (8000964 <USBH_HID_EventCallback+0x180>)
 800085a:	4843      	ldr	r0, [pc, #268]	; (8000968 <USBH_HID_EventCallback+0x184>)
 800085c:	f008 f804 	bl	8008868 <siprintf>
 8000860:	60b8      	str	r0, [r7, #8]
			//int len = sprintf (Uart_Buf, "\r\n\0");
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4841      	ldr	r0, [pc, #260]	; (800096c <USBH_HID_EventCallback+0x188>)
 8000868:	f000 fe6d 	bl	8001546 <HAL_GPIO_TogglePin>

			spi_transmit_buffer.target=0b00001001;
 800086c:	4b40      	ldr	r3, [pc, #256]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 800086e:	2209      	movs	r2, #9
 8000870:	701a      	strb	r2, [r3, #0]

			spi_transmit_buffer.mouse_x=X_Val;
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	b25a      	sxtb	r2, r3
 8000876:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 8000878:	709a      	strb	r2, [r3, #2]
			spi_transmit_buffer.mouse_y=Y_Val;
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	b25a      	sxtb	r2, r3
 800087e:	4b3c      	ldr	r3, [pc, #240]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 8000880:	70da      	strb	r2, [r3, #3]

			Button1 =  Mouse_Info->buttons[0];
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	789a      	ldrb	r2, [r3, #2]
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <USBH_HID_EventCallback+0x190>)
 8000888:	701a      	strb	r2, [r3, #0]
			Button2 =  Mouse_Info->buttons[1];
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	78da      	ldrb	r2, [r3, #3]
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <USBH_HID_EventCallback+0x194>)
 8000890:	701a      	strb	r2, [r3, #0]
			Button3 =  Mouse_Info->buttons[2];
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	791a      	ldrb	r2, [r3, #4]
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <USBH_HID_EventCallback+0x198>)
 8000898:	701a      	strb	r2, [r3, #0]

			if (Mouse_Info->buttons[0]==1)  spi_transmit_buffer.button=spi_transmit_buffer.button|0b00000001;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	789b      	ldrb	r3, [r3, #2]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d107      	bne.n	80008b2 <USBH_HID_EventCallback+0xce>
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b30      	ldr	r3, [pc, #192]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008ae:	705a      	strb	r2, [r3, #1]
 80008b0:	e006      	b.n	80008c0 <USBH_HID_EventCallback+0xdc>
			else spi_transmit_buffer.button=spi_transmit_buffer.button&0b11111110;
 80008b2:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008be:	705a      	strb	r2, [r3, #1]

			if (Mouse_Info->buttons[1]==1)  spi_transmit_buffer.button=spi_transmit_buffer.button|0b00000010;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	78db      	ldrb	r3, [r3, #3]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d107      	bne.n	80008d8 <USBH_HID_EventCallback+0xf4>
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008d4:	705a      	strb	r2, [r3, #1]
 80008d6:	e006      	b.n	80008e6 <USBH_HID_EventCallback+0x102>
			else spi_transmit_buffer.button=spi_transmit_buffer.button&0b11111101;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	f023 0302 	bic.w	r3, r3, #2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008e4:	705a      	strb	r2, [r3, #1]

			if (Mouse_Info->buttons[2]==1)  spi_transmit_buffer.button=spi_transmit_buffer.button|0b00000100;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d107      	bne.n	80008fe <USBH_HID_EventCallback+0x11a>
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 80008fa:	705a      	strb	r2, [r3, #1]
 80008fc:	e006      	b.n	800090c <USBH_HID_EventCallback+0x128>
			else spi_transmit_buffer.button=spi_transmit_buffer.button&0b11111011;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 8000900:	785b      	ldrb	r3, [r3, #1]
 8000902:	f023 0304 	bic.w	r3, r3, #4
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 800090a:	705a      	strb	r2, [r3, #1]


			//HAL_UART_Transmit(&huart1, (uint8_t *) &spi_transmit_buffer, sizeof(spi_transmit_buffer), 100);
			HAL_UART_Transmit(&huart1, (uint8_t *) &Uart_Buf, len, 100);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	b29a      	uxth	r2, r3
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	4915      	ldr	r1, [pc, #84]	; (8000968 <USBH_HID_EventCallback+0x184>)
 8000914:	481a      	ldr	r0, [pc, #104]	; (8000980 <USBH_HID_EventCallback+0x19c>)
 8000916:	f003 fe84 	bl	8004622 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2101      	movs	r1, #1
 800091e:	4819      	ldr	r0, [pc, #100]	; (8000984 <USBH_HID_EventCallback+0x1a0>)
 8000920:	f000 fdf8 	bl	8001514 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f000 fb1f 	bl	8000f68 <HAL_Delay>
			HAL_SPI_TransmitReceive(&hspi1,(uint8_t *) &spi_transmit_buffer,(uint8_t *) &spi_receive_buffer,sizeof(spi_transmit_buffer),10);
 800092a:	230a      	movs	r3, #10
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2311      	movs	r3, #17
 8000930:	4a15      	ldr	r2, [pc, #84]	; (8000988 <USBH_HID_EventCallback+0x1a4>)
 8000932:	490f      	ldr	r1, [pc, #60]	; (8000970 <USBH_HID_EventCallback+0x18c>)
 8000934:	4815      	ldr	r0, [pc, #84]	; (800098c <USBH_HID_EventCallback+0x1a8>)
 8000936:	f002 ff04 	bl	8003742 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <USBH_HID_EventCallback+0x1a0>)
 8000940:	f000 fde8 	bl	8001514 <HAL_GPIO_WritePin>
			//start_exec_time();
			TIM2->CNT=0;
 8000944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
			seconds=0;
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <USBH_HID_EventCallback+0x17c>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
		}
}
 8000952:	bf00      	nop
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	bf00      	nop
 800095c:	200000ec 	.word	0x200000ec
 8000960:	200000fc 	.word	0x200000fc
 8000964:	08008f68 	.word	0x08008f68
 8000968:	20000104 	.word	0x20000104
 800096c:	40020800 	.word	0x40020800
 8000970:	200000c4 	.word	0x200000c4
 8000974:	200000f8 	.word	0x200000f8
 8000978:	200000e9 	.word	0x200000e9
 800097c:	20000100 	.word	0x20000100
 8000980:	20000208 	.word	0x20000208
 8000984:	40020400 	.word	0x40020400
 8000988:	200000d8 	.word	0x200000d8
 800098c:	20000168 	.word	0x20000168

08000990 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	seconds++;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a0:	6013      	str	r3, [r2, #0]
	//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000fc 	.word	0x200000fc

080009b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <MX_SPI1_Init+0x80>)
 80009bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009e8:	2230      	movs	r2, #48	; 0x30
 80009ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_SPI1_Init+0x7c>)
 80009fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI1_Init+0x7c>)
 8000a02:	220a      	movs	r2, #10
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a06:	480a      	ldr	r0, [pc, #40]	; (8000a30 <MX_SPI1_Init+0x7c>)
 8000a08:	f002 fe0a 	bl	8003620 <HAL_SPI_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a12:	f7ff fee1 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.Init.CRCPolynomial = 7;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI1_Init+0x7c>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_SPI1_Init+0x7c>)
 8000a1e:	f002 fdff 	bl	8003620 <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI1_Init+0x78>
    {
      Error_Handler();
 8000a28:	f7ff fed6 	bl	80007d8 <Error_Handler>
    }
  /* USER CODE END SPI1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000168 	.word	0x20000168
 8000a34:	40013000 	.word	0x40013000

08000a38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_SPI_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a92:	23e0      	movs	r3, #224	; 0xe0
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_SPI_MspInit+0x8c>)
 8000aae:	f000 fbad 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40013000 	.word	0x40013000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f9e0 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <TIM2_IRQHandler+0x10>)
 8000b72:	f003 f975 	bl	8003e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200001c0 	.word	0x200001c0

08000b80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <OTG_FS_IRQHandler+0x10>)
 8000b86:	f000 ff63 	bl	8001a50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000660 	.word	0x20000660

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f007 fd54 	bl	8008670 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20010000 	.word	0x20010000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	200000ac 	.word	0x200000ac
 8000bfc:	20000978 	.word	0x20000978

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000c4a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000c58:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c6a:	4814      	ldr	r0, [pc, #80]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000c6c:	f003 f846 	bl	8003cfc <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c76:	f7ff fdaf 	bl	80007d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000c88:	f003 f9f2 	bl	8004070 <HAL_TIM_ConfigClockSource>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c92:	f7ff fda1 	bl	80007d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_TIM2_Init+0x98>)
 8000ca4:	f003 fbee 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cae:	f7ff fd93 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001c0 	.word	0x200001c0

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd0:	d115      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	201c      	movs	r0, #28
 8000cf4:	f000 fa37 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cf8:	201c      	movs	r0, #28
 8000cfa:	f000 fa50 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_USART1_UART_Init+0x50>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d44:	f003 fc20 	bl	8004588 <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d4e:	f7ff fd43 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000208 	.word	0x20000208
 8000d5c:	40011000 	.word	0x40011000

08000d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a28      	ldr	r2, [pc, #160]	; (8000e20 <HAL_UART_MspInit+0xc0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d14a      	bne.n	8000e18 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_UART_MspInit+0xc4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de8:	2307      	movs	r3, #7
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <HAL_UART_MspInit+0xc8>)
 8000df4:	f000 fa0a 	bl	800120c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <HAL_UART_MspInit+0xcc>)
 8000e14:	f000 f9fa 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40011000 	.word	0x40011000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020400 	.word	0x40020400

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff fed1 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f007 fc0d 	bl	800867c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fc35 	bl	80006d0 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e74:	080090b0 	.word	0x080090b0
  ldr r2, =_sbss
 8000e78:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e7c:	20000974 	.word	0x20000974

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fe06 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	2000024c 	.word	0x2000024c

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000024c 	.word	0x2000024c

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e00e      	b.n	8001202 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	795b      	ldrb	r3, [r3, #5]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff f9d3 	bl	80005a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e159      	b.n	80014dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8148 	bne.w	80014d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80a2 	beq.w	80014d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a56      	ldr	r2, [pc, #344]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <HAL_GPIO_Init+0x2e8>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a52      	ldr	r2, [pc, #328]	; (80014f8 <HAL_GPIO_Init+0x2ec>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x2f0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x202>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2f4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x1fe>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a47      	ldr	r2, [pc, #284]	; (8001504 <HAL_GPIO_Init+0x2f8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x1fa>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_GPIO_Init+0x2fc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x1f6>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_GPIO_Init+0x300>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x1f2>
 80013fa:	2304      	movs	r3, #4
 80013fc:	e008      	b.n	8001410 <HAL_GPIO_Init+0x204>
 80013fe:	2307      	movs	r3, #7
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x204>
 8001402:	2303      	movs	r3, #3
 8001404:	e004      	b.n	8001410 <HAL_GPIO_Init+0x204>
 8001406:	2302      	movs	r3, #2
 8001408:	e002      	b.n	8001410 <HAL_GPIO_Init+0x204>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x204>
 800140e:	2300      	movs	r3, #0
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f002 0203 	and.w	r2, r2, #3
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4093      	lsls	r3, r2
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001420:	4935      	ldr	r1, [pc, #212]	; (80014f8 <HAL_GPIO_Init+0x2ec>)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001452:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_GPIO_Init+0x304>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800147c:	4a24      	ldr	r2, [pc, #144]	; (8001510 <HAL_GPIO_Init+0x304>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_GPIO_Init+0x304>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_GPIO_Init+0x304>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	f67f aea2 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40013c00 	.word	0x40013c00

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001530:	e003      	b.n	800153a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	041a      	lsls	r2, r3, #16
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	619a      	str	r2, [r3, #24]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001546:	b480      	push	{r7}
 8001548:	b085      	sub	sp, #20
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001558:	887a      	ldrh	r2, [r7, #2]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4013      	ands	r3, r2
 800155e:	041a      	lsls	r2, r3, #16
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43d9      	mvns	r1, r3
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	400b      	ands	r3, r1
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800157a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157c:	b08f      	sub	sp, #60	; 0x3c
 800157e:	af0a      	add	r7, sp, #40	; 0x28
 8001580:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e054      	b.n	8001636 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f006 fdc6 	bl	8008138 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2203      	movs	r2, #3
 80015b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fb64 	bl	8004c98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	687e      	ldr	r6, [r7, #4]
 80015d8:	466d      	mov	r5, sp
 80015da:	f106 0410 	add.w	r4, r6, #16
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ee:	1d33      	adds	r3, r6, #4
 80015f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f2:	6838      	ldr	r0, [r7, #0]
 80015f4:	f003 fade 	bl	8004bb4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fb5b 	bl	8004cba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	687e      	ldr	r6, [r7, #4]
 800160c:	466d      	mov	r5, sp
 800160e:	f106 0410 	add.w	r4, r6, #16
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800161e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001622:	1d33      	adds	r3, r6, #4
 8001624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001626:	6838      	ldr	r0, [r7, #0]
 8001628:	f003 fce4 	bl	8004ff4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800163e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800163e:	b590      	push	{r4, r7, lr}
 8001640:	b089      	sub	sp, #36	; 0x24
 8001642:	af04      	add	r7, sp, #16
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	4608      	mov	r0, r1
 8001648:	4611      	mov	r1, r2
 800164a:	461a      	mov	r2, r3
 800164c:	4603      	mov	r3, r0
 800164e:	70fb      	strb	r3, [r7, #3]
 8001650:	460b      	mov	r3, r1
 8001652:	70bb      	strb	r3, [r7, #2]
 8001654:	4613      	mov	r3, r2
 8001656:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_HCD_HC_Init+0x28>
 8001662:	2302      	movs	r3, #2
 8001664:	e076      	b.n	8001754 <HAL_HCD_HC_Init+0x116>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	212c      	movs	r1, #44	; 0x2c
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	333d      	adds	r3, #61	; 0x3d
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	3338      	adds	r3, #56	; 0x38
 800168e:	787a      	ldrb	r2, [r7, #1]
 8001690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	3340      	adds	r3, #64	; 0x40
 80016a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	212c      	movs	r1, #44	; 0x2c
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	3339      	adds	r3, #57	; 0x39
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	333f      	adds	r3, #63	; 0x3f
 80016c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	78ba      	ldrb	r2, [r7, #2]
 80016ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016d2:	b2d0      	uxtb	r0, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	333a      	adds	r3, #58	; 0x3a
 80016e0:	4602      	mov	r2, r0
 80016e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da09      	bge.n	8001700 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	333b      	adds	r3, #59	; 0x3b
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e008      	b.n	8001712 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	333b      	adds	r3, #59	; 0x3b
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	212c      	movs	r1, #44	; 0x2c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	333c      	adds	r3, #60	; 0x3c
 8001720:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001724:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	787c      	ldrb	r4, [r7, #1]
 800172c:	78ba      	ldrb	r2, [r7, #2]
 800172e:	78f9      	ldrb	r1, [r7, #3]
 8001730:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	4623      	mov	r3, r4
 8001742:	f003 fddd 	bl	8005300 <USB_HC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}

0800175c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_HCD_HC_Halt+0x1e>
 8001776:	2302      	movs	r3, #2
 8001778:	e00f      	b.n	800179a <HAL_HCD_HC_Halt+0x3e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f004 f82d 	bl	80057ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	460b      	mov	r3, r1
 80017b8:	70bb      	strb	r3, [r7, #2]
 80017ba:	4613      	mov	r3, r2
 80017bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	333b      	adds	r3, #59	; 0x3b
 80017cc:	78ba      	ldrb	r2, [r7, #2]
 80017ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	333f      	adds	r3, #63	; 0x3f
 80017de:	787a      	ldrb	r2, [r7, #1]
 80017e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017e2:	7c3b      	ldrb	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d112      	bne.n	800180e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3342      	adds	r3, #66	; 0x42
 80017f6:	2203      	movs	r2, #3
 80017f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	333d      	adds	r3, #61	; 0x3d
 8001808:	7f3a      	ldrb	r2, [r7, #28]
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e008      	b.n	8001820 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	2202      	movs	r2, #2
 800181e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b03      	cmp	r3, #3
 8001824:	f200 80c6 	bhi.w	80019b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001841 	.word	0x08001841
 8001834:	080019a1 	.word	0x080019a1
 8001838:	080018a5 	.word	0x080018a5
 800183c:	08001923 	.word	0x08001923
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001840:	7c3b      	ldrb	r3, [r7, #16]
 8001842:	2b01      	cmp	r3, #1
 8001844:	f040 80b8 	bne.w	80019b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 80b4 	bne.w	80019b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001850:	8b3b      	ldrh	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d108      	bne.n	8001868 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3355      	adds	r3, #85	; 0x55
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3355      	adds	r3, #85	; 0x55
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	3342      	adds	r3, #66	; 0x42
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800188e:	e093      	b.n	80019b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3342      	adds	r3, #66	; 0x42
 800189e:	2202      	movs	r2, #2
 80018a0:	701a      	strb	r2, [r3, #0]
      break;
 80018a2:	e089      	b.n	80019b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018a4:	78bb      	ldrb	r3, [r7, #2]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11d      	bne.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3355      	adds	r3, #85	; 0x55
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3342      	adds	r3, #66	; 0x42
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018d0:	e073      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3342      	adds	r3, #66	; 0x42
 80018e0:	2202      	movs	r2, #2
 80018e2:	701a      	strb	r2, [r3, #0]
      break;
 80018e4:	e069      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3354      	adds	r3, #84	; 0x54
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3342      	adds	r3, #66	; 0x42
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
      break;
 800190c:	e055      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3342      	adds	r3, #66	; 0x42
 800191c:	2202      	movs	r2, #2
 800191e:	701a      	strb	r2, [r3, #0]
      break;
 8001920:	e04b      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001922:	78bb      	ldrb	r3, [r7, #2]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d11d      	bne.n	8001964 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3355      	adds	r3, #85	; 0x55
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800194e:	e034      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3342      	adds	r3, #66	; 0x42
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
      break;
 8001962:	e02a      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3354      	adds	r3, #84	; 0x54
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	3342      	adds	r3, #66	; 0x42
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
      break;
 800198a:	e016      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3342      	adds	r3, #66	; 0x42
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
      break;
 800199e:	e00c      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3342      	adds	r3, #66	; 0x42
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
      break;
 80019b2:	e002      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019b4:	bf00      	nop
 80019b6:	e000      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	3344      	adds	r3, #68	; 0x44
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	8b3a      	ldrh	r2, [r7, #24]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	202c      	movs	r0, #44	; 0x2c
 80019d4:	fb00 f303 	mul.w	r3, r0, r3
 80019d8:	440b      	add	r3, r1
 80019da:	334c      	adds	r3, #76	; 0x4c
 80019dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3360      	adds	r3, #96	; 0x60
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3350      	adds	r3, #80	; 0x50
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3339      	adds	r3, #57	; 0x39
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3361      	adds	r3, #97	; 0x61
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	222c      	movs	r2, #44	; 0x2c
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	3338      	adds	r3, #56	; 0x38
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	18d1      	adds	r1, r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f003 fd80 	bl	8005544 <USB_HC_StartXfer>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop

08001a50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fa81 	bl	8004f6e <USB_GetMode>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f040 80f6 	bne.w	8001c60 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fa65 	bl	8004f48 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80ec 	beq.w	8001c5e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fa5c 	bl	8004f48 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a9a:	d104      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 fa4c 	bl	8004f48 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aba:	d104      	bne.n	8001ac6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fa3c 	bl	8004f48 <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ada:	d104      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fa2c 	bl	8004f48 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d103      	bne.n	8001b02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2202      	movs	r2, #2
 8001b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fa1e 	bl	8004f48 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b16:	d11c      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b32:	2110      	movs	r1, #16
 8001b34:	6938      	ldr	r0, [r7, #16]
 8001b36:	f003 f90d 	bl	8004d54 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b3a:	6938      	ldr	r0, [r7, #16]
 8001b3c:	f003 f93e 	bl	8004dbc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fb14 	bl	8005174 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f006 fb63 	bl	8008218 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 f9f6 	bl	8004f48 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b66:	d102      	bne.n	8001b6e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f001 f89e 	bl	8002caa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 f9e8 	bl	8004f48 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d106      	bne.n	8001b90 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f006 fb2c 	bl	80081e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 f9d7 	bl	8004f48 <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d101      	bne.n	8001ba8 <HAL_HCD_IRQHandler+0x158>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_HCD_IRQHandler+0x15a>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0210 	bic.w	r2, r2, #16
 8001bbc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 ffa1 	bl	8002b06 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0210 	orr.w	r2, r2, #16
 8001bd2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 f9b5 	bl	8004f48 <USB_ReadInterrupts>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001be8:	d13a      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fdea 	bl	80057c8 <USB_HC_ReadInterrupt>
 8001bf4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e025      	b.n	8001c48 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d018      	beq.n	8001c42 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c26:	d106      	bne.n	8001c36 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8ab 	bl	8001d8a <HCD_HC_IN_IRQHandler>
 8001c34:	e005      	b.n	8001c42 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fbf9 	bl	8002434 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3d4      	bcc.n	8001bfc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	e000      	b.n	8001c60 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c5e:	bf00      	nop
    }
  }
}
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_HCD_Start+0x16>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e013      	b.n	8001ca4 <HAL_HCD_Start+0x3e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 fad6 	bl	800523c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 ffee 	bl	8004c76 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_HCD_Stop+0x16>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00d      	b.n	8001cde <HAL_HCD_Stop+0x32>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fec4 	bl	8005a5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fa78 	bl	80051e8 <USB_ResetPort>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3360      	adds	r3, #96	; 0x60
 8001d1c:	781b      	ldrb	r3, [r3, #0]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3350      	adds	r3, #80	; 0x50
 8001d44:	681b      	ldr	r3, [r3, #0]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fabc 	bl	80052dc <USB_GetCurrentFrame>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fa97 	bl	80052ae <USB_GetHostSpeed>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d11a      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2304      	movs	r3, #4
 8001dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3361      	adds	r3, #97	; 0x61
 8001dda:	2206      	movs	r2, #6
 8001ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fcfe 	bl	80057ea <USB_HC_Halt>
 8001dee:	e0af      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e06:	d11b      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3361      	adds	r3, #97	; 0x61
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 fcd6 	bl	80057ea <USB_HC_Halt>
 8001e3e:	e087      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d109      	bne.n	8001e6a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	461a      	mov	r2, r3
 8001e64:	2320      	movs	r3, #32
 8001e66:	6093      	str	r3, [r2, #8]
 8001e68:	e072      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d11a      	bne.n	8001eb6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3361      	adds	r3, #97	; 0x61
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fc9b 	bl	80057ea <USB_HC_Halt>
 8001eb4:	e04c      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ecc:	d11b      	bne.n	8001f06 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	461a      	mov	r2, r3
 8001edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3361      	adds	r3, #97	; 0x61
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fc73 	bl	80057ea <USB_HC_Halt>
 8001f04:	e024      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d119      	bne.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3361      	adds	r3, #97	; 0x61
 8001f3c:	2206      	movs	r2, #6
 8001f3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fc4d 	bl	80057ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f66:	d112      	bne.n	8001f8e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fc39 	bl	80057ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f8c:	e24e      	b.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	f040 80df 	bne.w	8002164 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d019      	beq.n	8001fe2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	3348      	adds	r3, #72	; 0x48
 8001fbc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0159      	lsls	r1, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fd0:	1ad2      	subs	r2, r2, r3
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	202c      	movs	r0, #44	; 0x2c
 8001fd8:	fb00 f303 	mul.w	r3, r0, r3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3350      	adds	r3, #80	; 0x50
 8001fe0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	3361      	adds	r3, #97	; 0x61
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	335c      	adds	r3, #92	; 0x5c
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	461a      	mov	r2, r3
 8002014:	2301      	movs	r3, #1
 8002016:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	333f      	adds	r3, #63	; 0x3f
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	333f      	adds	r3, #63	; 0x3f
 800203a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800203c:	2b02      	cmp	r3, #2
 800203e:	d111      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fbcd 	bl	80057ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	461a      	mov	r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	6093      	str	r3, [r2, #8]
 8002062:	e03a      	b.n	80020da <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	333f      	adds	r3, #63	; 0x3f
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d009      	beq.n	800208c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	333f      	adds	r3, #63	; 0x3f
 8002086:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002088:	2b01      	cmp	r3, #1
 800208a:	d126      	bne.n	80020da <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	0151      	lsls	r1, r2, #5
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	440a      	add	r2, r1
 80020a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3360      	adds	r3, #96	; 0x60
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	b2d9      	uxtb	r1, r3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	202c      	movs	r0, #44	; 0x2c
 80020c8:	fb00 f303 	mul.w	r3, r0, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3360      	adds	r3, #96	; 0x60
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f006 f8ad 	bl	8008234 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d12b      	bne.n	800213a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3348      	adds	r3, #72	; 0x48
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	202c      	movs	r0, #44	; 0x2c
 80020f8:	fb00 f202 	mul.w	r2, r0, r2
 80020fc:	440a      	add	r2, r1
 80020fe:	3240      	adds	r2, #64	; 0x40
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	fbb3 f3f2 	udiv	r3, r3, r2
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 818e 	beq.w	800242c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3354      	adds	r3, #84	; 0x54
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2d8      	uxtb	r0, r3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3354      	adds	r3, #84	; 0x54
 8002134:	4602      	mov	r2, r0
 8002136:	701a      	strb	r2, [r3, #0]
}
 8002138:	e178      	b.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3354      	adds	r3, #84	; 0x54
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3354      	adds	r3, #84	; 0x54
 800215e:	4602      	mov	r2, r0
 8002160:	701a      	strb	r2, [r3, #0]
}
 8002162:	e163      	b.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b02      	cmp	r3, #2
 8002178:	f040 80f6 	bne.w	8002368 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3361      	adds	r3, #97	; 0x61
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d109      	bne.n	80021a4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3360      	adds	r3, #96	; 0x60
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e0c9      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3361      	adds	r3, #97	; 0x61
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d109      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3360      	adds	r3, #96	; 0x60
 80021c6:	2205      	movs	r2, #5
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e0b5      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3361      	adds	r3, #97	; 0x61
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d009      	beq.n	80021f4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d150      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	335c      	adds	r3, #92	; 0x5c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	202c      	movs	r0, #44	; 0x2c
 800220c:	fb00 f303 	mul.w	r3, r0, r3
 8002210:	440b      	add	r3, r1
 8002212:	335c      	adds	r3, #92	; 0x5c
 8002214:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	335c      	adds	r3, #92	; 0x5c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d912      	bls.n	8002250 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	335c      	adds	r3, #92	; 0x5c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3360      	adds	r3, #96	; 0x60
 800224a:	2204      	movs	r2, #4
 800224c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800224e:	e073      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3360      	adds	r3, #96	; 0x60
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002278:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002280:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002294:	e050      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3361      	adds	r3, #97	; 0x61
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d122      	bne.n	80022f0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3360      	adds	r3, #96	; 0x60
 80022b8:	2202      	movs	r2, #2
 80022ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e023      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3361      	adds	r3, #97	; 0x61
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b07      	cmp	r3, #7
 8002302:	d119      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	335c      	adds	r3, #92	; 0x5c
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	202c      	movs	r0, #44	; 0x2c
 800231c:	fb00 f303 	mul.w	r3, r0, r3
 8002320:	440b      	add	r3, r1
 8002322:	335c      	adds	r3, #92	; 0x5c
 8002324:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	3360      	adds	r3, #96	; 0x60
 8002334:	2204      	movs	r2, #4
 8002336:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2302      	movs	r3, #2
 8002348:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	b2d9      	uxtb	r1, r3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	202c      	movs	r0, #44	; 0x2c
 8002354:	fb00 f303 	mul.w	r3, r0, r3
 8002358:	4413      	add	r3, r2
 800235a:	3360      	adds	r3, #96	; 0x60
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f005 ff67 	bl	8008234 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002366:	e061      	b.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d156      	bne.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	333f      	adds	r3, #63	; 0x3f
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b03      	cmp	r3, #3
 8002390:	d111      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	335c      	adds	r3, #92	; 0x5c
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fa1b 	bl	80057ea <USB_HC_Halt>
 80023b4:	e031      	b.n	800241a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	333f      	adds	r3, #63	; 0x3f
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	333f      	adds	r3, #63	; 0x3f
 80023d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d11d      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	335c      	adds	r3, #92	; 0x5c
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d110      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3361      	adds	r3, #97	; 0x61
 8002406:	2203      	movs	r2, #3
 8002408:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f003 f9e8 	bl	80057ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	2310      	movs	r3, #16
 800242a:	6093      	str	r3, [r2, #8]
}
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11a      	bne.n	800249a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	461a      	mov	r2, r3
 8002472:	2304      	movs	r3, #4
 8002474:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3361      	adds	r3, #97	; 0x61
 8002484:	2206      	movs	r2, #6
 8002486:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f003 f9a9 	bl	80057ea <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002498:	e331      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d12e      	bne.n	800250e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2320      	movs	r3, #32
 80024c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	333d      	adds	r3, #61	; 0x3d
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 8313 	bne.w	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	333d      	adds	r3, #61	; 0x3d
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3360      	adds	r3, #96	; 0x60
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f003 f96f 	bl	80057ea <USB_HC_Halt>
}
 800250c:	e2f7      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002524:	d112      	bne.n	800254c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	461a      	mov	r2, r3
 8002534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002538:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f003 f950 	bl	80057ea <USB_HC_Halt>
}
 800254a:	e2d8      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d140      	bne.n	80025e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d111      	bne.n	80025ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	333d      	adds	r3, #61	; 0x3d
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	2301      	movs	r3, #1
 80025be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3361      	adds	r3, #97	; 0x61
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f904 	bl	80057ea <USB_HC_Halt>
}
 80025e2:	e28c      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d12c      	bne.n	8002654 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3361      	adds	r3, #97	; 0x61
 8002608:	2204      	movs	r2, #4
 800260a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	333d      	adds	r3, #61	; 0x3d
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	335c      	adds	r3, #92	; 0x5c
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f003 f8d5 	bl	80057ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	6093      	str	r3, [r2, #8]
}
 8002652:	e254      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11a      	bne.n	80026a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	461a      	mov	r2, r3
 8002678:	2308      	movs	r3, #8
 800267a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3361      	adds	r3, #97	; 0x61
 800268a:	2205      	movs	r2, #5
 800268c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f003 f8a6 	bl	80057ea <USB_HC_Halt>
}
 800269e:	e22e      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d140      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	335c      	adds	r3, #92	; 0x5c
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3361      	adds	r3, #97	; 0x61
 80026d6:	2203      	movs	r2, #3
 80026d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	333d      	adds	r3, #61	; 0x3d
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d112      	bne.n	8002714 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	333c      	adds	r3, #60	; 0x3c
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d108      	bne.n	8002714 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333d      	adds	r3, #61	; 0x3d
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f863 	bl	80057ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2310      	movs	r3, #16
 8002734:	6093      	str	r3, [r2, #8]
}
 8002736:	e1e2      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b80      	cmp	r3, #128	; 0x80
 800274c:	d164      	bne.n	8002818 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d111      	bne.n	800277a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3361      	adds	r3, #97	; 0x61
 8002764:	2206      	movs	r2, #6
 8002766:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f003 f839 	bl	80057ea <USB_HC_Halt>
 8002778:	e044      	b.n	8002804 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	335c      	adds	r3, #92	; 0x5c
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	202c      	movs	r0, #44	; 0x2c
 8002792:	fb00 f303 	mul.w	r3, r0, r3
 8002796:	440b      	add	r3, r1
 8002798:	335c      	adds	r3, #92	; 0x5c
 800279a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	335c      	adds	r3, #92	; 0x5c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d920      	bls.n	80027f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	335c      	adds	r3, #92	; 0x5c
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3360      	adds	r3, #96	; 0x60
 80027d0:	2204      	movs	r2, #4
 80027d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	b2d9      	uxtb	r1, r3
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	202c      	movs	r0, #44	; 0x2c
 80027de:	fb00 f303 	mul.w	r3, r0, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3360      	adds	r3, #96	; 0x60
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f005 fd22 	bl	8008234 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027f0:	e008      	b.n	8002804 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3360      	adds	r3, #96	; 0x60
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	6093      	str	r3, [r2, #8]
}
 8002816:	e172      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282e:	d11b      	bne.n	8002868 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3361      	adds	r3, #97	; 0x61
 800283e:	2208      	movs	r2, #8
 8002840:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f002 ffcc 	bl	80057ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	461a      	mov	r2, r3
 8002860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002864:	6093      	str	r3, [r2, #8]
}
 8002866:	e14a      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b02      	cmp	r3, #2
 800287c:	f040 813f 	bne.w	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d17d      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3360      	adds	r3, #96	; 0x60
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	333f      	adds	r3, #63	; 0x3f
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d00a      	beq.n	80028d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	333f      	adds	r3, #63	; 0x3f
 80028c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	f040 8100 	bne.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d113      	bne.n	8002900 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3355      	adds	r3, #85	; 0x55
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	f083 0301 	eor.w	r3, r3, #1
 80028ec:	b2d8      	uxtb	r0, r3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3355      	adds	r3, #85	; 0x55
 80028fc:	4602      	mov	r2, r0
 80028fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b01      	cmp	r3, #1
 8002906:	f040 80e3 	bne.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	334c      	adds	r3, #76	; 0x4c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80d8 	beq.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	334c      	adds	r3, #76	; 0x4c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	202c      	movs	r0, #44	; 0x2c
 8002936:	fb00 f202 	mul.w	r2, r0, r2
 800293a:	440a      	add	r2, r1
 800293c:	3240      	adds	r2, #64	; 0x40
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	4413      	add	r3, r2
 8002942:	3b01      	subs	r3, #1
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f202 	mul.w	r2, r0, r2
 800294e:	440a      	add	r2, r1
 8002950:	3240      	adds	r2, #64	; 0x40
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	fbb3 f3f2 	udiv	r3, r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80b5 	beq.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3355      	adds	r3, #85	; 0x55
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2d8      	uxtb	r0, r3
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3355      	adds	r3, #85	; 0x55
 800298a:	4602      	mov	r2, r0
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e09f      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3361      	adds	r3, #97	; 0x61
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d109      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	2202      	movs	r2, #2
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e08b      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d109      	bne.n	80029e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3360      	adds	r3, #96	; 0x60
 80029da:	2202      	movs	r2, #2
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e077      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3361      	adds	r3, #97	; 0x61
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d109      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3360      	adds	r3, #96	; 0x60
 8002a02:	2205      	movs	r2, #5
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e063      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d009      	beq.n	8002a30 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3361      	adds	r3, #97	; 0x61
 8002a2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d14f      	bne.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	335c      	adds	r3, #92	; 0x5c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	202c      	movs	r0, #44	; 0x2c
 8002a48:	fb00 f303 	mul.w	r3, r0, r3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	335c      	adds	r3, #92	; 0x5c
 8002a50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	335c      	adds	r3, #92	; 0x5c
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d912      	bls.n	8002a8c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	335c      	adds	r3, #92	; 0x5c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	2204      	movs	r2, #4
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e021      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3360      	adds	r3, #96	; 0x60
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ab4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002abc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2302      	movs	r3, #2
 8002ae0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	b2d9      	uxtb	r1, r3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	202c      	movs	r0, #44	; 0x2c
 8002aec:	fb00 f303 	mul.w	r3, r0, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3360      	adds	r3, #96	; 0x60
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f005 fb9b 	bl	8008234 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002afe:	bf00      	nop
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b08a      	sub	sp, #40	; 0x28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	0c5b      	lsrs	r3, r3, #17
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d004      	beq.n	8002b4c <HCD_RXQLVL_IRQHandler+0x46>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	f000 80a9 	beq.w	8002c9c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b4a:	e0aa      	b.n	8002ca2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80a6 	beq.w	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3344      	adds	r3, #68	; 0x44
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 809b 	beq.w	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3350      	adds	r3, #80	; 0x50
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	441a      	add	r2, r3
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	202c      	movs	r0, #44	; 0x2c
 8002b84:	fb00 f303 	mul.w	r3, r0, r3
 8002b88:	440b      	add	r3, r1
 8002b8a:	334c      	adds	r3, #76	; 0x4c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d87a      	bhi.n	8002c88 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3344      	adds	r3, #68	; 0x44
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	b292      	uxth	r2, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f002 f974 	bl	8004e98 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3344      	adds	r3, #68	; 0x44
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3344      	adds	r3, #68	; 0x44
 8002bd2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3350      	adds	r3, #80	; 0x50
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	441a      	add	r2, r3
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	202c      	movs	r0, #44	; 0x2c
 8002bee:	fb00 f303 	mul.w	r3, r0, r3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3350      	adds	r3, #80	; 0x50
 8002bf6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	0cdb      	lsrs	r3, r3, #19
 8002c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3340      	adds	r3, #64	; 0x40
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d13c      	bne.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d039      	beq.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c42:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c4a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3354      	adds	r3, #84	; 0x54
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2d8      	uxtb	r0, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3354      	adds	r3, #84	; 0x54
 8002c82:	4602      	mov	r2, r0
 8002c84:	701a      	strb	r2, [r3, #0]
      break;
 8002c86:	e00b      	b.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3360      	adds	r3, #96	; 0x60
 8002c96:	2204      	movs	r2, #4
 8002c98:	701a      	strb	r2, [r3, #0]
      break;
 8002c9a:	e001      	b.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ca0:	bf00      	nop
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3728      	adds	r7, #40	; 0x28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cd6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d10b      	bne.n	8002cfa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f005 fa85 	bl	80081fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d132      	bne.n	8002d6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f043 0308 	orr.w	r3, r3, #8
 8002d0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d126      	bne.n	8002d64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d113      	bne.n	8002d46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d28:	d106      	bne.n	8002d38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 fa1f 	bl	8005174 <USB_InitFSLSPClkSel>
 8002d36:	e011      	b.n	8002d5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f002 fa18 	bl	8005174 <USB_InitFSLSPClkSel>
 8002d44:	e00a      	b.n	8002d5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d106      	bne.n	8002d5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d54:	461a      	mov	r2, r3
 8002d56:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f005 fa77 	bl	8008250 <HAL_HCD_PortEnabled_Callback>
 8002d62:	e002      	b.n	8002d6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f005 fa81 	bl	800826c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d103      	bne.n	8002d7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f043 0320 	orr.w	r3, r3, #32
 8002d7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e264      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d075      	beq.n	8002e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dae:	4ba3      	ldr	r3, [pc, #652]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d00c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4ba0      	ldr	r3, [pc, #640]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d112      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc6:	4b9d      	ldr	r3, [pc, #628]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	4b99      	ldr	r3, [pc, #612]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x108>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d157      	bne.n	8002e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e23f      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d106      	bne.n	8002e04 <HAL_RCC_OscConfig+0x74>
 8002df6:	4b91      	ldr	r3, [pc, #580]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a90      	ldr	r2, [pc, #576]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01d      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x98>
 8002e0e:	4b8b      	ldr	r3, [pc, #556]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a8a      	ldr	r2, [pc, #552]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a87      	ldr	r2, [pc, #540]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e28:	4b84      	ldr	r3, [pc, #528]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a83      	ldr	r2, [pc, #524]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b81      	ldr	r3, [pc, #516]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a80      	ldr	r2, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe f882 	bl	8000f50 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe f87e 	bl	8000f50 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e204      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b76      	ldr	r3, [pc, #472]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0xc0>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe f86e 	bl	8000f50 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe f86a 	bl	8000f50 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1f0      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0xe8>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d063      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea6:	4b65      	ldr	r3, [pc, #404]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb2:	4b62      	ldr	r3, [pc, #392]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d11c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ebe:	4b5f      	ldr	r3, [pc, #380]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	4b5c      	ldr	r3, [pc, #368]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x152>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e1c4      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee2:	4b56      	ldr	r3, [pc, #344]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4952      	ldr	r1, [pc, #328]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	e03a      	b.n	8002f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f00:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <HAL_RCC_OscConfig+0x2b0>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe f823 	bl	8000f50 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7fe f81f 	bl	8000f50 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1a5      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4940      	ldr	r1, [pc, #256]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f42:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCC_OscConfig+0x2b0>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe f802 	bl	8000f50 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fd fffe 	bl	8000f50 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e184      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d030      	beq.n	8002fdc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f82:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_RCC_OscConfig+0x2b4>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fd ffe2 	bl	8000f50 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f90:	f7fd ffde 	bl	8000f50 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e164      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x200>
 8002fae:	e015      	b.n	8002fdc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCC_OscConfig+0x2b4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fd ffcb 	bl	8000f50 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fd ffc7 	bl	8000f50 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e14d      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a0 	beq.w	800312a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_OscConfig+0x2b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d121      	bne.n	800306a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_RCC_OscConfig+0x2b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a07      	ldr	r2, [pc, #28]	; (8003048 <HAL_RCC_OscConfig+0x2b8>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fd ff8d 	bl	8000f50 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	e011      	b.n	800305e <HAL_RCC_OscConfig+0x2ce>
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	42470000 	.word	0x42470000
 8003044:	42470e80 	.word	0x42470e80
 8003048:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fd ff80 	bl	8000f50 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e106      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b85      	ldr	r3, [pc, #532]	; (8003274 <HAL_RCC_OscConfig+0x4e4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x2f0>
 8003072:	4b81      	ldr	r3, [pc, #516]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a80      	ldr	r2, [pc, #512]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	e01c      	b.n	80030ba <HAL_RCC_OscConfig+0x32a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d10c      	bne.n	80030a2 <HAL_RCC_OscConfig+0x312>
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800308e:	f043 0304 	orr.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	4b78      	ldr	r3, [pc, #480]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a77      	ldr	r2, [pc, #476]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	e00b      	b.n	80030ba <HAL_RCC_OscConfig+0x32a>
 80030a2:	4b75      	ldr	r3, [pc, #468]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a74      	ldr	r2, [pc, #464]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	4b72      	ldr	r3, [pc, #456]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a71      	ldr	r2, [pc, #452]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fd ff45 	bl	8000f50 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fd ff41 	bl	8000f50 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0c5      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ee      	beq.n	80030ca <HAL_RCC_OscConfig+0x33a>
 80030ec:	e014      	b.n	8003118 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fd ff2f 	bl	8000f50 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fd ff2b 	bl	8000f50 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0af      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b56      	ldr	r3, [pc, #344]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a55      	ldr	r2, [pc, #340]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 809b 	beq.w	800326a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d05c      	beq.n	80031fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d141      	bne.n	80031cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003148:	4b4c      	ldr	r3, [pc, #304]	; (800327c <HAL_RCC_OscConfig+0x4ec>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fd feff 	bl	8000f50 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003156:	f7fd fefb 	bl	8000f50 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e081      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003168:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	019b      	lsls	r3, r3, #6
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	4937      	ldr	r1, [pc, #220]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319e:	4b37      	ldr	r3, [pc, #220]	; (800327c <HAL_RCC_OscConfig+0x4ec>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fd fed4 	bl	8000f50 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd fed0 	bl	8000f50 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e056      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x41c>
 80031ca:	e04e      	b.n	800326a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_RCC_OscConfig+0x4ec>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fd febd 	bl	8000f50 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7fd feb9 	bl	8000f50 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03f      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x44a>
 80031f8:	e037      	b.n	800326a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e032      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <HAL_RCC_OscConfig+0x4e8>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d028      	beq.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d121      	bne.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d11a      	bne.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003236:	4013      	ands	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800323c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d107      	bne.n	8003266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40007000 	.word	0x40007000
 8003278:	40023800 	.word	0x40023800
 800327c:	42470060 	.word	0x42470060

08003280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0cc      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b68      	ldr	r3, [pc, #416]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d90c      	bls.n	80032bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b65      	ldr	r3, [pc, #404]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a58      	ldr	r2, [pc, #352]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a52      	ldr	r2, [pc, #328]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d044      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d119      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d003      	beq.n	800333e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333a:	2b03      	cmp	r3, #3
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e067      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4934      	ldr	r1, [pc, #208]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003370:	f7fd fdee 	bl	8000f50 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fd fdea 	bl	8000f50 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e04f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	4b2b      	ldr	r3, [pc, #172]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 020c 	and.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	429a      	cmp	r2, r3
 800339e:	d1eb      	bne.n	8003378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d20c      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e032      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4916      	ldr	r1, [pc, #88]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	490e      	ldr	r1, [pc, #56]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003406:	f000 f821 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490a      	ldr	r1, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fd4e 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00
 800343c:	40023800 	.word	0x40023800
 8003440:	08008fb4 	.word	0x08008fb4
 8003444:	20000000 	.word	0x20000000
 8003448:	20000004 	.word	0x20000004

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003452:	2100      	movs	r1, #0
 8003454:	6079      	str	r1, [r7, #4]
 8003456:	2100      	movs	r1, #0
 8003458:	60f9      	str	r1, [r7, #12]
 800345a:	2100      	movs	r1, #0
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800345e:	2100      	movs	r1, #0
 8003460:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003462:	4952      	ldr	r1, [pc, #328]	; (80035ac <HAL_RCC_GetSysClockFreq+0x160>)
 8003464:	6889      	ldr	r1, [r1, #8]
 8003466:	f001 010c 	and.w	r1, r1, #12
 800346a:	2908      	cmp	r1, #8
 800346c:	d00d      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x3e>
 800346e:	2908      	cmp	r1, #8
 8003470:	f200 8094 	bhi.w	800359c <HAL_RCC_GetSysClockFreq+0x150>
 8003474:	2900      	cmp	r1, #0
 8003476:	d002      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x32>
 8003478:	2904      	cmp	r1, #4
 800347a:	d003      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x38>
 800347c:	e08e      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800347e:	4b4c      	ldr	r3, [pc, #304]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003480:	60bb      	str	r3, [r7, #8]
       break;
 8003482:	e08e      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003484:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003486:	60bb      	str	r3, [r7, #8]
      break;
 8003488:	e08b      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800348a:	4948      	ldr	r1, [pc, #288]	; (80035ac <HAL_RCC_GetSysClockFreq+0x160>)
 800348c:	6849      	ldr	r1, [r1, #4]
 800348e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003492:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003494:	4945      	ldr	r1, [pc, #276]	; (80035ac <HAL_RCC_GetSysClockFreq+0x160>)
 8003496:	6849      	ldr	r1, [r1, #4]
 8003498:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800349c:	2900      	cmp	r1, #0
 800349e:	d024      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a0:	4942      	ldr	r1, [pc, #264]	; (80035ac <HAL_RCC_GetSysClockFreq+0x160>)
 80034a2:	6849      	ldr	r1, [r1, #4]
 80034a4:	0989      	lsrs	r1, r1, #6
 80034a6:	4608      	mov	r0, r1
 80034a8:	f04f 0100 	mov.w	r1, #0
 80034ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80034b0:	f04f 0500 	mov.w	r5, #0
 80034b4:	ea00 0204 	and.w	r2, r0, r4
 80034b8:	ea01 0305 	and.w	r3, r1, r5
 80034bc:	493d      	ldr	r1, [pc, #244]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80034be:	fb01 f003 	mul.w	r0, r1, r3
 80034c2:	2100      	movs	r1, #0
 80034c4:	fb01 f102 	mul.w	r1, r1, r2
 80034c8:	1844      	adds	r4, r0, r1
 80034ca:	493a      	ldr	r1, [pc, #232]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80034cc:	fba2 0101 	umull	r0, r1, r2, r1
 80034d0:	1863      	adds	r3, r4, r1
 80034d2:	4619      	mov	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	f7fc fed0 	bl	8000280 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e04a      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b30      	ldr	r3, [pc, #192]	; (80035ac <HAL_RCC_GetSysClockFreq+0x160>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	461a      	mov	r2, r3
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	ea02 0400 	and.w	r4, r2, r0
 8003502:	ea03 0501 	and.w	r5, r3, r1
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	014b      	lsls	r3, r1, #5
 8003514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003518:	0142      	lsls	r2, r0, #5
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	1b00      	subs	r0, r0, r4
 8003520:	eb61 0105 	sbc.w	r1, r1, r5
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	018b      	lsls	r3, r1, #6
 800352e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003532:	0182      	lsls	r2, r0, #6
 8003534:	1a12      	subs	r2, r2, r0
 8003536:	eb63 0301 	sbc.w	r3, r3, r1
 800353a:	f04f 0000 	mov.w	r0, #0
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	00d9      	lsls	r1, r3, #3
 8003544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003548:	00d0      	lsls	r0, r2, #3
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	1912      	adds	r2, r2, r4
 8003550:	eb45 0303 	adc.w	r3, r5, r3
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	0299      	lsls	r1, r3, #10
 800355e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003562:	0290      	lsls	r0, r2, #10
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	461a      	mov	r2, r3
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	f7fc fe84 	bl	8000280 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4613      	mov	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCC_GetSysClockFreq+0x160>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	60bb      	str	r3, [r7, #8]
      break;
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x164>)
 800359e:	60bb      	str	r3, [r7, #8]
      break;
 80035a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a2:	68bb      	ldr	r3, [r7, #8]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bdb0      	pop	{r4, r5, r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	017d7840 	.word	0x017d7840

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08008fc4 	.word	0x08008fc4

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	08008fc4 	.word	0x08008fc4

08003620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e083      	b.n	800373a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003642:	d009      	beq.n	8003658 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
 800364a:	e005      	b.n	8003658 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fd f9e3 	bl	8000a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003688:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	ea42 0103 	orr.w	r1, r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	0c1b      	lsrs	r3, r3, #16
 80036f0:	f003 0104 	and.w	r1, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f003 0210 	and.w	r2, r3, #16
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370c:	d105      	bne.n	800371a <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b292      	uxth	r2, r2
 8003718:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b08e      	sub	sp, #56	; 0x38
 8003746:	af02      	add	r7, sp, #8
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003754:	2301      	movs	r3, #1
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_SPI_TransmitReceive+0x2a>
 8003768:	2302      	movs	r3, #2
 800376a:	e1f8      	b.n	8003b5e <HAL_SPI_TransmitReceive+0x41c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003774:	f7fd fbec 	bl	8000f50 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800378e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003792:	2b01      	cmp	r3, #1
 8003794:	d00f      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x74>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379c:	d107      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x6c>
 80037a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d003      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037b4:	e1c9      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x86>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x86>
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ce:	e1bc      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d003      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2205      	movs	r2, #5
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	887a      	ldrh	r2, [r7, #2]
 80037fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	887a      	ldrh	r2, [r7, #2]
 8003806:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	d10f      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003842:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d007      	beq.n	8003862 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	f040 808b 	bne.w	8003984 <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_SPI_TransmitReceive+0x13a>
 8003876:	8b7b      	ldrh	r3, [r7, #26]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d178      	bne.n	800396e <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	881a      	ldrh	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	1c9a      	adds	r2, r3, #2
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a0:	e065      	b.n	800396e <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d12d      	bne.n	800390c <HAL_SPI_TransmitReceive+0x1ca>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d028      	beq.n	800390c <HAL_SPI_TransmitReceive+0x1ca>
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d125      	bne.n	800390c <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <HAL_SPI_TransmitReceive+0x1ca>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fa:	d107      	bne.n	800390c <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800390a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d119      	bne.n	800394e <HAL_SPI_TransmitReceive+0x20c>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d014      	beq.n	800394e <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	b292      	uxth	r2, r2
 8003930:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800394a:	2301      	movs	r3, #1
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800394e:	f7fd faff 	bl	8000f50 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395a:	429a      	cmp	r2, r3
 800395c:	d807      	bhi.n	800396e <HAL_SPI_TransmitReceive+0x22c>
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d003      	beq.n	800396e <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800396c:	e0ed      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d194      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x160>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d18f      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x160>
 8003982:	e08e      	b.n	8003aa2 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x250>
 800398c:	8b7b      	ldrh	r3, [r7, #26]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d17d      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b8:	e069      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d12e      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x2e4>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d029      	beq.n	8003a26 <HAL_SPI_TransmitReceive+0x2e4>
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d126      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10c      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x2e4>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a14:	d107      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a24:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d119      	bne.n	8003a68 <HAL_SPI_TransmitReceive+0x326>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d014      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a64:	2301      	movs	r3, #1
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a68:	f7fd fa72 	bl	8000f50 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d803      	bhi.n	8003a80 <HAL_SPI_TransmitReceive+0x33e>
 8003a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d102      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x344>
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a8c:	e05d      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d190      	bne.n	80039ba <HAL_SPI_TransmitReceive+0x278>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d18b      	bne.n	80039ba <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aaa:	d119      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f856 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0202 	orr.w	r2, r3, #2
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8003ad4:	e039      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8003ade:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d10d      	bne.n	8003b0a <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f043 0202 	orr.w	r2, r3, #2
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003b02:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8b2 	bl	8003c78 <SPI_EndRxTxTransaction>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b26:	e010      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	e000      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8003b48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3730      	adds	r7, #48	; 0x30
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b78:	f7fd f9ea 	bl	8000f50 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	4413      	add	r3, r2
 8003b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b88:	f7fd f9e2 	bl	8000f50 <HAL_GetTick>
 8003b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b8e:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	015b      	lsls	r3, r3, #5
 8003b94:	0d1b      	lsrs	r3, r3, #20
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	e054      	b.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d050      	beq.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ba8:	f7fd f9d2 	bl	8000f50 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d902      	bls.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d13d      	bne.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd6:	d111      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be0:	d004      	beq.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d107      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c04:	d10f      	bne.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e017      	b.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d19b      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000000 	.word	0x20000000

08003c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <SPI_EndRxTxTransaction+0x7c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <SPI_EndRxTxTransaction+0x80>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0d5b      	lsrs	r3, r3, #21
 8003c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca2:	d112      	bne.n	8003cca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2180      	movs	r1, #128	; 0x80
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff ff5a 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d016      	beq.n	8003ce8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e00f      	b.n	8003cea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d0f2      	beq.n	8003cca <SPI_EndRxTxTransaction+0x52>
 8003ce4:	e000      	b.n	8003ce8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ce6:	bf00      	nop
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	165e9f81 	.word	0x165e9f81

08003cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e041      	b.n	8003d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fc ffcc 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f000 fa88 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d001      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e044      	b.n	8003e3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <HAL_TIM_Base_Start_IT+0xb0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d018      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x6c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d013      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x6c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_TIM_Base_Start_IT+0xb4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x6c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <HAL_TIM_Base_Start_IT+0xb8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x6c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <HAL_TIM_Base_Start_IT+0xbc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_TIM_Base_Start_IT+0x6c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a16      	ldr	r2, [pc, #88]	; (8003e5c <HAL_TIM_Base_Start_IT+0xc0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d111      	bne.n	8003e2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b06      	cmp	r3, #6
 8003e18:	d010      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	e007      	b.n	8003e3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800
 8003e58:	40000c00 	.word	0x40000c00
 8003e5c:	40014000 	.word	0x40014000

08003e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d122      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d11b      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0202 	mvn.w	r2, #2
 8003e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f9b5 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f9a7 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f9b8 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d122      	bne.n	8003f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d11b      	bne.n	8003f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0204 	mvn.w	r2, #4
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f98b 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f97d 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f98e 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d122      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d11b      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0208 	mvn.w	r2, #8
 8003f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f961 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003f50:	e005      	b.n	8003f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f953 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f964 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0210 	mvn.w	r2, #16
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f937 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f929 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f93a 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d107      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0201 	mvn.w	r2, #1
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fc fcd6 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d107      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fab2 	bl	8004574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f8ff 	bl	800423a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b20      	cmp	r3, #32
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b20      	cmp	r3, #32
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0220 	mvn.w	r2, #32
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa7c 	bl	8004560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_TIM_ConfigClockSource+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e0b4      	b.n	80041f6 <HAL_TIM_ConfigClockSource+0x186>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d03e      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0xd4>
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	f200 8087 	bhi.w	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	f000 8086 	beq.w	80041e2 <HAL_TIM_ConfigClockSource+0x172>
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d87f      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b70      	cmp	r3, #112	; 0x70
 80040de:	d01a      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0xa6>
 80040e0:	2b70      	cmp	r3, #112	; 0x70
 80040e2:	d87b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b60      	cmp	r3, #96	; 0x60
 80040e6:	d050      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x11a>
 80040e8:	2b60      	cmp	r3, #96	; 0x60
 80040ea:	d877      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b50      	cmp	r3, #80	; 0x50
 80040ee:	d03c      	beq.n	800416a <HAL_TIM_ConfigClockSource+0xfa>
 80040f0:	2b50      	cmp	r3, #80	; 0x50
 80040f2:	d873      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d058      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x13a>
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d86f      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b30      	cmp	r3, #48	; 0x30
 80040fe:	d064      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004100:	2b30      	cmp	r3, #48	; 0x30
 8004102:	d86b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d060      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d867      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d05c      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d05a      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	e062      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f000 f98d 	bl	8004444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	609a      	str	r2, [r3, #8]
      break;
 8004142:	e04f      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6899      	ldr	r1, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f000 f976 	bl	8004444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004166:	609a      	str	r2, [r3, #8]
      break;
 8004168:	e03c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	461a      	mov	r2, r3
 8004178:	f000 f8ea 	bl	8004350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2150      	movs	r1, #80	; 0x50
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f943 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 8004188:	e02c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	461a      	mov	r2, r3
 8004198:	f000 f909 	bl	80043ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2160      	movs	r1, #96	; 0x60
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f933 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 80041a8:	e01c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f000 f8ca 	bl	8004350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f923 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 80041c8:	e00c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f000 f91a 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 80041da:	e003      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      break;
 80041e0:	e000      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a34      	ldr	r2, [pc, #208]	; (8004334 <TIM_Base_SetConfig+0xe4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00f      	beq.n	8004288 <TIM_Base_SetConfig+0x38>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d00b      	beq.n	8004288 <TIM_Base_SetConfig+0x38>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a31      	ldr	r2, [pc, #196]	; (8004338 <TIM_Base_SetConfig+0xe8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <TIM_Base_SetConfig+0x38>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a30      	ldr	r2, [pc, #192]	; (800433c <TIM_Base_SetConfig+0xec>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_Base_SetConfig+0x38>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <TIM_Base_SetConfig+0xf0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d108      	bne.n	800429a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <TIM_Base_SetConfig+0xe4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01b      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d017      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a22      	ldr	r2, [pc, #136]	; (8004338 <TIM_Base_SetConfig+0xe8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a21      	ldr	r2, [pc, #132]	; (800433c <TIM_Base_SetConfig+0xec>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a20      	ldr	r2, [pc, #128]	; (8004340 <TIM_Base_SetConfig+0xf0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <TIM_Base_SetConfig+0xf4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <TIM_Base_SetConfig+0xf8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0x8a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <TIM_Base_SetConfig+0xfc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <TIM_Base_SetConfig+0xe4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d103      	bne.n	8004320 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	615a      	str	r2, [r3, #20]
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40014000 	.word	0x40014000
 8004348:	40014400 	.word	0x40014400
 800434c:	40014800 	.word	0x40014800

08004350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800437a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f023 030a 	bic.w	r3, r3, #10
 800438c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0210 	bic.w	r2, r3, #16
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	f043 0307 	orr.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	021a      	lsls	r2, r3, #8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	431a      	orrs	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4313      	orrs	r3, r2
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	609a      	str	r2, [r3, #8]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004498:	2302      	movs	r3, #2
 800449a:	e050      	b.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d018      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d013      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a13      	ldr	r2, [pc, #76]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10c      	bne.n	800452c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4313      	orrs	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40010000 	.word	0x40010000
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40000c00 	.word	0x40000c00
 800455c:	40014000 	.word	0x40014000

08004560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e03f      	b.n	800461a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fbd6 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f929 	bl	8004824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b08a      	sub	sp, #40	; 0x28
 8004626:	af02      	add	r7, sp, #8
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b20      	cmp	r3, #32
 8004640:	d17c      	bne.n	800473c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_UART_Transmit+0x2c>
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e075      	b.n	800473e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_UART_Transmit+0x3e>
 800465c:	2302      	movs	r3, #2
 800465e:	e06e      	b.n	800473e <HAL_UART_Transmit+0x11c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2221      	movs	r2, #33	; 0x21
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fc fc6b 	bl	8000f50 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d108      	bne.n	80046a4 <HAL_UART_Transmit+0x82>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e003      	b.n	80046ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046b4:	e02a      	b.n	800470c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2180      	movs	r1, #128	; 0x80
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f840 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e036      	b.n	800473e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	3302      	adds	r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	e007      	b.n	80046fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3301      	adds	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1cf      	bne.n	80046b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	2140      	movs	r1, #64	; 0x40
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f810 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e006      	b.n	800473e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b090      	sub	sp, #64	; 0x40
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004756:	e050      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d04c      	beq.n	80047fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x30>
 8004766:	f7fc fbf3 	bl	8000f50 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004772:	429a      	cmp	r2, r3
 8004774:	d241      	bcs.n	80047fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004796:	637a      	str	r2, [r7, #52]	; 0x34
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800479c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e5      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3314      	adds	r3, #20
 80047b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ca:	623a      	str	r2, [r7, #32]
 80047cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	69f9      	ldr	r1, [r7, #28]
 80047d0:	6a3a      	ldr	r2, [r7, #32]
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e5      	bne.n	80047aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e00f      	b.n	800481a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4013      	ands	r3, r2
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	bf0c      	ite	eq
 800480a:	2301      	moveq	r3, #1
 800480c:	2300      	movne	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	429a      	cmp	r2, r3
 8004816:	d09f      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3740      	adds	r7, #64	; 0x40
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004828:	b09f      	sub	sp, #124	; 0x7c
 800482a:	af00      	add	r7, sp, #0
 800482c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800482e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483a:	68d9      	ldr	r1, [r3, #12]
 800483c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	ea40 0301 	orr.w	r3, r0, r1
 8004844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	431a      	orrs	r2, r3
 8004850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	431a      	orrs	r2, r3
 8004856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	4313      	orrs	r3, r2
 800485c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004868:	f021 010c 	bic.w	r1, r1, #12
 800486c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004872:	430b      	orrs	r3, r1
 8004874:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004882:	6999      	ldr	r1, [r3, #24]
 8004884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	ea40 0301 	orr.w	r3, r0, r1
 800488c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800488e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4bc5      	ldr	r3, [pc, #788]	; (8004ba8 <UART_SetConfig+0x384>)
 8004894:	429a      	cmp	r2, r3
 8004896:	d004      	beq.n	80048a2 <UART_SetConfig+0x7e>
 8004898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4bc3      	ldr	r3, [pc, #780]	; (8004bac <UART_SetConfig+0x388>)
 800489e:	429a      	cmp	r2, r3
 80048a0:	d103      	bne.n	80048aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048a2:	f7fe fea9 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 80048a6:	6778      	str	r0, [r7, #116]	; 0x74
 80048a8:	e002      	b.n	80048b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048aa:	f7fe fe91 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80048ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	f040 80b6 	bne.w	8004a28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048be:	461c      	mov	r4, r3
 80048c0:	f04f 0500 	mov.w	r5, #0
 80048c4:	4622      	mov	r2, r4
 80048c6:	462b      	mov	r3, r5
 80048c8:	1891      	adds	r1, r2, r2
 80048ca:	6439      	str	r1, [r7, #64]	; 0x40
 80048cc:	415b      	adcs	r3, r3
 80048ce:	647b      	str	r3, [r7, #68]	; 0x44
 80048d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048d4:	1912      	adds	r2, r2, r4
 80048d6:	eb45 0303 	adc.w	r3, r5, r3
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	00d9      	lsls	r1, r3, #3
 80048e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048e8:	00d0      	lsls	r0, r2, #3
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	1911      	adds	r1, r2, r4
 80048f0:	6639      	str	r1, [r7, #96]	; 0x60
 80048f2:	416b      	adcs	r3, r5
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
 80048f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	1891      	adds	r1, r2, r2
 8004902:	63b9      	str	r1, [r7, #56]	; 0x38
 8004904:	415b      	adcs	r3, r3
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800490c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004910:	f7fb fcb6 	bl	8000280 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4ba5      	ldr	r3, [pc, #660]	; (8004bb0 <UART_SetConfig+0x38c>)
 800491a:	fba3 2302 	umull	r2, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	011e      	lsls	r6, r3, #4
 8004922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004924:	461c      	mov	r4, r3
 8004926:	f04f 0500 	mov.w	r5, #0
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	1891      	adds	r1, r2, r2
 8004930:	6339      	str	r1, [r7, #48]	; 0x30
 8004932:	415b      	adcs	r3, r3
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
 8004936:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800493a:	1912      	adds	r2, r2, r4
 800493c:	eb45 0303 	adc.w	r3, r5, r3
 8004940:	f04f 0000 	mov.w	r0, #0
 8004944:	f04f 0100 	mov.w	r1, #0
 8004948:	00d9      	lsls	r1, r3, #3
 800494a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800494e:	00d0      	lsls	r0, r2, #3
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	1911      	adds	r1, r2, r4
 8004956:	65b9      	str	r1, [r7, #88]	; 0x58
 8004958:	416b      	adcs	r3, r5
 800495a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800495c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	461a      	mov	r2, r3
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	1891      	adds	r1, r2, r2
 8004968:	62b9      	str	r1, [r7, #40]	; 0x28
 800496a:	415b      	adcs	r3, r3
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004972:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004976:	f7fb fc83 	bl	8000280 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4b8c      	ldr	r3, [pc, #560]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004980:	fba3 1302 	umull	r1, r3, r3, r2
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	2164      	movs	r1, #100	; 0x64
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	3332      	adds	r3, #50	; 0x32
 8004992:	4a87      	ldr	r2, [pc, #540]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049a0:	441e      	add	r6, r3
 80049a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049a4:	4618      	mov	r0, r3
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	1894      	adds	r4, r2, r2
 80049b0:	623c      	str	r4, [r7, #32]
 80049b2:	415b      	adcs	r3, r3
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ba:	1812      	adds	r2, r2, r0
 80049bc:	eb41 0303 	adc.w	r3, r1, r3
 80049c0:	f04f 0400 	mov.w	r4, #0
 80049c4:	f04f 0500 	mov.w	r5, #0
 80049c8:	00dd      	lsls	r5, r3, #3
 80049ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049ce:	00d4      	lsls	r4, r2, #3
 80049d0:	4622      	mov	r2, r4
 80049d2:	462b      	mov	r3, r5
 80049d4:	1814      	adds	r4, r2, r0
 80049d6:	653c      	str	r4, [r7, #80]	; 0x50
 80049d8:	414b      	adcs	r3, r1
 80049da:	657b      	str	r3, [r7, #84]	; 0x54
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	61b9      	str	r1, [r7, #24]
 80049ea:	415b      	adcs	r3, r3
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049f6:	f7fb fc43 	bl	8000280 <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4b6c      	ldr	r3, [pc, #432]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004a00:	fba3 1302 	umull	r1, r3, r3, r2
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2164      	movs	r1, #100	; 0x64
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a67      	ldr	r2, [pc, #412]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	f003 0207 	and.w	r2, r3, #7
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4432      	add	r2, r6
 8004a24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a26:	e0b9      	b.n	8004b9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2a:	461c      	mov	r4, r3
 8004a2c:	f04f 0500 	mov.w	r5, #0
 8004a30:	4622      	mov	r2, r4
 8004a32:	462b      	mov	r3, r5
 8004a34:	1891      	adds	r1, r2, r2
 8004a36:	6139      	str	r1, [r7, #16]
 8004a38:	415b      	adcs	r3, r3
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a40:	1912      	adds	r2, r2, r4
 8004a42:	eb45 0303 	adc.w	r3, r5, r3
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	00d9      	lsls	r1, r3, #3
 8004a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a54:	00d0      	lsls	r0, r2, #3
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	eb12 0804 	adds.w	r8, r2, r4
 8004a5e:	eb43 0905 	adc.w	r9, r3, r5
 8004a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f04f 0100 	mov.w	r1, #0
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	008b      	lsls	r3, r1, #2
 8004a76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a7a:	0082      	lsls	r2, r0, #2
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4649      	mov	r1, r9
 8004a80:	f7fb fbfe 	bl	8000280 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4b49      	ldr	r3, [pc, #292]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	011e      	lsls	r6, r3, #4
 8004a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a94:	4618      	mov	r0, r3
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	1894      	adds	r4, r2, r2
 8004aa0:	60bc      	str	r4, [r7, #8]
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aaa:	1812      	adds	r2, r2, r0
 8004aac:	eb41 0303 	adc.w	r3, r1, r3
 8004ab0:	f04f 0400 	mov.w	r4, #0
 8004ab4:	f04f 0500 	mov.w	r5, #0
 8004ab8:	00dd      	lsls	r5, r3, #3
 8004aba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004abe:	00d4      	lsls	r4, r2, #3
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	1814      	adds	r4, r2, r0
 8004ac6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	008b      	lsls	r3, r1, #2
 8004ae0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ae4:	0082      	lsls	r2, r0, #2
 8004ae6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004aea:	f7fb fbc9 	bl	8000280 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4b2f      	ldr	r3, [pc, #188]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004af4:	fba3 1302 	umull	r1, r3, r3, r2
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	2164      	movs	r1, #100	; 0x64
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	3332      	adds	r3, #50	; 0x32
 8004b06:	4a2a      	ldr	r2, [pc, #168]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b12:	441e      	add	r6, r3
 8004b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b16:	4618      	mov	r0, r3
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	1894      	adds	r4, r2, r2
 8004b22:	603c      	str	r4, [r7, #0]
 8004b24:	415b      	adcs	r3, r3
 8004b26:	607b      	str	r3, [r7, #4]
 8004b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b2c:	1812      	adds	r2, r2, r0
 8004b2e:	eb41 0303 	adc.w	r3, r1, r3
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	f04f 0500 	mov.w	r5, #0
 8004b3a:	00dd      	lsls	r5, r3, #3
 8004b3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b40:	00d4      	lsls	r4, r2, #3
 8004b42:	4622      	mov	r2, r4
 8004b44:	462b      	mov	r3, r5
 8004b46:	eb12 0a00 	adds.w	sl, r2, r0
 8004b4a:	eb43 0b01 	adc.w	fp, r3, r1
 8004b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	008b      	lsls	r3, r1, #2
 8004b62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b66:	0082      	lsls	r2, r0, #2
 8004b68:	4650      	mov	r0, sl
 8004b6a:	4659      	mov	r1, fp
 8004b6c:	f7fb fb88 	bl	8000280 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004b76:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	2164      	movs	r1, #100	; 0x64
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	3332      	adds	r3, #50	; 0x32
 8004b88:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <UART_SetConfig+0x38c>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	f003 020f 	and.w	r2, r3, #15
 8004b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4432      	add	r2, r6
 8004b9a:	609a      	str	r2, [r3, #8]
}
 8004b9c:	bf00      	nop
 8004b9e:	377c      	adds	r7, #124	; 0x7c
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40011000 	.word	0x40011000
 8004bac:	40011400 	.word	0x40011400
 8004bb0:	51eb851f 	.word	0x51eb851f

08004bb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	f107 001c 	add.w	r0, r7, #28
 8004bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d122      	bne.n	8004c12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9c0 	bl	8004f8c <USB_CoreReset>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e01a      	b.n	8004c48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f9b4 	bl	8004f8c <USB_CoreReset>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
 8004c3a:	e005      	b.n	8004c48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10b      	bne.n	8004c66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f043 0206 	orr.w	r2, r3, #6
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c72:	b004      	add	sp, #16
 8004c74:	4770      	bx	lr

08004c76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 0201 	bic.w	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d115      	bne.n	8004d08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f7fc f93d 	bl	8000f68 <HAL_Delay>
      ms++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f93a 	bl	8004f6e <USB_GetMode>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d01e      	beq.n	8004d3e <USB_SetCurrentMode+0x84>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b31      	cmp	r3, #49	; 0x31
 8004d04:	d9f0      	bls.n	8004ce8 <USB_SetCurrentMode+0x2e>
 8004d06:	e01a      	b.n	8004d3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d115      	bne.n	8004d3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	f7fc f924 	bl	8000f68 <HAL_Delay>
      ms++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f921 	bl	8004f6e <USB_GetMode>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <USB_SetCurrentMode+0x84>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b31      	cmp	r3, #49	; 0x31
 8004d36:	d9f0      	bls.n	8004d1a <USB_SetCurrentMode+0x60>
 8004d38:	e001      	b.n	8004d3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e005      	b.n	8004d4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b32      	cmp	r3, #50	; 0x32
 8004d42:	d101      	bne.n	8004d48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <USB_FlushTxFifo+0x64>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e01b      	b.n	8004dac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	daf2      	bge.n	8004d62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	019b      	lsls	r3, r3, #6
 8004d84:	f043 0220 	orr.w	r2, r3, #32
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <USB_FlushTxFifo+0x64>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e006      	b.n	8004dac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d0f0      	beq.n	8004d8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	00030d40 	.word	0x00030d40

08004dbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a11      	ldr	r2, [pc, #68]	; (8004e18 <USB_FlushRxFifo+0x5c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e018      	b.n	8004e0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	daf2      	bge.n	8004dc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2210      	movs	r2, #16
 8004dea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3301      	adds	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a08      	ldr	r2, [pc, #32]	; (8004e18 <USB_FlushRxFifo+0x5c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e006      	b.n	8004e0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d0f0      	beq.n	8004dec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	00030d40 	.word	0x00030d40

08004e1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	71fb      	strb	r3, [r7, #7]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d123      	bne.n	8004e8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e42:	88bb      	ldrh	r3, [r7, #4]
 8004e44:	3303      	adds	r3, #3
 8004e46:	089b      	lsrs	r3, r3, #2
 8004e48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	e018      	b.n	8004e82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	031a      	lsls	r2, r3, #12
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	3301      	adds	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	3301      	adds	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d3e2      	bcc.n	8004e50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3724      	adds	r7, #36	; 0x24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b08b      	sub	sp, #44	; 0x2c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	089b      	lsrs	r3, r3, #2
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	e014      	b.n	8004eee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	3301      	adds	r3, #1
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	3301      	adds	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	3301      	adds	r3, #1
 8004eec:	623b      	str	r3, [r7, #32]
 8004eee:	6a3a      	ldr	r2, [r7, #32]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d3e6      	bcc.n	8004ec4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ef6:	8bfb      	ldrh	r3, [r7, #30]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01e      	beq.n	8004f3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f06:	461a      	mov	r2, r3
 8004f08:	f107 0310 	add.w	r3, r7, #16
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	701a      	strb	r2, [r3, #0]
      i++;
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	3301      	adds	r3, #1
 8004f26:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f2e:	8bfb      	ldrh	r3, [r7, #30]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f34:	8bfb      	ldrh	r3, [r7, #30]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1ea      	bne.n	8004f10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	372c      	adds	r7, #44	; 0x2c
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f60:	68fb      	ldr	r3, [r7, #12]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <USB_CoreReset+0x64>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e01b      	b.n	8004fe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	daf2      	bge.n	8004f98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <USB_CoreReset+0x64>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e006      	b.n	8004fe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d0f0      	beq.n	8004fc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	00030d40 	.word	0x00030d40

08004ff4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005014:	461a      	mov	r2, r3
 8005016:	2300      	movs	r3, #0
 8005018:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10a      	bne.n	8005066 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800505e:	f043 0304 	orr.w	r3, r3, #4
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e014      	b.n	8005090 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005074:	f023 0304 	bic.w	r3, r3, #4
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e009      	b.n	8005090 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800508a:	f023 0304 	bic.w	r3, r3, #4
 800508e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005090:	2110      	movs	r1, #16
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fe5e 	bl	8004d54 <USB_FlushTxFifo>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fe8a 	bl	8004dbc <USB_FlushRxFifo>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e015      	b.n	80050e4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d8:	461a      	mov	r2, r3
 80050da:	2300      	movs	r3, #0
 80050dc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	3301      	adds	r3, #1
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d3e5      	bcc.n	80050b8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00b      	beq.n	800511e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800510c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a13      	ldr	r2, [pc, #76]	; (8005160 <USB_HostInit+0x16c>)
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a13      	ldr	r2, [pc, #76]	; (8005164 <USB_HostInit+0x170>)
 8005118:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800511c:	e009      	b.n	8005132 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a10      	ldr	r2, [pc, #64]	; (8005168 <USB_HostInit+0x174>)
 8005128:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a0f      	ldr	r2, [pc, #60]	; (800516c <USB_HostInit+0x178>)
 800512e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f043 0210 	orr.w	r2, r3, #16
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <USB_HostInit+0x17c>)
 800514a:	4313      	orrs	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr
 8005160:	01000200 	.word	0x01000200
 8005164:	00e00300 	.word	0x00e00300
 8005168:	00600080 	.word	0x00600080
 800516c:	004000e0 	.word	0x004000e0
 8005170:	a3200008 	.word	0xa3200008

08005174 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051bc:	461a      	mov	r2, r3
 80051be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80051c2:	6053      	str	r3, [r2, #4]
 80051c4:	e009      	b.n	80051da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d106      	bne.n	80051da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d2:	461a      	mov	r2, r3
 80051d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80051d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005208:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005216:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005218:	2064      	movs	r0, #100	; 0x64
 800521a:	f7fb fea5 	bl	8000f68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800522a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800522c:	200a      	movs	r0, #10
 800522e:	f7fb fe9b 	bl	8000f68 <HAL_Delay>

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005260:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d109      	bne.n	8005280 <USB_DriveVbus+0x44>
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d106      	bne.n	8005280 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800527a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800527e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528a:	d109      	bne.n	80052a0 <USB_DriveVbus+0x64>
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800529a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800529e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	0c5b      	lsrs	r3, r3, #17
 80052cc:	f003 0303 	and.w	r3, r3, #3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	b29b      	uxth	r3, r3
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	461a      	mov	r2, r3
 800530e:	4603      	mov	r3, r0
 8005310:	70fb      	strb	r3, [r7, #3]
 8005312:	460b      	mov	r3, r1
 8005314:	70bb      	strb	r3, [r7, #2]
 8005316:	4613      	mov	r3, r2
 8005318:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	461a      	mov	r2, r3
 8005330:	f04f 33ff 	mov.w	r3, #4294967295
 8005334:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005336:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800533a:	2b03      	cmp	r3, #3
 800533c:	d87e      	bhi.n	800543c <USB_HC_Init+0x13c>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <USB_HC_Init+0x44>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005355 	.word	0x08005355
 8005348:	080053ff 	.word	0x080053ff
 800534c:	08005355 	.word	0x08005355
 8005350:	080053c1 	.word	0x080053c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4413      	add	r3, r2
 800535c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005360:	461a      	mov	r2, r3
 8005362:	f240 439d 	movw	r3, #1181	; 0x49d
 8005366:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005368:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800536c:	2b00      	cmp	r3, #0
 800536e:	da10      	bge.n	8005392 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	440a      	add	r2, r1
 8005386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800538e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005390:	e057      	b.n	8005442 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d051      	beq.n	8005442 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053bc:	60d3      	str	r3, [r2, #12]
      break;
 80053be:	e040      	b.n	8005442 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	461a      	mov	r2, r3
 80053ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80053d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da34      	bge.n	8005446 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	78fa      	ldrb	r2, [r7, #3]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80053fc:	e023      	b.n	8005446 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053fe:	78fb      	ldrb	r3, [r7, #3]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540a:	461a      	mov	r2, r3
 800540c:	f240 2325 	movw	r3, #549	; 0x225
 8005410:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005412:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005416:	2b00      	cmp	r3, #0
 8005418:	da17      	bge.n	800544a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	440a      	add	r2, r1
 8005430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005434:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005438:	60d3      	str	r3, [r2, #12]
      }
      break;
 800543a:	e006      	b.n	800544a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	77fb      	strb	r3, [r7, #31]
      break;
 8005440:	e004      	b.n	800544c <USB_HC_Init+0x14c>
      break;
 8005442:	bf00      	nop
 8005444:	e002      	b.n	800544c <USB_HC_Init+0x14c>
      break;
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <USB_HC_Init+0x14c>
      break;
 800544a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	440a      	add	r2, r1
 8005462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005466:	f043 0302 	orr.w	r3, r3, #2
 800546a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	2101      	movs	r1, #1
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	6939      	ldr	r1, [r7, #16]
 8005482:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005486:	4313      	orrs	r3, r2
 8005488:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005496:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800549a:	2b00      	cmp	r3, #0
 800549c:	da03      	bge.n	80054a6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800549e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	e001      	b.n	80054aa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff feff 	bl	80052ae <USB_GetHostSpeed>
 80054b0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80054b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d106      	bne.n	80054c8 <USB_HC_Init+0x1c8>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d003      	beq.n	80054c8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e001      	b.n	80054cc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054cc:	787b      	ldrb	r3, [r7, #1]
 80054ce:	059b      	lsls	r3, r3, #22
 80054d0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054d4:	78bb      	ldrb	r3, [r7, #2]
 80054d6:	02db      	lsls	r3, r3, #11
 80054d8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054dc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80054e2:	049b      	lsls	r3, r3, #18
 80054e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80054ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	0159      	lsls	r1, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	440b      	add	r3, r1
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005508:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800550a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800550e:	2b03      	cmp	r3, #3
 8005510:	d003      	beq.n	800551a <USB_HC_Init+0x21a>
 8005512:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d10f      	bne.n	800553a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	440a      	add	r2, r1
 8005530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005534:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005538:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800553a:	7ffb      	ldrb	r3, [r7, #31]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08c      	sub	sp, #48	; 0x30
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800555c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005560:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d02d      	beq.n	80055ca <USB_HC_StartXfer+0x86>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	791b      	ldrb	r3, [r3, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d129      	bne.n	80055ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d117      	bne.n	80055ac <USB_HC_StartXfer+0x68>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	79db      	ldrb	r3, [r3, #7]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <USB_HC_StartXfer+0x48>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	79db      	ldrb	r3, [r3, #7]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d10f      	bne.n	80055ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <USB_HC_StartXfer+0x86>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	795b      	ldrb	r3, [r3, #5]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d107      	bne.n	80055ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	785b      	ldrb	r3, [r3, #1]
 80055be:	4619      	mov	r1, r3
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fa0f 	bl	80059e4 <USB_DoPing>
      return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e0f8      	b.n	80057bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d018      	beq.n	8005604 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	8912      	ldrh	r2, [r2, #8]
 80055da:	4413      	add	r3, r2
 80055dc:	3b01      	subs	r3, #1
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	8912      	ldrh	r2, [r2, #8]
 80055e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80055e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80055ea:	8b7b      	ldrh	r3, [r7, #26]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d90b      	bls.n	8005608 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80055f0:	8b7b      	ldrh	r3, [r7, #26]
 80055f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	8912      	ldrh	r2, [r2, #8]
 80055fa:	fb02 f203 	mul.w	r2, r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	611a      	str	r2, [r3, #16]
 8005602:	e001      	b.n	8005608 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005604:	2301      	movs	r3, #1
 8005606:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	78db      	ldrb	r3, [r3, #3]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005610:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	8912      	ldrh	r2, [r2, #8]
 8005616:	fb02 f203 	mul.w	r2, r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	611a      	str	r2, [r3, #16]
 800561e:	e003      	b.n	8005628 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005630:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005632:	04d9      	lsls	r1, r3, #19
 8005634:	4b63      	ldr	r3, [pc, #396]	; (80057c4 <USB_HC_StartXfer+0x280>)
 8005636:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005638:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	7a9b      	ldrb	r3, [r3, #10]
 800563e:	075b      	lsls	r3, r3, #29
 8005640:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005644:	69f9      	ldr	r1, [r7, #28]
 8005646:	0148      	lsls	r0, r1, #5
 8005648:	6a39      	ldr	r1, [r7, #32]
 800564a:	4401      	add	r1, r0
 800564c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005650:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005652:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	68d9      	ldr	r1, [r3, #12]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	460a      	mov	r2, r1
 800566c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf0c      	ite	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	2300      	movne	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	440a      	add	r2, r1
 800569c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	7e7b      	ldrb	r3, [r7, #25]
 80056b6:	075b      	lsls	r3, r3, #29
 80056b8:	69f9      	ldr	r1, [r7, #28]
 80056ba:	0148      	lsls	r0, r1, #5
 80056bc:	6a39      	ldr	r1, [r7, #32]
 80056be:	4401      	add	r1, r0
 80056c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e003      	b.n	80056fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005700:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	461a      	mov	r2, r3
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e04e      	b.n	80057bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	78db      	ldrb	r3, [r3, #3]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d149      	bne.n	80057ba <USB_HC_StartXfer+0x276>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d045      	beq.n	80057ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	79db      	ldrb	r3, [r3, #7]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d830      	bhi.n	8005798 <USB_HC_StartXfer+0x254>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <USB_HC_StartXfer+0x1f8>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	0800574d 	.word	0x0800574d
 8005740:	08005771 	.word	0x08005771
 8005744:	0800574d 	.word	0x0800574d
 8005748:	08005771 	.word	0x08005771
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	3303      	adds	r3, #3
 8005752:	089b      	lsrs	r3, r3, #2
 8005754:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005756:	8afa      	ldrh	r2, [r7, #22]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	b29b      	uxth	r3, r3
 800575e:	429a      	cmp	r2, r3
 8005760:	d91c      	bls.n	800579c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	619a      	str	r2, [r3, #24]
        }
        break;
 800576e:	e015      	b.n	800579c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	3303      	adds	r3, #3
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800577a:	8afa      	ldrh	r2, [r7, #22]
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	b29b      	uxth	r3, r3
 8005786:	429a      	cmp	r2, r3
 8005788:	d90a      	bls.n	80057a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	619a      	str	r2, [r3, #24]
        }
        break;
 8005796:	e003      	b.n	80057a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005798:	bf00      	nop
 800579a:	e002      	b.n	80057a2 <USB_HC_StartXfer+0x25e>
        break;
 800579c:	bf00      	nop
 800579e:	e000      	b.n	80057a2 <USB_HC_StartXfer+0x25e>
        break;
 80057a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	68d9      	ldr	r1, [r3, #12]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	785a      	ldrb	r2, [r3, #1]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2000      	movs	r0, #0
 80057b2:	9000      	str	r0, [sp, #0]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7ff fb31 	bl	8004e1c <USB_WritePacket>
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3728      	adds	r7, #40	; 0x28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	1ff80000 	.word	0x1ff80000

080057c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	b29b      	uxth	r3, r3
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b089      	sub	sp, #36	; 0x24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	0c9b      	lsrs	r3, r3, #18
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	0fdb      	lsrs	r3, r3, #31
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b20      	cmp	r3, #32
 8005838:	d104      	bne.n	8005844 <USB_HC_Halt+0x5a>
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e0c8      	b.n	80059d6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <USB_HC_Halt+0x66>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d163      	bne.n	8005918 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	440a      	add	r2, r1
 8005866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800586a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800586e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 80ab 	bne.w	80059d4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d133      	bne.n	80058f2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058d6:	d81d      	bhi.n	8005914 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ee:	d0ec      	beq.n	80058ca <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058f0:	e070      	b.n	80059d4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800590c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005910:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005912:	e05f      	b.n	80059d4 <USB_HC_Halt+0x1ea>
            break;
 8005914:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005916:	e05d      	b.n	80059d4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	440a      	add	r2, r1
 800592e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005936:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d133      	bne.n	80059b0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	4413      	add	r3, r2
 8005950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	440a      	add	r2, r1
 800595e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005962:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005966:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	4413      	add	r3, r2
 8005970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	440a      	add	r2, r1
 800597e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005986:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005994:	d81d      	bhi.n	80059d2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ac:	d0ec      	beq.n	8005988 <USB_HC_Halt+0x19e>
 80059ae:	e011      	b.n	80059d4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	e000      	b.n	80059d4 <USB_HC_Halt+0x1ea>
          break;
 80059d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80059f8:	2301      	movs	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	04da      	lsls	r2, r3, #19
 8005a00:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <USB_DoPing+0x74>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a14:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a2c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a34:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	461a      	mov	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	1ff80000 	.word	0x1ff80000

08005a5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff f911 	bl	8004c98 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a76:	2110      	movs	r1, #16
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff f96b 	bl	8004d54 <USB_FlushTxFifo>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff f997 	bl	8004dbc <USB_FlushRxFifo>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e01f      	b.n	8005ade <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ab4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005abc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ac4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	3301      	adds	r3, #1
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b0f      	cmp	r3, #15
 8005ae2:	d9dc      	bls.n	8005a9e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	e034      	b.n	8005b54 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	461a      	mov	r2, r3
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b30:	d80c      	bhi.n	8005b4c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b48:	d0ec      	beq.n	8005b24 <USB_StopHost+0xc8>
 8005b4a:	e000      	b.n	8005b4e <USB_StopHost+0xf2>
        break;
 8005b4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	d9c7      	bls.n	8005aea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b60:	461a      	mov	r2, r3
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff f880 	bl	8004c76 <USB_EnableGlobalInt>

  return ret;
 8005b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005b80:	b590      	push	{r4, r7, lr}
 8005b82:	b08b      	sub	sp, #44	; 0x2c
 8005b84:	af04      	add	r7, sp, #16
 8005b86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b92:	7919      	ldrb	r1, [r3, #4]
 8005b94:	23ff      	movs	r3, #255	; 0xff
 8005b96:	2201      	movs	r2, #1
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 ff15 	bl	80069c8 <USBH_FindInterface>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	2bff      	cmp	r3, #255	; 0xff
 8005ba6:	d002      	beq.n	8005bae <USBH_HID_InterfaceInit+0x2e>
 8005ba8:	7dbb      	ldrb	r3, [r7, #22]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d901      	bls.n	8005bb2 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e108      	b.n	8005dc4 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8005bb2:	7dbb      	ldrb	r3, [r7, #22]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 feea 	bl	8006990 <USBH_SelectInterface>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8005bc0:	7d7b      	ldrb	r3, [r7, #21]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e0fc      	b.n	8005dc4 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005bd0:	2034      	movs	r0, #52	; 0x34
 8005bd2:	f002 fd77 	bl	80086c4 <malloc>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8005bea:	2302      	movs	r3, #2
 8005bec:	e0ea      	b.n	8005dc4 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8005bee:	2234      	movs	r2, #52	; 0x34
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	6938      	ldr	r0, [r7, #16]
 8005bf4:	f002 fd76 	bl	80086e4 <memset>

  HID_Handle->state = HID_ERROR;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2207      	movs	r2, #7
 8005bfc:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005bfe:	7dbb      	ldrb	r3, [r7, #22]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	211a      	movs	r1, #26
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d103      	bne.n	8005c1c <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4a6d      	ldr	r2, [pc, #436]	; (8005dcc <USBH_HID_InterfaceInit+0x24c>)
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
 8005c1a:	e010      	b.n	8005c3e <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8005c1c:	7dbb      	ldrb	r3, [r7, #22]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	211a      	movs	r1, #26
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d103      	bne.n	8005c3a <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4a66      	ldr	r2, [pc, #408]	; (8005dd0 <USBH_HID_InterfaceInit+0x250>)
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
 8005c38:	e001      	b.n	8005c3e <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e0c2      	b.n	8005dc4 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2200      	movs	r2, #0
 8005c42:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2200      	movs	r2, #0
 8005c48:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c4a:	7dbb      	ldrb	r3, [r7, #22]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	211a      	movs	r1, #26
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c5a:	781a      	ldrb	r2, [r3, #0]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c60:	7dbb      	ldrb	r3, [r7, #22]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	211a      	movs	r1, #26
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c70:	881a      	ldrh	r2, [r3, #0]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8005c76:	7dbb      	ldrb	r3, [r7, #22]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	211a      	movs	r1, #26
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	4413      	add	r3, r2
 8005c82:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	8b9b      	ldrh	r3, [r3, #28]
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	d802      	bhi.n	8005c9c <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	220a      	movs	r2, #10
 8005c9a:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8005c9c:	7dbb      	ldrb	r3, [r7, #22]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	211a      	movs	r1, #26
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	bf28      	it	cs
 8005cb2:	2302      	movcs	r3, #2
 8005cb4:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
 8005cba:	e07d      	b.n	8005db8 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8005cbc:	7dbb      	ldrb	r3, [r7, #22]
 8005cbe:	7df9      	ldrb	r1, [r7, #23]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	3101      	adds	r1, #1
 8005cc4:	00c9      	lsls	r1, r1, #3
 8005cc6:	201a      	movs	r0, #26
 8005cc8:	fb00 f303 	mul.w	r3, r0, r3
 8005ccc:	440b      	add	r3, r1
 8005cce:	4413      	add	r3, r2
 8005cd0:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	b25b      	sxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da35      	bge.n	8005d48 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005cdc:	7dbb      	ldrb	r3, [r7, #22]
 8005cde:	7df9      	ldrb	r1, [r7, #23]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	3101      	adds	r1, #1
 8005ce4:	00c9      	lsls	r1, r1, #3
 8005ce6:	201a      	movs	r0, #26
 8005ce8:	fb00 f303 	mul.w	r3, r0, r3
 8005cec:	440b      	add	r3, r1
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005cf4:	781a      	ldrb	r2, [r3, #0]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	791b      	ldrb	r3, [r3, #4]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f002 f958 	bl	8007fb6 <USBH_AllocPipe>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	7859      	ldrb	r1, [r3, #1]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	7918      	ldrb	r0, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	8b12      	ldrh	r2, [r2, #24]
 8005d26:	9202      	str	r2, [sp, #8]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	9201      	str	r2, [sp, #4]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	4623      	mov	r3, r4
 8005d30:	4602      	mov	r2, r0
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f002 f910 	bl	8007f58 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f002 fc11 	bl	8008568 <USBH_LL_SetToggle>
 8005d46:	e034      	b.n	8005db2 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005d48:	7dbb      	ldrb	r3, [r7, #22]
 8005d4a:	7df9      	ldrb	r1, [r7, #23]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	3101      	adds	r1, #1
 8005d50:	00c9      	lsls	r1, r1, #3
 8005d52:	201a      	movs	r0, #26
 8005d54:	fb00 f303 	mul.w	r3, r0, r3
 8005d58:	440b      	add	r3, r1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	78db      	ldrb	r3, [r3, #3]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f002 f922 	bl	8007fb6 <USBH_AllocPipe>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	7819      	ldrb	r1, [r3, #0]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	78d8      	ldrb	r0, [r3, #3]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	8b12      	ldrh	r2, [r2, #24]
 8005d92:	9202      	str	r2, [sp, #8]
 8005d94:	2203      	movs	r2, #3
 8005d96:	9201      	str	r2, [sp, #4]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f002 f8da 	bl	8007f58 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f002 fbdb 	bl	8008568 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	3301      	adds	r3, #1
 8005db6:	75fb      	strb	r3, [r7, #23]
 8005db8:	7dfa      	ldrb	r2, [r7, #23]
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	f4ff af7d 	bcc.w	8005cbc <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd90      	pop	{r4, r7, pc}
 8005dcc:	080064d1 	.word	0x080064d1
 8005dd0:	08006579 	.word	0x08006579

08005dd4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f002 f8ce 	bl	8007f96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f002 f8f9 	bl	8007ff8 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00e      	beq.n	8005e32 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f002 f8bb 	bl	8007f96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f002 f8e6 	bl	8007ff8 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f002 fc44 	bl	80086d4 <free>
    phost->pActiveClass->pData = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e52:	2200      	movs	r2, #0
 8005e54:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	795b      	ldrb	r3, [r3, #5]
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d860      	bhi.n	8005f44 <USBH_HID_ClassRequest+0xe4>
 8005e82:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <USBH_HID_ClassRequest+0x28>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ea1 	.word	0x08005ea1
 8005e8c:	08005f45 	.word	0x08005f45
 8005e90:	08005ebb 	.word	0x08005ebb
 8005e94:	08005ea1 	.word	0x08005ea1
 8005e98:	08005ee5 	.word	0x08005ee5
 8005e9c:	08005f0f 	.word	0x08005f0f
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	331c      	adds	r3, #28
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f000 f9cd 	bl	800624c <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	715a      	strb	r2, [r3, #5]

      break;
 8005eb8:	e04b      	b.n	8005f52 <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f930 	bl	8006126 <USBH_HID_GetHIDReportDescriptor>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8005eca:	7bbb      	ldrb	r3, [r7, #14]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8005ed6:	e037      	b.n	8005f48 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005ed8:	7bbb      	ldrb	r3, [r7, #14]
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d134      	bne.n	8005f48 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee2:	e031      	b.n	8005f48 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f935 	bl	8006158 <USBH_HID_SetIdle>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d103      	bne.n	8005f00 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2205      	movs	r2, #5
 8005efc:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8005efe:	e025      	b.n	8005f4c <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d122      	bne.n	8005f4c <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2205      	movs	r2, #5
 8005f0a:	715a      	strb	r2, [r3, #5]
      break;
 8005f0c:	e01e      	b.n	8005f4c <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8005f0e:	2100      	movs	r1, #0
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f975 	bl	8006200 <USBH_HID_SetProtocol>
 8005f16:	4603      	mov	r3, r0
 8005f18:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8005f1a:	7bbb      	ldrb	r3, [r7, #14]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10b      	bne.n	8005f38 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2201      	movs	r2, #1
 8005f24:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
        status = USBH_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8005f36:	e00b      	b.n	8005f50 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d108      	bne.n	8005f50 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	73fb      	strb	r3, [r7, #15]
      break;
 8005f42:	e005      	b.n	8005f50 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8005f44:	bf00      	nop
 8005f46:	e004      	b.n	8005f52 <USBH_HID_ClassRequest+0xf2>
      break;
 8005f48:	bf00      	nop
 8005f4a:	e002      	b.n	8005f52 <USBH_HID_ClassRequest+0xf2>
      break;
 8005f4c:	bf00      	nop
 8005f4e:	e000      	b.n	8005f52 <USBH_HID_ClassRequest+0xf2>
      break;
 8005f50:	bf00      	nop
  }

  return status;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	789b      	ldrb	r3, [r3, #2]
 8005f76:	2b06      	cmp	r3, #6
 8005f78:	f200 80a9 	bhi.w	80060ce <USBH_HID_Process+0x172>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <USBH_HID_Process+0x28>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fa1 	.word	0x08005fa1
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	080060cf 	.word	0x080060cf
 8005f90:	080060cf 	.word	0x080060cf
 8005f94:	08006021 	.word	0x08006021
 8005f98:	0800600b 	.word	0x0800600b
 8005f9c:	0800604f 	.word	0x0800604f
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2201      	movs	r2, #1
 8005fac:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005fae:	e093      	b.n	80060d8 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	8b1b      	ldrh	r3, [r3, #24]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8f0 	bl	80061a8 <USBH_HID_GetReport>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2205      	movs	r2, #5
 8005fd6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005fd8:	e07e      	b.n	80060d8 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d105      	bne.n	8005fec <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fea:	e075      	b.n	80060d8 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d105      	bne.n	8005ffe <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2205      	movs	r2, #5
 8005ff6:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8005ffc:	e06c      	b.n	80060d8 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2207      	movs	r2, #7
 8006002:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006004:	2302      	movs	r3, #2
 8006006:	75fb      	strb	r3, [r7, #23]
      break;
 8006008:	e066      	b.n	80060d8 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d05c      	beq.n	80060d2 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2204      	movs	r2, #4
 800601c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800601e:	e058      	b.n	80060d2 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006028:	b2da      	uxtb	r2, r3
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 ff73 	bl	8007f1a <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2206      	movs	r2, #6
 8006038:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800604c:	e044      	b.n	80060d8 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f002 fa5d 	bl	8008514 <USBH_LL_GetURBState>
 800605a:	4603      	mov	r3, r0
 800605c:	2b01      	cmp	r3, #1
 800605e:	d120      	bne.n	80060a2 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f002 f9c2 	bl	80083f0 <USBH_LL_GetLastXferSize>
 800606c:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006074:	2b00      	cmp	r3, #0
 8006076:	d12e      	bne.n	80060d6 <USBH_HID_Process+0x17a>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d02b      	beq.n	80060d6 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f103 0008 	add.w	r0, r3, #8
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6959      	ldr	r1, [r3, #20]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	8b1b      	ldrh	r3, [r3, #24]
 800608c:	461a      	mov	r2, r3
 800608e:	f000 f9ca 	bl	8006426 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fa fba2 	bl	80007e4 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 80060a0:	e019      	b.n	80060d6 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f002 fa33 	bl	8008514 <USBH_LL_GetURBState>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b05      	cmp	r3, #5
 80060b2:	d110      	bne.n	80060d6 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	7e9b      	ldrb	r3, [r3, #26]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fa51 	bl	8007562 <USBH_ClrFeature>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d107      	bne.n	80060d6 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2204      	movs	r2, #4
 80060ca:	709a      	strb	r2, [r3, #2]
      break;
 80060cc:	e003      	b.n	80060d6 <USBH_HID_Process+0x17a>

    default:
      break;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <USBH_HID_Process+0x17c>
      break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <USBH_HID_Process+0x17c>
      break;
 80060d6:	bf00      	nop
  }

  return status;
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop

080060e4 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	789b      	ldrb	r3, [r3, #2]
 80060fa:	2b06      	cmp	r3, #6
 80060fc:	d10c      	bne.n	8006118 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	8b92      	ldrh	r2, [r2, #28]
 800610e:	4293      	cmp	r3, r2
 8006110:	d302      	bcc.n	8006118 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2204      	movs	r2, #4
 8006116:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b086      	sub	sp, #24
 800612a:	af02      	add	r7, sp, #8
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006138:	887b      	ldrh	r3, [r7, #2]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	4613      	mov	r3, r2
 800613e:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8006142:	2101      	movs	r1, #1
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f96c 	bl	8007422 <USBH_GetDescriptor>
 800614a:	4603      	mov	r3, r0
 800614c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
 8006164:	4613      	mov	r3, r2
 8006166:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2221      	movs	r2, #33	; 0x21
 800616c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	220a      	movs	r2, #10
 8006172:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	b29b      	uxth	r3, r3
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	b29a      	uxth	r2, r3
 800617c:	78bb      	ldrb	r3, [r7, #2]
 800617e:	b29b      	uxth	r3, r3
 8006180:	4313      	orrs	r3, r2
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006194:	2200      	movs	r2, #0
 8006196:	2100      	movs	r1, #0
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 fcaf 	bl	8007afc <USBH_CtlReq>
 800619e:	4603      	mov	r3, r0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	460b      	mov	r3, r1
 80061b4:	72fb      	strb	r3, [r7, #11]
 80061b6:	4613      	mov	r3, r2
 80061b8:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	22a1      	movs	r2, #161	; 0xa1
 80061be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80061c6:	7afb      	ldrb	r3, [r7, #11]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	7abb      	ldrb	r3, [r7, #10]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	4313      	orrs	r3, r2
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80061e0:	7e3b      	ldrb	r3, [r7, #24]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80061e8:	7e3b      	ldrb	r3, [r7, #24]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f001 fc83 	bl	8007afc <USBH_CtlReq>
 80061f6:	4603      	mov	r3, r0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2221      	movs	r2, #33	; 0x21
 8006210:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	220b      	movs	r2, #11
 8006216:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	825a      	strh	r2, [r3, #18]
 8006224:	e002      	b.n	800622c <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006238:	2200      	movs	r2, #0
 800623a:	2100      	movs	r1, #0
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fc5d 	bl	8007afc <USBH_CtlReq>
 8006242:	4603      	mov	r3, r0

}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	3302      	adds	r3, #2
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	b29a      	uxth	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	3303      	adds	r3, #3
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	b29b      	uxth	r3, r3
 800626e:	4313      	orrs	r3, r2
 8006270:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8006272:	897b      	ldrh	r3, [r7, #10]
 8006274:	2b09      	cmp	r3, #9
 8006276:	d943      	bls.n	8006300 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8006278:	2309      	movs	r3, #9
 800627a:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800627c:	e03c      	b.n	80062f8 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	4619      	mov	r1, r3
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f001 fc1e 	bl	8007ac6 <USBH_GetNextDesc>
 800628a:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b21      	cmp	r3, #33	; 0x21
 8006292:	d131      	bne.n	80062f8 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	781a      	ldrb	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	785a      	ldrb	r2, [r3, #1]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3302      	adds	r3, #2
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3303      	adds	r3, #3
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	791a      	ldrb	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	795a      	ldrb	r2, [r3, #5]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	799a      	ldrb	r2, [r3, #6]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3307      	adds	r3, #7
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3308      	adds	r3, #8
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	811a      	strh	r2, [r3, #8]
        break;
 80062f4:	bf00      	nop
      }
    }
  }
}
 80062f6:	e003      	b.n	8006300 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 80062f8:	893b      	ldrh	r3, [r7, #8]
 80062fa:	897a      	ldrh	r2, [r7, #10]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d8be      	bhi.n	800627e <USBH_HID_ParseHIDDesc+0x32>
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8006310:	23ff      	movs	r3, #255	; 0xff
 8006312:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b0b      	cmp	r3, #11
 800631c:	d117      	bne.n	800634e <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8006324:	4619      	mov	r1, r3
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	231a      	movs	r3, #26
 800632a:	fb03 f301 	mul.w	r3, r3, r1
 800632e:	4413      	add	r3, r2
 8006330:	f203 3349 	addw	r3, r3, #841	; 0x349
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d102      	bne.n	8006344 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800633e:	2302      	movs	r3, #2
 8006340:	73fb      	strb	r3, [r7, #15]
 8006342:	e004      	b.n	800634e <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d101      	bne.n	800634e <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	88fa      	ldrh	r2, [r7, #6]
 8006380:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	601a      	str	r2, [r3, #0]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	7a9b      	ldrb	r3, [r3, #10]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d131      	bne.n	8006412 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80063b4:	2300      	movs	r3, #0
 80063b6:	82fb      	strh	r3, [r7, #22]
 80063b8:	e027      	b.n	800640a <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	88da      	ldrh	r2, [r3, #6]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	889b      	ldrh	r3, [r3, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d019      	beq.n	80063fa <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	88d2      	ldrh	r2, [r2, #6]
 80063ce:	441a      	add	r2, r3
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	6139      	str	r1, [r7, #16]
 80063d6:	7812      	ldrb	r2, [r2, #0]
 80063d8:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88db      	ldrh	r3, [r3, #6]
 80063de:	3301      	adds	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	88da      	ldrh	r2, [r3, #6]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	891b      	ldrh	r3, [r3, #8]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d108      	bne.n	8006404 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	80da      	strh	r2, [r3, #6]
 80063f8:	e004      	b.n	8006404 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	729a      	strb	r2, [r3, #10]
        return i;
 8006400:	8afb      	ldrh	r3, [r7, #22]
 8006402:	e00a      	b.n	800641a <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8006404:	8afb      	ldrh	r3, [r7, #22]
 8006406:	3301      	adds	r3, #1
 8006408:	82fb      	strh	r3, [r7, #22]
 800640a:	8afa      	ldrh	r2, [r7, #22]
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	429a      	cmp	r2, r3
 8006410:	d3d3      	bcc.n	80063ba <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006418:	88fb      	ldrh	r3, [r7, #6]
}
 800641a:	4618      	mov	r0, r3
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	4613      	mov	r3, r2
 8006432:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	7a9b      	ldrb	r3, [r3, #10]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d13c      	bne.n	80064ba <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8006446:	2300      	movs	r3, #0
 8006448:	82fb      	strh	r3, [r7, #22]
 800644a:	e032      	b.n	80064b2 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	889b      	ldrh	r3, [r3, #4]
 8006450:	3301      	adds	r3, #1
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	88d2      	ldrh	r2, [r2, #6]
 8006456:	4293      	cmp	r3, r2
 8006458:	d00a      	beq.n	8006470 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	889b      	ldrh	r3, [r3, #4]
 800645e:	3301      	adds	r3, #1
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8006464:	4293      	cmp	r3, r2
 8006466:	d108      	bne.n	800647a <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	88db      	ldrh	r3, [r3, #6]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	729a      	strb	r2, [r3, #10]
        return i;
 8006476:	8afb      	ldrh	r3, [r7, #22]
 8006478:	e023      	b.n	80064c2 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	613a      	str	r2, [r7, #16]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	68f9      	ldr	r1, [r7, #12]
 8006486:	8889      	ldrh	r1, [r1, #4]
 8006488:	440a      	add	r2, r1
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	7013      	strb	r3, [r2, #0]
        f->head++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	889b      	ldrh	r3, [r3, #4]
 8006492:	3301      	adds	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	889a      	ldrh	r2, [r3, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	891b      	ldrh	r3, [r3, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d102      	bne.n	80064ac <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80064ac:	8afb      	ldrh	r3, [r7, #22]
 80064ae:	3301      	adds	r3, #1
 80064b0:	82fb      	strh	r3, [r7, #22]
 80064b2:	8afa      	ldrh	r2, [r7, #22]
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d3c8      	bcc.n	800644c <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80064c0:	88fb      	ldrh	r3, [r7, #6]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 80064e2:	4b22      	ldr	r3, [pc, #136]	; (800656c <USBH_HID_KeybdInit+0x9c>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80064e8:	4b20      	ldr	r3, [pc, #128]	; (800656c <USBH_HID_KeybdInit+0x9c>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80064ee:	4b1f      	ldr	r3, [pc, #124]	; (800656c <USBH_HID_KeybdInit+0x9c>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 80064f4:	4b1d      	ldr	r3, [pc, #116]	; (800656c <USBH_HID_KeybdInit+0x9c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 80064fa:	4b1c      	ldr	r3, [pc, #112]	; (800656c <USBH_HID_KeybdInit+0x9c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8006500:	4b1a      	ldr	r3, [pc, #104]	; (800656c <USBH_HID_KeybdInit+0x9c>)
 8006502:	2200      	movs	r2, #0
 8006504:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8006506:	4b19      	ldr	r3, [pc, #100]	; (800656c <USBH_HID_KeybdInit+0x9c>)
 8006508:	2200      	movs	r2, #0
 800650a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800650c:	4b17      	ldr	r3, [pc, #92]	; (800656c <USBH_HID_KeybdInit+0x9c>)
 800650e:	2200      	movs	r2, #0
 8006510:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	e00c      	b.n	8006532 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8006518:	4a15      	ldr	r2, [pc, #84]	; (8006570 <USBH_HID_KeybdInit+0xa0>)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2100      	movs	r1, #0
 800651e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8006522:	4a14      	ldr	r2, [pc, #80]	; (8006574 <USBH_HID_KeybdInit+0xa4>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2100      	movs	r1, #0
 8006528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d9ef      	bls.n	8006518 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	8b1b      	ldrh	r3, [r3, #24]
 800653c:	2b08      	cmp	r3, #8
 800653e:	d902      	bls.n	8006546 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2208      	movs	r2, #8
 8006544:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <USBH_HID_KeybdInit+0xa4>)
 800654a:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f103 0008 	add.w	r0, r3, #8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006558:	2250      	movs	r2, #80	; 0x50
 800655a:	4619      	mov	r1, r3
 800655c:	f7ff fefe 	bl	800635c <USBH_HID_FifoInit>

  return USBH_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000260 	.word	0x20000260
 8006570:	20000250 	.word	0x20000250
 8006574:	20000258 	.word	0x20000258

08006578 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800658a:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <USBH_HID_MouseInit+0x88>)
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8006590:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <USBH_HID_MouseInit+0x88>)
 8006592:	2200      	movs	r2, #0
 8006594:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8006596:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <USBH_HID_MouseInit+0x88>)
 8006598:	2200      	movs	r2, #0
 800659a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800659c:	4b18      	ldr	r3, [pc, #96]	; (8006600 <USBH_HID_MouseInit+0x88>)
 800659e:	2200      	movs	r2, #0
 80065a0:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80065a2:	4b17      	ldr	r3, [pc, #92]	; (8006600 <USBH_HID_MouseInit+0x88>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e00c      	b.n	80065c8 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80065ae:	4a15      	ldr	r2, [pc, #84]	; (8006604 <USBH_HID_MouseInit+0x8c>)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2100      	movs	r1, #0
 80065b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80065b8:	4a13      	ldr	r2, [pc, #76]	; (8006608 <USBH_HID_MouseInit+0x90>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2100      	movs	r1, #0
 80065be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d9ef      	bls.n	80065ae <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	8b1b      	ldrh	r3, [r3, #24]
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d902      	bls.n	80065dc <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2208      	movs	r2, #8
 80065da:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <USBH_HID_MouseInit+0x90>)
 80065e0:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f103 0008 	add.w	r0, r3, #8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065ee:	2250      	movs	r2, #80	; 0x50
 80065f0:	4619      	mov	r1, r3
 80065f2:	f7ff feb3 	bl	800635c <USBH_HID_FifoInit>

  return USBH_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000270 	.word	0x20000270
 8006604:	20000278 	.word	0x20000278
 8006608:	20000280 	.word	0x20000280

0800660c <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f80d 	bl	8006634 <USBH_HID_MouseDecode>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8006620:	4b03      	ldr	r3, [pc, #12]	; (8006630 <USBH_HID_GetMouseInfo+0x24>)
 8006622:	e000      	b.n	8006626 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8006624:	2300      	movs	r3, #0
  }
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000270 	.word	0x20000270

08006634 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8b1b      	ldrh	r3, [r3, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 800664e:	2302      	movs	r3, #2
 8006650:	e039      	b.n	80066c6 <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f103 0008 	add.w	r0, r3, #8
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8b1b      	ldrh	r3, [r3, #24]
 800665c:	461a      	mov	r2, r3
 800665e:	491c      	ldr	r1, [pc, #112]	; (80066d0 <USBH_HID_MouseDecode+0x9c>)
 8006660:	f7ff fe98 	bl	8006394 <USBH_HID_FifoRead>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8b1b      	ldrh	r3, [r3, #24]
 800666c:	429a      	cmp	r2, r3
 800666e:	d129      	bne.n	80066c4 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 8006670:	2100      	movs	r1, #0
 8006672:	4818      	ldr	r0, [pc, #96]	; (80066d4 <USBH_HID_MouseDecode+0xa0>)
 8006674:	f000 f83a 	bl	80066ec <HID_ReadItem>
 8006678:	4603      	mov	r3, r0
 800667a:	b2da      	uxtb	r2, r3
 800667c:	4b16      	ldr	r3, [pc, #88]	; (80066d8 <USBH_HID_MouseDecode+0xa4>)
 800667e:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 8006680:	2100      	movs	r1, #0
 8006682:	4816      	ldr	r0, [pc, #88]	; (80066dc <USBH_HID_MouseDecode+0xa8>)
 8006684:	f000 f832 	bl	80066ec <HID_ReadItem>
 8006688:	4603      	mov	r3, r0
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <USBH_HID_MouseDecode+0xa4>)
 800668e:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 8006690:	2100      	movs	r1, #0
 8006692:	4813      	ldr	r0, [pc, #76]	; (80066e0 <USBH_HID_MouseDecode+0xac>)
 8006694:	f000 f82a 	bl	80066ec <HID_ReadItem>
 8006698:	4603      	mov	r3, r0
 800669a:	b2da      	uxtb	r2, r3
 800669c:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <USBH_HID_MouseDecode+0xa4>)
 800669e:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 80066a0:	2100      	movs	r1, #0
 80066a2:	4810      	ldr	r0, [pc, #64]	; (80066e4 <USBH_HID_MouseDecode+0xb0>)
 80066a4:	f000 f822 	bl	80066ec <HID_ReadItem>
 80066a8:	4603      	mov	r3, r0
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <USBH_HID_MouseDecode+0xa4>)
 80066ae:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 80066b0:	2100      	movs	r1, #0
 80066b2:	480d      	ldr	r0, [pc, #52]	; (80066e8 <USBH_HID_MouseDecode+0xb4>)
 80066b4:	f000 f81a 	bl	80066ec <HID_ReadItem>
 80066b8:	4603      	mov	r3, r0
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <USBH_HID_MouseDecode+0xa4>)
 80066be:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 80066c4:	2302      	movs	r3, #2
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000278 	.word	0x20000278
 80066d4:	0800902c 	.word	0x0800902c
 80066d8:	20000270 	.word	0x20000270
 80066dc:	0800904c 	.word	0x0800904c
 80066e0:	08008fcc 	.word	0x08008fcc
 80066e4:	08008fec 	.word	0x08008fec
 80066e8:	0800900c 	.word	0x0800900c

080066ec <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b089      	sub	sp, #36	; 0x24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	7a1b      	ldrb	r3, [r3, #8]
 800670a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7a5b      	ldrb	r3, [r3, #9]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01a      	beq.n	800674a <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7a5b      	ldrb	r3, [r3, #9]
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	429a      	cmp	r2, r3
 800671c:	d301      	bcc.n	8006722 <HID_ReadItem+0x36>
    {
      return (0U);
 800671e:	2300      	movs	r3, #0
 8006720:	e078      	b.n	8006814 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6852      	ldr	r2, [r2, #4]
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800672e:	7cfb      	ldrb	r3, [r7, #19]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	08db      	lsrs	r3, r3, #3
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800674a:	2300      	movs	r3, #0
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	e00a      	b.n	8006766 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	3301      	adds	r3, #1
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <HID_ReadItem+0x90>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	08db      	lsrs	r3, r3, #3
 8006778:	3301      	adds	r3, #1
 800677a:	e002      	b.n	8006782 <HID_ReadItem+0x96>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	08db      	lsrs	r3, r3, #3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4293      	cmp	r3, r2
 8006786:	d8e3      	bhi.n	8006750 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8006788:	7cfb      	ldrb	r3, [r7, #19]
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	40da      	lsrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f04f 31ff 	mov.w	r1, #4294967295
 8006796:	fa01 f303 	lsl.w	r3, r1, r3
 800679a:	43db      	mvns	r3, r3
 800679c:	4013      	ands	r3, r2
 800679e:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d304      	bcc.n	80067b4 <HID_ReadItem+0xc8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d901      	bls.n	80067b8 <HID_ReadItem+0xcc>
  {
    return (0U);
 80067b4:	2300      	movs	r3, #0
 80067b6:	e02d      	b.n	8006814 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	7a9b      	ldrb	r3, [r3, #10]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01e      	beq.n	80067fe <HID_ReadItem+0x112>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d014      	beq.n	80067fe <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	425b      	negs	r3, r3
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	e010      	b.n	8006814 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	fb02 f303 	mul.w	r3, r2, r3
 80067fc:	e00a      	b.n	8006814 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HID_ReadItem+0x11e>
    {
      return (val);
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	e004      	b.n	8006814 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8006814:	4618      	mov	r0, r3
 8006816:	3724      	adds	r7, #36	; 0x24
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006834:	2302      	movs	r3, #2
 8006836:	e029      	b.n	800688c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	79fa      	ldrb	r2, [r7, #7]
 800683c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f81f 	bl	8006894 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f001 fcff 	bl	8008288 <USBH_LL_Init>

  return USBH_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	e009      	b.n	80068ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	33e0      	adds	r3, #224	; 0xe0
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	2200      	movs	r2, #0
 80068b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b0f      	cmp	r3, #15
 80068be:	d9f2      	bls.n	80068a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e009      	b.n	80068da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e0:	d3f1      	bcc.n	80068c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2240      	movs	r2, #64	; 0x40
 8006906:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d016      	beq.n	800697e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10e      	bne.n	8006978 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006960:	1c59      	adds	r1, r3, #1
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	33de      	adds	r3, #222	; 0xde
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
 8006976:	e004      	b.n	8006982 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006978:	2302      	movs	r3, #2
 800697a:	73fb      	strb	r3, [r7, #15]
 800697c:	e001      	b.n	8006982 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800697e:	2302      	movs	r3, #2
 8006980:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d204      	bcs.n	80069b6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	78fa      	ldrb	r2, [r7, #3]
 80069b0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80069b4:	e001      	b.n	80069ba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80069b6:	2302      	movs	r3, #2
 80069b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	70fb      	strb	r3, [r7, #3]
 80069da:	460b      	mov	r3, r1
 80069dc:	70bb      	strb	r3, [r7, #2]
 80069de:	4613      	mov	r3, r2
 80069e0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80069f0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069f2:	e025      	b.n	8006a40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	221a      	movs	r2, #26
 80069f8:	fb02 f303 	mul.w	r3, r2, r3
 80069fc:	3308      	adds	r3, #8
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	3302      	adds	r3, #2
 8006a04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	795b      	ldrb	r3, [r3, #5]
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d002      	beq.n	8006a16 <USBH_FindInterface+0x4e>
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	2bff      	cmp	r3, #255	; 0xff
 8006a14:	d111      	bne.n	8006a3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a1a:	78ba      	ldrb	r2, [r7, #2]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d002      	beq.n	8006a26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a20:	78bb      	ldrb	r3, [r7, #2]
 8006a22:	2bff      	cmp	r3, #255	; 0xff
 8006a24:	d109      	bne.n	8006a3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a2a:	787a      	ldrb	r2, [r7, #1]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d002      	beq.n	8006a36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a30:	787b      	ldrb	r3, [r7, #1]
 8006a32:	2bff      	cmp	r3, #255	; 0xff
 8006a34:	d101      	bne.n	8006a3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
 8006a38:	e006      	b.n	8006a48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d9d6      	bls.n	80069f4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a46:	23ff      	movs	r3, #255	; 0xff
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fc4f 	bl	8008300 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006a62:	2101      	movs	r1, #1
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fd68 	bl	800853a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af04      	add	r7, sp, #16
 8006a7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d102      	bne.n	8006a96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2203      	movs	r2, #3
 8006a94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b0b      	cmp	r3, #11
 8006a9e:	f200 81be 	bhi.w	8006e1e <USBH_Process+0x3aa>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <USBH_Process+0x34>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006ad9 	.word	0x08006ad9
 8006aac:	08006b0b 	.word	0x08006b0b
 8006ab0:	08006b73 	.word	0x08006b73
 8006ab4:	08006db9 	.word	0x08006db9
 8006ab8:	08006e1f 	.word	0x08006e1f
 8006abc:	08006c17 	.word	0x08006c17
 8006ac0:	08006d5f 	.word	0x08006d5f
 8006ac4:	08006c4d 	.word	0x08006c4d
 8006ac8:	08006c6d 	.word	0x08006c6d
 8006acc:	08006c8d 	.word	0x08006c8d
 8006ad0:	08006cd1 	.word	0x08006cd1
 8006ad4:	08006da1 	.word	0x08006da1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 819e 	beq.w	8006e22 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006aec:	20c8      	movs	r0, #200	; 0xc8
 8006aee:	f001 fd6b 	bl	80085c8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fc61 	bl	80083ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b08:	e18b      	b.n	8006e22 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d107      	bne.n	8006b24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b22:	e18d      	b.n	8006e40 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b2e:	d914      	bls.n	8006b5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b36:	3301      	adds	r3, #1
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d903      	bls.n	8006b52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	220d      	movs	r2, #13
 8006b4e:	701a      	strb	r2, [r3, #0]
      break;
 8006b50:	e176      	b.n	8006e40 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	701a      	strb	r2, [r3, #0]
      break;
 8006b58:	e172      	b.n	8006e40 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b60:	f103 020a 	add.w	r2, r3, #10
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006b6a:	200a      	movs	r0, #10
 8006b6c:	f001 fd2c 	bl	80085c8 <USBH_Delay>
      break;
 8006b70:	e166      	b.n	8006e40 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b82:	2104      	movs	r1, #4
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006b88:	2064      	movs	r0, #100	; 0x64
 8006b8a:	f001 fd1d 	bl	80085c8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fbec 	bl	800836c <USBH_LL_GetSpeed>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2205      	movs	r2, #5
 8006ba2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fa05 	bl	8007fb6 <USBH_AllocPipe>
 8006bac:	4603      	mov	r3, r0
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006bb4:	2180      	movs	r1, #128	; 0x80
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 f9fd 	bl	8007fb6 <USBH_AllocPipe>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7919      	ldrb	r1, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006bd8:	b292      	uxth	r2, r2
 8006bda:	9202      	str	r2, [sp, #8]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	9201      	str	r2, [sp, #4]
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	4603      	mov	r3, r0
 8006be4:	2280      	movs	r2, #128	; 0x80
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f9b6 	bl	8007f58 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7959      	ldrb	r1, [r3, #5]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c00:	b292      	uxth	r2, r2
 8006c02:	9202      	str	r2, [sp, #8]
 8006c04:	2200      	movs	r2, #0
 8006c06:	9201      	str	r2, [sp, #4]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 f9a2 	bl	8007f58 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c14:	e114      	b.n	8006e40 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f918 	bl	8006e4c <USBH_HandleEnum>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 80fe 	bne.w	8006e26 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d103      	bne.n	8006c44 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2208      	movs	r2, #8
 8006c40:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c42:	e0f0      	b.n	8006e26 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2207      	movs	r2, #7
 8006c48:	701a      	strb	r2, [r3, #0]
      break;
 8006c4a:	e0ec      	b.n	8006e26 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80e9 	beq.w	8006e2a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c5e:	2101      	movs	r1, #1
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2208      	movs	r2, #8
 8006c68:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006c6a:	e0de      	b.n	8006e2a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fc2c 	bl	80074d4 <USBH_SetCfg>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f040 80d5 	bne.w	8006e2e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2209      	movs	r2, #9
 8006c88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c8a:	e0d0      	b.n	8006e2e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fc3c 	bl	800751a <USBH_SetFeature>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cb4:	e0bd      	b.n	8006e32 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	f040 80b9 	bne.w	8006e32 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	220a      	movs	r2, #10
 8006cc4:	701a      	strb	r2, [r3, #0]
      break;
 8006cc6:	e0b4      	b.n	8006e32 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	220a      	movs	r2, #10
 8006ccc:	701a      	strb	r2, [r3, #0]
      break;
 8006cce:	e0b0      	b.n	8006e32 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 80ad 	beq.w	8006e36 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
 8006ce8:	e016      	b.n	8006d18 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006cea:	7bfa      	ldrb	r2, [r7, #15]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	32de      	adds	r2, #222	; 0xde
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	791a      	ldrb	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d108      	bne.n	8006d12 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006d00:	7bfa      	ldrb	r2, [r7, #15]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32de      	adds	r2, #222	; 0xde
 8006d06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006d10:	e005      	b.n	8006d1e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	3301      	adds	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0e5      	beq.n	8006cea <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d016      	beq.n	8006d56 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2206      	movs	r2, #6
 8006d3e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d46:	2103      	movs	r1, #3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d4c:	e073      	b.n	8006e36 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	220d      	movs	r2, #13
 8006d52:	701a      	strb	r2, [r3, #0]
      break;
 8006d54:	e06f      	b.n	8006e36 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	220d      	movs	r2, #13
 8006d5a:	701a      	strb	r2, [r3, #0]
      break;
 8006d5c:	e06b      	b.n	8006e36 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d017      	beq.n	8006d98 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
 8006d74:	4603      	mov	r3, r0
 8006d76:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d103      	bne.n	8006d88 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	220b      	movs	r2, #11
 8006d84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d86:	e058      	b.n	8006e3a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d154      	bne.n	8006e3a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	220d      	movs	r2, #13
 8006d94:	701a      	strb	r2, [r3, #0]
      break;
 8006d96:	e050      	b.n	8006e3a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	220d      	movs	r2, #13
 8006d9c:	701a      	strb	r2, [r3, #0]
      break;
 8006d9e:	e04c      	b.n	8006e3a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d049      	beq.n	8006e3e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
      }
      break;
 8006db6:	e042      	b.n	8006e3e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fd67 	bl	8006894 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006df4:	2105      	movs	r1, #5
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d107      	bne.n	8006e16 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fe20 	bl	8006a54 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e14:	e014      	b.n	8006e40 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fa72 	bl	8008300 <USBH_LL_Start>
      break;
 8006e1c:	e010      	b.n	8006e40 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006e1e:	bf00      	nop
 8006e20:	e00e      	b.n	8006e40 <USBH_Process+0x3cc>
      break;
 8006e22:	bf00      	nop
 8006e24:	e00c      	b.n	8006e40 <USBH_Process+0x3cc>
      break;
 8006e26:	bf00      	nop
 8006e28:	e00a      	b.n	8006e40 <USBH_Process+0x3cc>
    break;
 8006e2a:	bf00      	nop
 8006e2c:	e008      	b.n	8006e40 <USBH_Process+0x3cc>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e006      	b.n	8006e40 <USBH_Process+0x3cc>
      break;
 8006e32:	bf00      	nop
 8006e34:	e004      	b.n	8006e40 <USBH_Process+0x3cc>
      break;
 8006e36:	bf00      	nop
 8006e38:	e002      	b.n	8006e40 <USBH_Process+0x3cc>
      break;
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <USBH_Process+0x3cc>
      break;
 8006e3e:	bf00      	nop
  }
  return USBH_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop

08006e4c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af04      	add	r7, sp, #16
 8006e52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006e54:	2301      	movs	r3, #1
 8006e56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b07      	cmp	r3, #7
 8006e62:	f200 81c1 	bhi.w	80071e8 <USBH_HandleEnum+0x39c>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <USBH_HandleEnum+0x20>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e8d 	.word	0x08006e8d
 8006e70:	08006f4b 	.word	0x08006f4b
 8006e74:	08006fb5 	.word	0x08006fb5
 8006e78:	08007043 	.word	0x08007043
 8006e7c:	080070ad 	.word	0x080070ad
 8006e80:	0800711d 	.word	0x0800711d
 8006e84:	08007163 	.word	0x08007163
 8006e88:	080071a9 	.word	0x080071a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006e8c:	2108      	movs	r1, #8
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa50 	bl	8007334 <USBH_Get_DevDesc>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d130      	bne.n	8006f00 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7919      	ldrb	r1, [r3, #4]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ec2:	b292      	uxth	r2, r2
 8006ec4:	9202      	str	r2, [sp, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	9201      	str	r2, [sp, #4]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f841 	bl	8007f58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7959      	ldrb	r1, [r3, #5]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006eea:	b292      	uxth	r2, r2
 8006eec:	9202      	str	r2, [sp, #8]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	9201      	str	r2, [sp, #4]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f82d 	bl	8007f58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006efe:	e175      	b.n	80071ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	f040 8172 	bne.w	80071ec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d903      	bls.n	8006f2a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	220d      	movs	r2, #13
 8006f26:	701a      	strb	r2, [r3, #0]
      break;
 8006f28:	e160      	b.n	80071ec <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	795b      	ldrb	r3, [r3, #5]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 f861 	bl	8007ff8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 f85b 	bl	8007ff8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
      break;
 8006f48:	e150      	b.n	80071ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006f4a:	2112      	movs	r1, #18
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f9f1 	bl	8007334 <USBH_Get_DevDesc>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f62:	e145      	b.n	80071f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	f040 8142 	bne.w	80071f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f72:	3301      	adds	r3, #1
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d903      	bls.n	8006f8e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	220d      	movs	r2, #13
 8006f8a:	701a      	strb	r2, [r3, #0]
      break;
 8006f8c:	e130      	b.n	80071f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	795b      	ldrb	r3, [r3, #5]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f82f 	bl	8007ff8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	791b      	ldrb	r3, [r3, #4]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 f829 	bl	8007ff8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	701a      	strb	r2, [r3, #0]
      break;
 8006fb2:	e11d      	b.n	80071f0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa68 	bl	800748c <USBH_SetAddress>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d132      	bne.n	800702c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006fc6:	2002      	movs	r0, #2
 8006fc8:	f001 fafe 	bl	80085c8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	7919      	ldrb	r1, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006fee:	b292      	uxth	r2, r2
 8006ff0:	9202      	str	r2, [sp, #8]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	9201      	str	r2, [sp, #4]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2280      	movs	r2, #128	; 0x80
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 ffab 	bl	8007f58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7959      	ldrb	r1, [r3, #5]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007016:	b292      	uxth	r2, r2
 8007018:	9202      	str	r2, [sp, #8]
 800701a:	2200      	movs	r2, #0
 800701c:	9201      	str	r2, [sp, #4]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4603      	mov	r3, r0
 8007022:	2200      	movs	r2, #0
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 ff97 	bl	8007f58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800702a:	e0e3      	b.n	80071f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b03      	cmp	r3, #3
 8007030:	f040 80e0 	bne.w	80071f4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	220d      	movs	r2, #13
 8007038:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	705a      	strb	r2, [r3, #1]
      break;
 8007040:	e0d8      	b.n	80071f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007042:	2109      	movs	r1, #9
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f99d 	bl	8007384 <USBH_Get_CfgDesc>
 800704a:	4603      	mov	r3, r0
 800704c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2204      	movs	r2, #4
 8007058:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800705a:	e0cd      	b.n	80071f8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	2b03      	cmp	r3, #3
 8007060:	f040 80ca 	bne.w	80071f8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800706a:	3301      	adds	r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800707a:	2b03      	cmp	r3, #3
 800707c:	d903      	bls.n	8007086 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	220d      	movs	r2, #13
 8007082:	701a      	strb	r2, [r3, #0]
      break;
 8007084:	e0b8      	b.n	80071f8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	795b      	ldrb	r3, [r3, #5]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 ffb3 	bl	8007ff8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	791b      	ldrb	r3, [r3, #4]
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 ffad 	bl	8007ff8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
      break;
 80070aa:	e0a5      	b.n	80071f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f965 	bl	8007384 <USBH_Get_CfgDesc>
 80070ba:	4603      	mov	r3, r0
 80070bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d103      	bne.n	80070cc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2205      	movs	r2, #5
 80070c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070ca:	e097      	b.n	80071fc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	f040 8094 	bne.w	80071fc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070da:	3301      	adds	r3, #1
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d903      	bls.n	80070f6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	220d      	movs	r2, #13
 80070f2:	701a      	strb	r2, [r3, #0]
      break;
 80070f4:	e082      	b.n	80071fc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	795b      	ldrb	r3, [r3, #5]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 ff7b 	bl	8007ff8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	791b      	ldrb	r3, [r3, #4]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 ff75 	bl	8007ff8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
      break;
 800711a:	e06f      	b.n	80071fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007122:	2b00      	cmp	r3, #0
 8007124:	d019      	beq.n	800715a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007132:	23ff      	movs	r3, #255	; 0xff
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f949 	bl	80073cc <USBH_Get_StringDesc>
 800713a:	4603      	mov	r3, r0
 800713c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d103      	bne.n	800714c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2206      	movs	r2, #6
 8007148:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800714a:	e059      	b.n	8007200 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	2b03      	cmp	r3, #3
 8007150:	d156      	bne.n	8007200 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2206      	movs	r2, #6
 8007156:	705a      	strb	r2, [r3, #1]
      break;
 8007158:	e052      	b.n	8007200 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2206      	movs	r2, #6
 800715e:	705a      	strb	r2, [r3, #1]
      break;
 8007160:	e04e      	b.n	8007200 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007168:	2b00      	cmp	r3, #0
 800716a:	d019      	beq.n	80071a0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007178:	23ff      	movs	r3, #255	; 0xff
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f926 	bl	80073cc <USBH_Get_StringDesc>
 8007180:	4603      	mov	r3, r0
 8007182:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2207      	movs	r2, #7
 800718e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007190:	e038      	b.n	8007204 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d135      	bne.n	8007204 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2207      	movs	r2, #7
 800719c:	705a      	strb	r2, [r3, #1]
      break;
 800719e:	e031      	b.n	8007204 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2207      	movs	r2, #7
 80071a4:	705a      	strb	r2, [r3, #1]
      break;
 80071a6:	e02d      	b.n	8007204 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d017      	beq.n	80071e2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80071be:	23ff      	movs	r3, #255	; 0xff
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f903 	bl	80073cc <USBH_Get_StringDesc>
 80071c6:	4603      	mov	r3, r0
 80071c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80071d4:	e018      	b.n	8007208 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d115      	bne.n	8007208 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
      break;
 80071e0:	e012      	b.n	8007208 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
      break;
 80071e6:	e00f      	b.n	8007208 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80071e8:	bf00      	nop
 80071ea:	e00e      	b.n	800720a <USBH_HandleEnum+0x3be>
      break;
 80071ec:	bf00      	nop
 80071ee:	e00c      	b.n	800720a <USBH_HandleEnum+0x3be>
      break;
 80071f0:	bf00      	nop
 80071f2:	e00a      	b.n	800720a <USBH_HandleEnum+0x3be>
      break;
 80071f4:	bf00      	nop
 80071f6:	e008      	b.n	800720a <USBH_HandleEnum+0x3be>
      break;
 80071f8:	bf00      	nop
 80071fa:	e006      	b.n	800720a <USBH_HandleEnum+0x3be>
      break;
 80071fc:	bf00      	nop
 80071fe:	e004      	b.n	800720a <USBH_HandleEnum+0x3be>
      break;
 8007200:	bf00      	nop
 8007202:	e002      	b.n	800720a <USBH_HandleEnum+0x3be>
      break;
 8007204:	bf00      	nop
 8007206:	e000      	b.n	800720a <USBH_HandleEnum+0x3be>
      break;
 8007208:	bf00      	nop
  }
  return Status;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f804 	bl	8007256 <USBH_HandleSof>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b0b      	cmp	r3, #11
 8007266:	d10a      	bne.n	800727e <USBH_HandleSof+0x28>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
  }
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007296:	bf00      	nop
}
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80072b2:	bf00      	nop
}
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f812 	bl	8008336 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	791b      	ldrb	r3, [r3, #4]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fe6d 	bl	8007ff8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	795b      	ldrb	r3, [r3, #5]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fe67 	bl	8007ff8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	b29b      	uxth	r3, r3
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007352:	2100      	movs	r1, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f864 	bl	8007422 <USBH_GetDescriptor>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f203 3026 	addw	r0, r3, #806	; 0x326
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007370:	78fa      	ldrb	r2, [r7, #3]
 8007372:	b292      	uxth	r2, r2
 8007374:	4619      	mov	r1, r3
 8007376:	f000 f918 	bl	80075aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af02      	add	r7, sp, #8
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	331c      	adds	r3, #28
 8007394:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007396:	887b      	ldrh	r3, [r7, #2]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a0:	2100      	movs	r1, #0
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f83d 	bl	8007422 <USBH_GetDescriptor>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d107      	bne.n	80073c2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80073b2:	887b      	ldrh	r3, [r7, #2]
 80073b4:	461a      	mov	r2, r3
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f987 	bl	80076cc <USBH_ParseCfgDesc>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	461a      	mov	r2, r3
 80073d8:	460b      	mov	r3, r1
 80073da:	72fb      	strb	r3, [r7, #11]
 80073dc:	4613      	mov	r3, r2
 80073de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073e8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80073f0:	893b      	ldrh	r3, [r7, #8]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	460b      	mov	r3, r1
 80073f6:	2100      	movs	r1, #0
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f812 	bl	8007422 <USBH_GetDescriptor>
 80073fe:	4603      	mov	r3, r0
 8007400:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d107      	bne.n	8007418 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800740e:	893a      	ldrh	r2, [r7, #8]
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fb24 	bl	8007a60 <USBH_ParseStringDesc>
  }

  return status;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	72fb      	strb	r3, [r7, #11]
 8007430:	4613      	mov	r3, r2
 8007432:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	789b      	ldrb	r3, [r3, #2]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d11c      	bne.n	8007476 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007442:	b2da      	uxtb	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2206      	movs	r2, #6
 800744c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	893a      	ldrh	r2, [r7, #8]
 8007452:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007454:	893b      	ldrh	r3, [r7, #8]
 8007456:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800745a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745e:	d104      	bne.n	800746a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f240 4209 	movw	r2, #1033	; 0x409
 8007466:	829a      	strh	r2, [r3, #20]
 8007468:	e002      	b.n	8007470 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8b3a      	ldrh	r2, [r7, #24]
 8007474:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007476:	8b3b      	ldrh	r3, [r7, #24]
 8007478:	461a      	mov	r2, r3
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fb3d 	bl	8007afc <USBH_CtlReq>
 8007482:	4603      	mov	r3, r0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	789b      	ldrb	r3, [r3, #2]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d10f      	bne.n	80074c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2205      	movs	r2, #5
 80074aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074c0:	2200      	movs	r2, #0
 80074c2:	2100      	movs	r1, #0
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fb19 	bl	8007afc <USBH_CtlReq>
 80074ca:	4603      	mov	r3, r0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	789b      	ldrb	r3, [r3, #2]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d10e      	bne.n	8007506 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2209      	movs	r2, #9
 80074f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	887a      	ldrh	r2, [r7, #2]
 80074f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007506:	2200      	movs	r2, #0
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 faf6 	bl	8007afc <USBH_CtlReq>
 8007510:	4603      	mov	r3, r0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	789b      	ldrb	r3, [r3, #2]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d10f      	bne.n	800754e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2203      	movs	r2, #3
 8007538:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	b29a      	uxth	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800754e:	2200      	movs	r2, #0
 8007550:	2100      	movs	r1, #0
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fad2 	bl	8007afc <USBH_CtlReq>
 8007558:	4603      	mov	r3, r0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	789b      	ldrb	r3, [r3, #2]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d10f      	bne.n	8007596 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007596:	2200      	movs	r2, #0
 8007598:	2100      	movs	r1, #0
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 faae 	bl	8007afc <USBH_CtlReq>
 80075a0:	4603      	mov	r3, r0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	4613      	mov	r3, r2
 80075b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	781a      	ldrb	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	785a      	ldrb	r2, [r3, #1]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	3302      	adds	r3, #2
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3303      	adds	r3, #3
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4313      	orrs	r3, r2
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	791a      	ldrb	r2, [r3, #4]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	795a      	ldrb	r2, [r3, #5]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	799a      	ldrb	r2, [r3, #6]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	79da      	ldrb	r2, [r3, #7]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	79db      	ldrb	r3, [r3, #7]
 8007608:	2b20      	cmp	r3, #32
 800760a:	dc11      	bgt.n	8007630 <USBH_ParseDevDesc+0x86>
 800760c:	2b08      	cmp	r3, #8
 800760e:	db16      	blt.n	800763e <USBH_ParseDevDesc+0x94>
 8007610:	3b08      	subs	r3, #8
 8007612:	2201      	movs	r2, #1
 8007614:	fa02 f303 	lsl.w	r3, r2, r3
 8007618:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800761c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007620:	2b00      	cmp	r3, #0
 8007622:	bf14      	ite	ne
 8007624:	2301      	movne	r3, #1
 8007626:	2300      	moveq	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <USBH_ParseDevDesc+0x8a>
 800762e:	e006      	b.n	800763e <USBH_ParseDevDesc+0x94>
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d104      	bne.n	800763e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	79da      	ldrb	r2, [r3, #7]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	71da      	strb	r2, [r3, #7]
      break;
 800763c:	e003      	b.n	8007646 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2240      	movs	r2, #64	; 0x40
 8007642:	71da      	strb	r2, [r3, #7]
      break;
 8007644:	bf00      	nop
  }

  if (length > 8U)
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2b08      	cmp	r3, #8
 800764a:	d939      	bls.n	80076c0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	3308      	adds	r3, #8
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	b29a      	uxth	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	3309      	adds	r3, #9
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	b29b      	uxth	r3, r3
 8007660:	4313      	orrs	r3, r2
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	330a      	adds	r3, #10
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	b29a      	uxth	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	330b      	adds	r3, #11
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	b29b      	uxth	r3, r3
 800767c:	4313      	orrs	r3, r2
 800767e:	b29a      	uxth	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	330c      	adds	r3, #12
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	b29a      	uxth	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	330d      	adds	r3, #13
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	021b      	lsls	r3, r3, #8
 8007696:	b29b      	uxth	r3, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	7b9a      	ldrb	r2, [r3, #14]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	7bda      	ldrb	r2, [r3, #15]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	7c1a      	ldrb	r2, [r3, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	7c5a      	ldrb	r2, [r3, #17]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	745a      	strb	r2, [r3, #17]
  }
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08c      	sub	sp, #48	; 0x30
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076e0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	785a      	ldrb	r2, [r3, #1]
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	3302      	adds	r3, #2
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	b29a      	uxth	r2, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	3303      	adds	r3, #3
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	b29b      	uxth	r3, r3
 8007720:	4313      	orrs	r3, r2
 8007722:	b29b      	uxth	r3, r3
 8007724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007728:	bf28      	it	cs
 800772a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800772e:	b29a      	uxth	r2, r3
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	791a      	ldrb	r2, [r3, #4]
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	795a      	ldrb	r2, [r3, #5]
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	799a      	ldrb	r2, [r3, #6]
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	79da      	ldrb	r2, [r3, #7]
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	7a1a      	ldrb	r2, [r3, #8]
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b09      	cmp	r3, #9
 8007762:	d002      	beq.n	800776a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	2209      	movs	r2, #9
 8007768:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b09      	cmp	r3, #9
 800776e:	f240 809d 	bls.w	80078ac <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007772:	2309      	movs	r3, #9
 8007774:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800777a:	e081      	b.n	8007880 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800777c:	f107 0316 	add.w	r3, r7, #22
 8007780:	4619      	mov	r1, r3
 8007782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007784:	f000 f99f 	bl	8007ac6 <USBH_GetNextDesc>
 8007788:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	785b      	ldrb	r3, [r3, #1]
 800778e:	2b04      	cmp	r3, #4
 8007790:	d176      	bne.n	8007880 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b09      	cmp	r3, #9
 8007798:	d002      	beq.n	80077a0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	2209      	movs	r2, #9
 800779e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80077a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a4:	221a      	movs	r2, #26
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	3308      	adds	r3, #8
 80077ac:	6a3a      	ldr	r2, [r7, #32]
 80077ae:	4413      	add	r3, r2
 80077b0:	3302      	adds	r3, #2
 80077b2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80077b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077b6:	69f8      	ldr	r0, [r7, #28]
 80077b8:	f000 f87e 	bl	80078b8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077c6:	e043      	b.n	8007850 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80077c8:	f107 0316 	add.w	r3, r7, #22
 80077cc:	4619      	mov	r1, r3
 80077ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d0:	f000 f979 	bl	8007ac6 <USBH_GetNextDesc>
 80077d4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	2b05      	cmp	r3, #5
 80077dc:	d138      	bne.n	8007850 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	795b      	ldrb	r3, [r3, #5]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d10f      	bne.n	8007806 <USBH_ParseCfgDesc+0x13a>
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	799b      	ldrb	r3, [r3, #6]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d10b      	bne.n	8007806 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	79db      	ldrb	r3, [r3, #7]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10f      	bne.n	8007816 <USBH_ParseCfgDesc+0x14a>
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d00b      	beq.n	8007816 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	2209      	movs	r2, #9
 8007802:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007804:	e007      	b.n	8007816 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b07      	cmp	r3, #7
 800780c:	d004      	beq.n	8007818 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	2207      	movs	r2, #7
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e000      	b.n	8007818 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007816:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800781c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007820:	3201      	adds	r2, #1
 8007822:	00d2      	lsls	r2, r2, #3
 8007824:	211a      	movs	r1, #26
 8007826:	fb01 f303 	mul.w	r3, r1, r3
 800782a:	4413      	add	r3, r2
 800782c:	3308      	adds	r3, #8
 800782e:	6a3a      	ldr	r2, [r7, #32]
 8007830:	4413      	add	r3, r2
 8007832:	3304      	adds	r3, #4
 8007834:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007838:	69b9      	ldr	r1, [r7, #24]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f86b 	bl	8007916 <USBH_ParseEPDesc>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007846:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800784a:	3301      	adds	r3, #1
 800784c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	791b      	ldrb	r3, [r3, #4]
 8007854:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007858:	429a      	cmp	r2, r3
 800785a:	d204      	bcs.n	8007866 <USBH_ParseCfgDesc+0x19a>
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	885a      	ldrh	r2, [r3, #2]
 8007860:	8afb      	ldrh	r3, [r7, #22]
 8007862:	429a      	cmp	r2, r3
 8007864:	d8b0      	bhi.n	80077c8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	791b      	ldrb	r3, [r3, #4]
 800786a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800786e:	429a      	cmp	r2, r3
 8007870:	d201      	bcs.n	8007876 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007872:	2303      	movs	r3, #3
 8007874:	e01c      	b.n	80078b0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800787a:	3301      	adds	r3, #1
 800787c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007884:	2b01      	cmp	r3, #1
 8007886:	d805      	bhi.n	8007894 <USBH_ParseCfgDesc+0x1c8>
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	885a      	ldrh	r2, [r3, #2]
 800788c:	8afb      	ldrh	r3, [r7, #22]
 800788e:	429a      	cmp	r2, r3
 8007890:	f63f af74 	bhi.w	800777c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	791b      	ldrb	r3, [r3, #4]
 8007898:	2b02      	cmp	r3, #2
 800789a:	bf28      	it	cs
 800789c:	2302      	movcs	r3, #2
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d201      	bcs.n	80078ac <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e001      	b.n	80078b0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80078ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3730      	adds	r7, #48	; 0x30
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	785a      	ldrb	r2, [r3, #1]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	789a      	ldrb	r2, [r3, #2]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	78da      	ldrb	r2, [r3, #3]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	791a      	ldrb	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	795a      	ldrb	r2, [r3, #5]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	799a      	ldrb	r2, [r3, #6]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	79da      	ldrb	r2, [r3, #7]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	7a1a      	ldrb	r2, [r3, #8]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	721a      	strb	r2, [r3, #8]
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007916:	b480      	push	{r7}
 8007918:	b087      	sub	sp, #28
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	781a      	ldrb	r2, [r3, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	785a      	ldrb	r2, [r3, #1]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	789a      	ldrb	r2, [r3, #2]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	78da      	ldrb	r2, [r3, #3]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3304      	adds	r3, #4
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	b29a      	uxth	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3305      	adds	r3, #5
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	b29b      	uxth	r3, r3
 800795a:	4313      	orrs	r3, r2
 800795c:	b29a      	uxth	r2, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	799a      	ldrb	r2, [r3, #6]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	889b      	ldrh	r3, [r3, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007972:	2303      	movs	r3, #3
 8007974:	75fb      	strb	r3, [r7, #23]
 8007976:	e033      	b.n	80079e0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	889b      	ldrh	r3, [r3, #4]
 800797c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007980:	f023 0307 	bic.w	r3, r3, #7
 8007984:	b29a      	uxth	r2, r3
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	889b      	ldrh	r3, [r3, #4]
 800798e:	b21a      	sxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	b299      	uxth	r1, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3305      	adds	r3, #5
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	430b      	orrs	r3, r1
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d110      	bne.n	80079d2 <USBH_ParseEPDesc+0xbc>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3304      	adds	r3, #4
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	b299      	uxth	r1, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3305      	adds	r3, #5
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	430b      	orrs	r3, r1
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	b21b      	sxth	r3, r3
 80079ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ce:	b21b      	sxth	r3, r3
 80079d0:	e001      	b.n	80079d6 <USBH_ParseEPDesc+0xc0>
 80079d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d6:	4313      	orrs	r3, r2
 80079d8:	b21b      	sxth	r3, r3
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d116      	bne.n	8007a18 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	78db      	ldrb	r3, [r3, #3]
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d005      	beq.n	8007a02 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	78db      	ldrb	r3, [r3, #3]
 80079fa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d127      	bne.n	8007a52 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	799b      	ldrb	r3, [r3, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <USBH_ParseEPDesc+0xfc>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	799b      	ldrb	r3, [r3, #6]
 8007a0e:	2b10      	cmp	r3, #16
 8007a10:	d91f      	bls.n	8007a52 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007a12:	2303      	movs	r3, #3
 8007a14:	75fb      	strb	r3, [r7, #23]
 8007a16:	e01c      	b.n	8007a52 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	78db      	ldrb	r3, [r3, #3]
 8007a1c:	f003 0303 	and.w	r3, r3, #3
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d10a      	bne.n	8007a3a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	799b      	ldrb	r3, [r3, #6]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <USBH_ParseEPDesc+0x11e>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	799b      	ldrb	r3, [r3, #6]
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d90e      	bls.n	8007a52 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007a34:	2303      	movs	r3, #3
 8007a36:	75fb      	strb	r3, [r7, #23]
 8007a38:	e00b      	b.n	8007a52 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	78db      	ldrb	r3, [r3, #3]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d105      	bne.n	8007a52 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	799b      	ldrb	r3, [r3, #6]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d120      	bne.n	8007aba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	1e9a      	subs	r2, r3, #2
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	4293      	cmp	r3, r2
 8007a82:	bf28      	it	cs
 8007a84:	4613      	movcs	r3, r2
 8007a86:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a8e:	2300      	movs	r3, #0
 8007a90:	82fb      	strh	r3, [r7, #22]
 8007a92:	e00b      	b.n	8007aac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a94:	8afb      	ldrh	r3, [r7, #22]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007aa6:	8afb      	ldrh	r3, [r7, #22]
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	82fb      	strh	r3, [r7, #22]
 8007aac:	8afa      	ldrh	r2, [r7, #22]
 8007aae:	8abb      	ldrh	r3, [r7, #20]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d3ef      	bcc.n	8007a94 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8007aba:	bf00      	nop
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	881a      	ldrh	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007aee:	68fb      	ldr	r3, [r7, #12]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	789b      	ldrb	r3, [r3, #2]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d002      	beq.n	8007b1c <USBH_CtlReq+0x20>
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d00f      	beq.n	8007b3a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007b1a:	e027      	b.n	8007b6c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	88fa      	ldrh	r2, [r7, #6]
 8007b26:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2202      	movs	r2, #2
 8007b32:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
      break;
 8007b38:	e018      	b.n	8007b6c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 f81c 	bl	8007b78 <USBH_HandleControl>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <USBH_CtlReq+0x54>
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d106      	bne.n	8007b5e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	761a      	strb	r2, [r3, #24]
      break;
 8007b5c:	e005      	b.n	8007b6a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d102      	bne.n	8007b6a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	709a      	strb	r2, [r3, #2]
      break;
 8007b6a:	bf00      	nop
  }
  return status;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b80:	2301      	movs	r3, #1
 8007b82:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7e1b      	ldrb	r3, [r3, #24]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	2b0a      	cmp	r3, #10
 8007b90:	f200 8156 	bhi.w	8007e40 <USBH_HandleControl+0x2c8>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBH_HandleControl+0x24>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bc9 	.word	0x08007bc9
 8007ba0:	08007be3 	.word	0x08007be3
 8007ba4:	08007c4d 	.word	0x08007c4d
 8007ba8:	08007c73 	.word	0x08007c73
 8007bac:	08007cab 	.word	0x08007cab
 8007bb0:	08007cd5 	.word	0x08007cd5
 8007bb4:	08007d27 	.word	0x08007d27
 8007bb8:	08007d49 	.word	0x08007d49
 8007bbc:	08007d85 	.word	0x08007d85
 8007bc0:	08007dab 	.word	0x08007dab
 8007bc4:	08007de9 	.word	0x08007de9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f103 0110 	add.w	r1, r3, #16
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	795b      	ldrb	r3, [r3, #5]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f943 	bl	8007e60 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	761a      	strb	r2, [r3, #24]
      break;
 8007be0:	e139      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	795b      	ldrb	r3, [r3, #5]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fc93 	bl	8008514 <USBH_LL_GetURBState>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d11e      	bne.n	8007c36 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	7c1b      	ldrb	r3, [r3, #16]
 8007bfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c00:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8adb      	ldrh	r3, [r3, #22]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007c0a:	7b7b      	ldrb	r3, [r7, #13]
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	d103      	bne.n	8007c18 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2203      	movs	r2, #3
 8007c14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c16:	e115      	b.n	8007e44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	761a      	strb	r2, [r3, #24]
      break;
 8007c1e:	e111      	b.n	8007e44 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007c20:	7b7b      	ldrb	r3, [r7, #13]
 8007c22:	2b80      	cmp	r3, #128	; 0x80
 8007c24:	d103      	bne.n	8007c2e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2209      	movs	r2, #9
 8007c2a:	761a      	strb	r2, [r3, #24]
      break;
 8007c2c:	e10a      	b.n	8007e44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2207      	movs	r2, #7
 8007c32:	761a      	strb	r2, [r3, #24]
      break;
 8007c34:	e106      	b.n	8007e44 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d003      	beq.n	8007c44 <USBH_HandleControl+0xcc>
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	f040 8100 	bne.w	8007e44 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	220b      	movs	r2, #11
 8007c48:	761a      	strb	r2, [r3, #24]
      break;
 8007c4a:	e0fb      	b.n	8007e44 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6899      	ldr	r1, [r3, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	899a      	ldrh	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	791b      	ldrb	r3, [r3, #4]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f93a 	bl	8007ede <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	761a      	strb	r2, [r3, #24]
      break;
 8007c70:	e0f1      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	791b      	ldrb	r3, [r3, #4]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fc4b 	bl	8008514 <USBH_LL_GetURBState>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d102      	bne.n	8007c8e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2209      	movs	r2, #9
 8007c8c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b05      	cmp	r3, #5
 8007c92:	d102      	bne.n	8007c9a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c94:	2303      	movs	r3, #3
 8007c96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c98:	e0d6      	b.n	8007e48 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	f040 80d3 	bne.w	8007e48 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	220b      	movs	r2, #11
 8007ca6:	761a      	strb	r2, [r3, #24]
      break;
 8007ca8:	e0ce      	b.n	8007e48 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6899      	ldr	r1, [r3, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	899a      	ldrh	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	795b      	ldrb	r3, [r3, #5]
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	9000      	str	r0, [sp, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f8ea 	bl	8007e94 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2206      	movs	r2, #6
 8007cd0:	761a      	strb	r2, [r3, #24]
      break;
 8007cd2:	e0c0      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	795b      	ldrb	r3, [r3, #5]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fc1a 	bl	8008514 <USBH_LL_GetURBState>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d103      	bne.n	8007cf2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2207      	movs	r2, #7
 8007cee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cf0:	e0ac      	b.n	8007e4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	2b05      	cmp	r3, #5
 8007cf6:	d105      	bne.n	8007d04 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	220c      	movs	r2, #12
 8007cfc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	73fb      	strb	r3, [r7, #15]
      break;
 8007d02:	e0a3      	b.n	8007e4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d103      	bne.n	8007d12 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2205      	movs	r2, #5
 8007d0e:	761a      	strb	r2, [r3, #24]
      break;
 8007d10:	e09c      	b.n	8007e4c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	f040 8099 	bne.w	8007e4c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	220b      	movs	r2, #11
 8007d1e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d20:	2302      	movs	r3, #2
 8007d22:	73fb      	strb	r3, [r7, #15]
      break;
 8007d24:	e092      	b.n	8007e4c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	791b      	ldrb	r3, [r3, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f8d5 	bl	8007ede <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2208      	movs	r2, #8
 8007d44:	761a      	strb	r2, [r3, #24]

      break;
 8007d46:	e086      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	791b      	ldrb	r3, [r3, #4]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fbe0 	bl	8008514 <USBH_LL_GetURBState>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d105      	bne.n	8007d6a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220d      	movs	r2, #13
 8007d62:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d68:	e072      	b.n	8007e50 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d103      	bne.n	8007d78 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	220b      	movs	r2, #11
 8007d74:	761a      	strb	r2, [r3, #24]
      break;
 8007d76:	e06b      	b.n	8007e50 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d168      	bne.n	8007e50 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	73fb      	strb	r3, [r7, #15]
      break;
 8007d82:	e065      	b.n	8007e50 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	795b      	ldrb	r3, [r3, #5]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	9200      	str	r2, [sp, #0]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2100      	movs	r1, #0
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f87f 	bl	8007e94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	220a      	movs	r2, #10
 8007da6:	761a      	strb	r2, [r3, #24]
      break;
 8007da8:	e055      	b.n	8007e56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	795b      	ldrb	r3, [r3, #5]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fbaf 	bl	8008514 <USBH_LL_GetURBState>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d105      	bne.n	8007dcc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	220d      	movs	r2, #13
 8007dc8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007dca:	e043      	b.n	8007e54 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d103      	bne.n	8007dda <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2209      	movs	r2, #9
 8007dd6:	761a      	strb	r2, [r3, #24]
      break;
 8007dd8:	e03c      	b.n	8007e54 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d139      	bne.n	8007e54 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	220b      	movs	r2, #11
 8007de4:	761a      	strb	r2, [r3, #24]
      break;
 8007de6:	e035      	b.n	8007e54 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7e5b      	ldrb	r3, [r3, #25]
 8007dec:	3301      	adds	r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	765a      	strb	r2, [r3, #25]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7e5b      	ldrb	r3, [r3, #25]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d806      	bhi.n	8007e0a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e08:	e025      	b.n	8007e56 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e10:	2106      	movs	r1, #6
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	795b      	ldrb	r3, [r3, #5]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f8e8 	bl	8007ff8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	791b      	ldrb	r3, [r3, #4]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8e2 	bl	8007ff8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3e:	e00a      	b.n	8007e56 <USBH_HandleControl+0x2de>

    default:
      break;
 8007e40:	bf00      	nop
 8007e42:	e008      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e44:	bf00      	nop
 8007e46:	e006      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e48:	bf00      	nop
 8007e4a:	e004      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e4c:	bf00      	nop
 8007e4e:	e002      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <USBH_HandleControl+0x2de>
      break;
 8007e54:	bf00      	nop
  }

  return status;
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e6e:	79f9      	ldrb	r1, [r7, #7]
 8007e70:	2300      	movs	r3, #0
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	2308      	movs	r3, #8
 8007e76:	9302      	str	r3, [sp, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	2200      	movs	r2, #0
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fb14 	bl	80084b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af04      	add	r7, sp, #16
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	80fb      	strh	r3, [r7, #6]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007eb8:	7979      	ldrb	r1, [r7, #5]
 8007eba:	7e3b      	ldrb	r3, [r7, #24]
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	9302      	str	r3, [sp, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 faef 	bl	80084b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b088      	sub	sp, #32
 8007ee2:	af04      	add	r7, sp, #16
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	461a      	mov	r2, r3
 8007eec:	460b      	mov	r3, r1
 8007eee:	80fb      	strh	r3, [r7, #6]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ef4:	7979      	ldrb	r1, [r7, #5]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	9302      	str	r3, [sp, #8]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	2301      	movs	r3, #1
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	2201      	movs	r2, #1
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fad1 	bl	80084b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f10:	2300      	movs	r3, #0

}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af04      	add	r7, sp, #16
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	4611      	mov	r1, r2
 8007f26:	461a      	mov	r2, r3
 8007f28:	460b      	mov	r3, r1
 8007f2a:	71fb      	strb	r3, [r7, #7]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	79b9      	ldrb	r1, [r7, #6]
 8007f36:	2200      	movs	r2, #0
 8007f38:	9203      	str	r2, [sp, #12]
 8007f3a:	9302      	str	r3, [sp, #8]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	2301      	movs	r3, #1
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2303      	movs	r3, #3
 8007f46:	2201      	movs	r2, #1
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fab2 	bl	80084b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	4608      	mov	r0, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	461a      	mov	r2, r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	70fb      	strb	r3, [r7, #3]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70bb      	strb	r3, [r7, #2]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f72:	7878      	ldrb	r0, [r7, #1]
 8007f74:	78ba      	ldrb	r2, [r7, #2]
 8007f76:	78f9      	ldrb	r1, [r7, #3]
 8007f78:	8b3b      	ldrh	r3, [r7, #24]
 8007f7a:	9302      	str	r3, [sp, #8]
 8007f7c:	7d3b      	ldrb	r3, [r7, #20]
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	7c3b      	ldrb	r3, [r7, #16]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4603      	mov	r3, r0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa45 	bl	8008416 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa64 	bl	8008474 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f836 	bl	8008034 <USBH_GetFreePipe>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00a      	beq.n	8007fec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007fd6:	78fa      	ldrb	r2, [r7, #3]
 8007fd8:	89fb      	ldrh	r3, [r7, #14]
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	33e0      	adds	r3, #224	; 0xe0
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007fec:	89fb      	ldrh	r3, [r7, #14]
 8007fee:	b2db      	uxtb	r3, r3
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	2b0f      	cmp	r3, #15
 8008008:	d80d      	bhi.n	8008026 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	33e0      	adds	r3, #224	; 0xe0
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	33e0      	adds	r3, #224	; 0xe0
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
 8008044:	e00f      	b.n	8008066 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	33e0      	adds	r3, #224	; 0xe0
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d102      	bne.n	8008060 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	b29b      	uxth	r3, r3
 800805e:	e007      	b.n	8008070 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	3301      	adds	r3, #1
 8008064:	73fb      	strb	r3, [r7, #15]
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	2b0f      	cmp	r3, #15
 800806a:	d9ec      	bls.n	8008046 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800806c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008080:	2201      	movs	r2, #1
 8008082:	490e      	ldr	r1, [pc, #56]	; (80080bc <MX_USB_HOST_Init+0x40>)
 8008084:	480e      	ldr	r0, [pc, #56]	; (80080c0 <MX_USB_HOST_Init+0x44>)
 8008086:	f7fe fbcb 	bl	8006820 <USBH_Init>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008090:	f7f8 fba2 	bl	80007d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8008094:	490b      	ldr	r1, [pc, #44]	; (80080c4 <MX_USB_HOST_Init+0x48>)
 8008096:	480a      	ldr	r0, [pc, #40]	; (80080c0 <MX_USB_HOST_Init+0x44>)
 8008098:	f7fe fc50 	bl	800693c <USBH_RegisterClass>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80080a2:	f7f8 fb99 	bl	80007d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80080a6:	4806      	ldr	r0, [pc, #24]	; (80080c0 <MX_USB_HOST_Init+0x44>)
 80080a8:	f7fe fcd4 	bl	8006a54 <USBH_Start>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80080b2:	f7f8 fb91 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80080b6:	bf00      	nop
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	080080dd 	.word	0x080080dd
 80080c0:	20000288 	.word	0x20000288
 80080c4:	2000000c 	.word	0x2000000c

080080c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80080cc:	4802      	ldr	r0, [pc, #8]	; (80080d8 <MX_USB_HOST_Process+0x10>)
 80080ce:	f7fe fcd1 	bl	8006a74 <USBH_Process>
}
 80080d2:	bf00      	nop
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000288 	.word	0x20000288

080080dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d819      	bhi.n	8008124 <USBH_UserProcess+0x48>
 80080f0:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <USBH_UserProcess+0x1c>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	08008125 	.word	0x08008125
 80080fc:	08008115 	.word	0x08008115
 8008100:	08008125 	.word	0x08008125
 8008104:	0800811d 	.word	0x0800811d
 8008108:	0800810d 	.word	0x0800810d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <USBH_UserProcess+0x58>)
 800810e:	2203      	movs	r2, #3
 8008110:	701a      	strb	r2, [r3, #0]
  break;
 8008112:	e008      	b.n	8008126 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008114:	4b07      	ldr	r3, [pc, #28]	; (8008134 <USBH_UserProcess+0x58>)
 8008116:	2202      	movs	r2, #2
 8008118:	701a      	strb	r2, [r3, #0]
  break;
 800811a:	e004      	b.n	8008126 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <USBH_UserProcess+0x58>)
 800811e:	2201      	movs	r2, #1
 8008120:	701a      	strb	r2, [r3, #0]
  break;
 8008122:	e000      	b.n	8008126 <USBH_UserProcess+0x4a>

  default:
  break;
 8008124:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	200000b0 	.word	0x200000b0

08008138 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	605a      	str	r2, [r3, #4]
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008158:	d13a      	bne.n	80081d0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800815a:	2300      	movs	r3, #0
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	4b1e      	ldr	r3, [pc, #120]	; (80081d8 <HAL_HCD_MspInit+0xa0>)
 8008160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008162:	4a1d      	ldr	r2, [pc, #116]	; (80081d8 <HAL_HCD_MspInit+0xa0>)
 8008164:	f043 0301 	orr.w	r3, r3, #1
 8008168:	6313      	str	r3, [r2, #48]	; 0x30
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <HAL_HCD_MspInit+0xa0>)
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	613b      	str	r3, [r7, #16]
 8008174:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008176:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800817a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800817c:	2302      	movs	r3, #2
 800817e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008180:	2300      	movs	r3, #0
 8008182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008184:	2303      	movs	r3, #3
 8008186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008188:	230a      	movs	r3, #10
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	4619      	mov	r1, r3
 8008192:	4812      	ldr	r0, [pc, #72]	; (80081dc <HAL_HCD_MspInit+0xa4>)
 8008194:	f7f9 f83a 	bl	800120c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008198:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <HAL_HCD_MspInit+0xa0>)
 800819a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819c:	4a0e      	ldr	r2, [pc, #56]	; (80081d8 <HAL_HCD_MspInit+0xa0>)
 800819e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a2:	6353      	str	r3, [r2, #52]	; 0x34
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <HAL_HCD_MspInit+0xa0>)
 80081aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ac:	4a0a      	ldr	r2, [pc, #40]	; (80081d8 <HAL_HCD_MspInit+0xa0>)
 80081ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081b2:	6453      	str	r3, [r2, #68]	; 0x44
 80081b4:	4b08      	ldr	r3, [pc, #32]	; (80081d8 <HAL_HCD_MspInit+0xa0>)
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081c0:	2200      	movs	r2, #0
 80081c2:	2100      	movs	r1, #0
 80081c4:	2043      	movs	r0, #67	; 0x43
 80081c6:	f7f8 ffce 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081ca:	2043      	movs	r0, #67	; 0x43
 80081cc:	f7f8 ffe7 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081d0:	bf00      	nop
 80081d2:	3728      	adds	r7, #40	; 0x28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	40023800 	.word	0x40023800
 80081dc:	40020000 	.word	0x40020000

080081e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff f81f 	bl	8007232 <USBH_LL_IncTimer>
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff f857 	bl	80072be <USBH_LL_Connect>
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff f860 	bl	80072ec <USBH_LL_Disconnect>
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
 8008240:	4613      	mov	r3, r2
 8008242:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff f811 	bl	8007286 <USBH_LL_PortEnabled>
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff f811 	bl	80072a2 <USBH_LL_PortDisabled>
}
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008296:	2b01      	cmp	r3, #1
 8008298:	d12a      	bne.n	80082f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800829a:	4a18      	ldr	r2, [pc, #96]	; (80082fc <USBH_LL_Init+0x74>)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a15      	ldr	r2, [pc, #84]	; (80082fc <USBH_LL_Init+0x74>)
 80082a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <USBH_LL_Init+0x74>)
 80082ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80082b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <USBH_LL_Init+0x74>)
 80082b4:	2208      	movs	r2, #8
 80082b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 80082b8:	4b10      	ldr	r3, [pc, #64]	; (80082fc <USBH_LL_Init+0x74>)
 80082ba:	2201      	movs	r2, #1
 80082bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <USBH_LL_Init+0x74>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80082c4:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <USBH_LL_Init+0x74>)
 80082c6:	2202      	movs	r2, #2
 80082c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082ca:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <USBH_LL_Init+0x74>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80082d0:	480a      	ldr	r0, [pc, #40]	; (80082fc <USBH_LL_Init+0x74>)
 80082d2:	f7f9 f952 	bl	800157a <HAL_HCD_Init>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80082dc:	f7f8 fa7c 	bl	80007d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80082e0:	4806      	ldr	r0, [pc, #24]	; (80082fc <USBH_LL_Init+0x74>)
 80082e2:	f7f9 fd36 	bl	8001d52 <HAL_HCD_GetCurrentFrame>
 80082e6:	4603      	mov	r3, r0
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7fe ff92 	bl	8007214 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20000660 	.word	0x20000660

08008300 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008316:	4618      	mov	r0, r3
 8008318:	f7f9 fca5 	bl	8001c66 <HAL_HCD_Start>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f95c 	bl	80085e0 <USBH_Get_USB_Status>
 8008328:	4603      	mov	r3, r0
 800832a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800832c:	7bbb      	ldrb	r3, [r7, #14]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800834c:	4618      	mov	r0, r3
 800834e:	f7f9 fcad 	bl	8001cac <HAL_HCD_Stop>
 8008352:	4603      	mov	r3, r0
 8008354:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	4618      	mov	r0, r3
 800835a:	f000 f941 	bl	80085e0 <USBH_Get_USB_Status>
 800835e:	4603      	mov	r3, r0
 8008360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008362:	7bbb      	ldrb	r3, [r7, #14]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800837e:	4618      	mov	r0, r3
 8008380:	f7f9 fcf5 	bl	8001d6e <HAL_HCD_GetCurrentSpeed>
 8008384:	4603      	mov	r3, r0
 8008386:	2b02      	cmp	r3, #2
 8008388:	d00c      	beq.n	80083a4 <USBH_LL_GetSpeed+0x38>
 800838a:	2b02      	cmp	r3, #2
 800838c:	d80d      	bhi.n	80083aa <USBH_LL_GetSpeed+0x3e>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <USBH_LL_GetSpeed+0x2c>
 8008392:	2b01      	cmp	r3, #1
 8008394:	d003      	beq.n	800839e <USBH_LL_GetSpeed+0x32>
 8008396:	e008      	b.n	80083aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	e008      	b.n	80083b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]
    break;
 80083a2:	e005      	b.n	80083b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80083a4:	2302      	movs	r3, #2
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	e002      	b.n	80083b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80083aa:	2301      	movs	r3, #1
 80083ac:	73fb      	strb	r3, [r7, #15]
    break;
 80083ae:	bf00      	nop
  }
  return  speed;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7f9 fc88 	bl	8001ce6 <HAL_HCD_ResetPort>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f8ff 	bl	80085e0 <USBH_Get_USB_Status>
 80083e2:	4603      	mov	r3, r0
 80083e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008402:	78fa      	ldrb	r2, [r7, #3]
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7f9 fc8f 	bl	8001d2a <HAL_HCD_HC_GetXferCount>
 800840c:	4603      	mov	r3, r0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b089      	sub	sp, #36	; 0x24
 800841a:	af04      	add	r7, sp, #16
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	461a      	mov	r2, r3
 8008424:	4603      	mov	r3, r0
 8008426:	70fb      	strb	r3, [r7, #3]
 8008428:	460b      	mov	r3, r1
 800842a:	70bb      	strb	r3, [r7, #2]
 800842c:	4613      	mov	r3, r2
 800842e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800843e:	787c      	ldrb	r4, [r7, #1]
 8008440:	78ba      	ldrb	r2, [r7, #2]
 8008442:	78f9      	ldrb	r1, [r7, #3]
 8008444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008446:	9302      	str	r3, [sp, #8]
 8008448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4623      	mov	r3, r4
 8008456:	f7f9 f8f2 	bl	800163e <HAL_HCD_HC_Init>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 f8bd 	bl	80085e0 <USBH_Get_USB_Status>
 8008466:	4603      	mov	r3, r0
 8008468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800846a:	7bbb      	ldrb	r3, [r7, #14]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	bd90      	pop	{r4, r7, pc}

08008474 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7f9 f962 	bl	800175c <HAL_HCD_HC_Halt>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f89e 	bl	80085e0 <USBH_Get_USB_Status>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80084b2:	b590      	push	{r4, r7, lr}
 80084b4:	b089      	sub	sp, #36	; 0x24
 80084b6:	af04      	add	r7, sp, #16
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	4608      	mov	r0, r1
 80084bc:	4611      	mov	r1, r2
 80084be:	461a      	mov	r2, r3
 80084c0:	4603      	mov	r3, r0
 80084c2:	70fb      	strb	r3, [r7, #3]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70bb      	strb	r3, [r7, #2]
 80084c8:	4613      	mov	r3, r2
 80084ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084da:	787c      	ldrb	r4, [r7, #1]
 80084dc:	78ba      	ldrb	r2, [r7, #2]
 80084de:	78f9      	ldrb	r1, [r7, #3]
 80084e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084e4:	9303      	str	r3, [sp, #12]
 80084e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084e8:	9302      	str	r3, [sp, #8]
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	4623      	mov	r3, r4
 80084f6:	f7f9 f955 	bl	80017a4 <HAL_HCD_HC_SubmitRequest>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 f86d 	bl	80085e0 <USBH_Get_USB_Status>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850a:	7bbb      	ldrb	r3, [r7, #14]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	bd90      	pop	{r4, r7, pc}

08008514 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	4611      	mov	r1, r2
 800852a:	4618      	mov	r0, r3
 800852c:	f7f9 fbe9 	bl	8001d02 <HAL_HCD_HC_GetURBState>
 8008530:	4603      	mov	r3, r0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800854c:	2b01      	cmp	r3, #1
 800854e:	d103      	bne.n	8008558 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f870 	bl	8008638 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008558:	20c8      	movs	r0, #200	; 0xc8
 800855a:	f7f8 fd05 	bl	8000f68 <HAL_Delay>
  return USBH_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
 8008574:	4613      	mov	r3, r2
 8008576:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800857e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	212c      	movs	r1, #44	; 0x2c
 8008586:	fb01 f303 	mul.w	r3, r1, r3
 800858a:	4413      	add	r3, r2
 800858c:	333b      	adds	r3, #59	; 0x3b
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d009      	beq.n	80085a8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	212c      	movs	r1, #44	; 0x2c
 800859a:	fb01 f303 	mul.w	r3, r1, r3
 800859e:	4413      	add	r3, r2
 80085a0:	3354      	adds	r3, #84	; 0x54
 80085a2:	78ba      	ldrb	r2, [r7, #2]
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	e008      	b.n	80085ba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	212c      	movs	r1, #44	; 0x2c
 80085ae:	fb01 f303 	mul.w	r3, r1, r3
 80085b2:	4413      	add	r3, r2
 80085b4:	3355      	adds	r3, #85	; 0x55
 80085b6:	78ba      	ldrb	r2, [r7, #2]
 80085b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7f8 fcc9 	bl	8000f68 <HAL_Delay>
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d817      	bhi.n	8008624 <USBH_Get_USB_Status+0x44>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <USBH_Get_USB_Status+0x1c>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	08008613 	.word	0x08008613
 8008604:	08008619 	.word	0x08008619
 8008608:	0800861f 	.word	0x0800861f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
    break;
 8008610:	e00b      	b.n	800862a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008612:	2302      	movs	r3, #2
 8008614:	73fb      	strb	r3, [r7, #15]
    break;
 8008616:	e008      	b.n	800862a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008618:	2301      	movs	r3, #1
 800861a:	73fb      	strb	r3, [r7, #15]
    break;
 800861c:	e005      	b.n	800862a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800861e:	2302      	movs	r3, #2
 8008620:	73fb      	strb	r3, [r7, #15]
    break;
 8008622:	e002      	b.n	800862a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008624:	2302      	movs	r3, #2
 8008626:	73fb      	strb	r3, [r7, #15]
    break;
 8008628:	bf00      	nop
  }
  return usb_status;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
 8008650:	e001      	b.n	8008656 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008652:	2301      	movs	r3, #1
 8008654:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,(GPIO_PinState)data);
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	461a      	mov	r2, r3
 800865a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800865e:	4803      	ldr	r0, [pc, #12]	; (800866c <MX_DriverVbusFS+0x34>)
 8008660:	f7f8 ff58 	bl	8001514 <HAL_GPIO_WritePin>
}
 8008664:	bf00      	nop
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	40020800 	.word	0x40020800

08008670 <__errno>:
 8008670:	4b01      	ldr	r3, [pc, #4]	; (8008678 <__errno+0x8>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	2000002c 	.word	0x2000002c

0800867c <__libc_init_array>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	4d0d      	ldr	r5, [pc, #52]	; (80086b4 <__libc_init_array+0x38>)
 8008680:	4c0d      	ldr	r4, [pc, #52]	; (80086b8 <__libc_init_array+0x3c>)
 8008682:	1b64      	subs	r4, r4, r5
 8008684:	10a4      	asrs	r4, r4, #2
 8008686:	2600      	movs	r6, #0
 8008688:	42a6      	cmp	r6, r4
 800868a:	d109      	bne.n	80086a0 <__libc_init_array+0x24>
 800868c:	4d0b      	ldr	r5, [pc, #44]	; (80086bc <__libc_init_array+0x40>)
 800868e:	4c0c      	ldr	r4, [pc, #48]	; (80086c0 <__libc_init_array+0x44>)
 8008690:	f000 fc5e 	bl	8008f50 <_init>
 8008694:	1b64      	subs	r4, r4, r5
 8008696:	10a4      	asrs	r4, r4, #2
 8008698:	2600      	movs	r6, #0
 800869a:	42a6      	cmp	r6, r4
 800869c:	d105      	bne.n	80086aa <__libc_init_array+0x2e>
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a4:	4798      	blx	r3
 80086a6:	3601      	adds	r6, #1
 80086a8:	e7ee      	b.n	8008688 <__libc_init_array+0xc>
 80086aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ae:	4798      	blx	r3
 80086b0:	3601      	adds	r6, #1
 80086b2:	e7f2      	b.n	800869a <__libc_init_array+0x1e>
 80086b4:	080090a8 	.word	0x080090a8
 80086b8:	080090a8 	.word	0x080090a8
 80086bc:	080090a8 	.word	0x080090a8
 80086c0:	080090ac 	.word	0x080090ac

080086c4 <malloc>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <malloc+0xc>)
 80086c6:	4601      	mov	r1, r0
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	f000 b863 	b.w	8008794 <_malloc_r>
 80086ce:	bf00      	nop
 80086d0:	2000002c 	.word	0x2000002c

080086d4 <free>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <free+0xc>)
 80086d6:	4601      	mov	r1, r0
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	f000 b80b 	b.w	80086f4 <_free_r>
 80086de:	bf00      	nop
 80086e0:	2000002c 	.word	0x2000002c

080086e4 <memset>:
 80086e4:	4402      	add	r2, r0
 80086e6:	4603      	mov	r3, r0
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d100      	bne.n	80086ee <memset+0xa>
 80086ec:	4770      	bx	lr
 80086ee:	f803 1b01 	strb.w	r1, [r3], #1
 80086f2:	e7f9      	b.n	80086e8 <memset+0x4>

080086f4 <_free_r>:
 80086f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086f6:	2900      	cmp	r1, #0
 80086f8:	d048      	beq.n	800878c <_free_r+0x98>
 80086fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086fe:	9001      	str	r0, [sp, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f1a1 0404 	sub.w	r4, r1, #4
 8008706:	bfb8      	it	lt
 8008708:	18e4      	addlt	r4, r4, r3
 800870a:	f000 f8cd 	bl	80088a8 <__malloc_lock>
 800870e:	4a20      	ldr	r2, [pc, #128]	; (8008790 <_free_r+0x9c>)
 8008710:	9801      	ldr	r0, [sp, #4]
 8008712:	6813      	ldr	r3, [r2, #0]
 8008714:	4615      	mov	r5, r2
 8008716:	b933      	cbnz	r3, 8008726 <_free_r+0x32>
 8008718:	6063      	str	r3, [r4, #4]
 800871a:	6014      	str	r4, [r2, #0]
 800871c:	b003      	add	sp, #12
 800871e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008722:	f000 b8c7 	b.w	80088b4 <__malloc_unlock>
 8008726:	42a3      	cmp	r3, r4
 8008728:	d90b      	bls.n	8008742 <_free_r+0x4e>
 800872a:	6821      	ldr	r1, [r4, #0]
 800872c:	1862      	adds	r2, r4, r1
 800872e:	4293      	cmp	r3, r2
 8008730:	bf04      	itt	eq
 8008732:	681a      	ldreq	r2, [r3, #0]
 8008734:	685b      	ldreq	r3, [r3, #4]
 8008736:	6063      	str	r3, [r4, #4]
 8008738:	bf04      	itt	eq
 800873a:	1852      	addeq	r2, r2, r1
 800873c:	6022      	streq	r2, [r4, #0]
 800873e:	602c      	str	r4, [r5, #0]
 8008740:	e7ec      	b.n	800871c <_free_r+0x28>
 8008742:	461a      	mov	r2, r3
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	b10b      	cbz	r3, 800874c <_free_r+0x58>
 8008748:	42a3      	cmp	r3, r4
 800874a:	d9fa      	bls.n	8008742 <_free_r+0x4e>
 800874c:	6811      	ldr	r1, [r2, #0]
 800874e:	1855      	adds	r5, r2, r1
 8008750:	42a5      	cmp	r5, r4
 8008752:	d10b      	bne.n	800876c <_free_r+0x78>
 8008754:	6824      	ldr	r4, [r4, #0]
 8008756:	4421      	add	r1, r4
 8008758:	1854      	adds	r4, r2, r1
 800875a:	42a3      	cmp	r3, r4
 800875c:	6011      	str	r1, [r2, #0]
 800875e:	d1dd      	bne.n	800871c <_free_r+0x28>
 8008760:	681c      	ldr	r4, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	6053      	str	r3, [r2, #4]
 8008766:	4421      	add	r1, r4
 8008768:	6011      	str	r1, [r2, #0]
 800876a:	e7d7      	b.n	800871c <_free_r+0x28>
 800876c:	d902      	bls.n	8008774 <_free_r+0x80>
 800876e:	230c      	movs	r3, #12
 8008770:	6003      	str	r3, [r0, #0]
 8008772:	e7d3      	b.n	800871c <_free_r+0x28>
 8008774:	6825      	ldr	r5, [r4, #0]
 8008776:	1961      	adds	r1, r4, r5
 8008778:	428b      	cmp	r3, r1
 800877a:	bf04      	itt	eq
 800877c:	6819      	ldreq	r1, [r3, #0]
 800877e:	685b      	ldreq	r3, [r3, #4]
 8008780:	6063      	str	r3, [r4, #4]
 8008782:	bf04      	itt	eq
 8008784:	1949      	addeq	r1, r1, r5
 8008786:	6021      	streq	r1, [r4, #0]
 8008788:	6054      	str	r4, [r2, #4]
 800878a:	e7c7      	b.n	800871c <_free_r+0x28>
 800878c:	b003      	add	sp, #12
 800878e:	bd30      	pop	{r4, r5, pc}
 8008790:	200000b4 	.word	0x200000b4

08008794 <_malloc_r>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	1ccd      	adds	r5, r1, #3
 8008798:	f025 0503 	bic.w	r5, r5, #3
 800879c:	3508      	adds	r5, #8
 800879e:	2d0c      	cmp	r5, #12
 80087a0:	bf38      	it	cc
 80087a2:	250c      	movcc	r5, #12
 80087a4:	2d00      	cmp	r5, #0
 80087a6:	4606      	mov	r6, r0
 80087a8:	db01      	blt.n	80087ae <_malloc_r+0x1a>
 80087aa:	42a9      	cmp	r1, r5
 80087ac:	d903      	bls.n	80087b6 <_malloc_r+0x22>
 80087ae:	230c      	movs	r3, #12
 80087b0:	6033      	str	r3, [r6, #0]
 80087b2:	2000      	movs	r0, #0
 80087b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b6:	f000 f877 	bl	80088a8 <__malloc_lock>
 80087ba:	4921      	ldr	r1, [pc, #132]	; (8008840 <_malloc_r+0xac>)
 80087bc:	680a      	ldr	r2, [r1, #0]
 80087be:	4614      	mov	r4, r2
 80087c0:	b99c      	cbnz	r4, 80087ea <_malloc_r+0x56>
 80087c2:	4f20      	ldr	r7, [pc, #128]	; (8008844 <_malloc_r+0xb0>)
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	b923      	cbnz	r3, 80087d2 <_malloc_r+0x3e>
 80087c8:	4621      	mov	r1, r4
 80087ca:	4630      	mov	r0, r6
 80087cc:	f000 f83c 	bl	8008848 <_sbrk_r>
 80087d0:	6038      	str	r0, [r7, #0]
 80087d2:	4629      	mov	r1, r5
 80087d4:	4630      	mov	r0, r6
 80087d6:	f000 f837 	bl	8008848 <_sbrk_r>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	d123      	bne.n	8008826 <_malloc_r+0x92>
 80087de:	230c      	movs	r3, #12
 80087e0:	6033      	str	r3, [r6, #0]
 80087e2:	4630      	mov	r0, r6
 80087e4:	f000 f866 	bl	80088b4 <__malloc_unlock>
 80087e8:	e7e3      	b.n	80087b2 <_malloc_r+0x1e>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	1b5b      	subs	r3, r3, r5
 80087ee:	d417      	bmi.n	8008820 <_malloc_r+0x8c>
 80087f0:	2b0b      	cmp	r3, #11
 80087f2:	d903      	bls.n	80087fc <_malloc_r+0x68>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	441c      	add	r4, r3
 80087f8:	6025      	str	r5, [r4, #0]
 80087fa:	e004      	b.n	8008806 <_malloc_r+0x72>
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	42a2      	cmp	r2, r4
 8008800:	bf0c      	ite	eq
 8008802:	600b      	streq	r3, [r1, #0]
 8008804:	6053      	strne	r3, [r2, #4]
 8008806:	4630      	mov	r0, r6
 8008808:	f000 f854 	bl	80088b4 <__malloc_unlock>
 800880c:	f104 000b 	add.w	r0, r4, #11
 8008810:	1d23      	adds	r3, r4, #4
 8008812:	f020 0007 	bic.w	r0, r0, #7
 8008816:	1ac2      	subs	r2, r0, r3
 8008818:	d0cc      	beq.n	80087b4 <_malloc_r+0x20>
 800881a:	1a1b      	subs	r3, r3, r0
 800881c:	50a3      	str	r3, [r4, r2]
 800881e:	e7c9      	b.n	80087b4 <_malloc_r+0x20>
 8008820:	4622      	mov	r2, r4
 8008822:	6864      	ldr	r4, [r4, #4]
 8008824:	e7cc      	b.n	80087c0 <_malloc_r+0x2c>
 8008826:	1cc4      	adds	r4, r0, #3
 8008828:	f024 0403 	bic.w	r4, r4, #3
 800882c:	42a0      	cmp	r0, r4
 800882e:	d0e3      	beq.n	80087f8 <_malloc_r+0x64>
 8008830:	1a21      	subs	r1, r4, r0
 8008832:	4630      	mov	r0, r6
 8008834:	f000 f808 	bl	8008848 <_sbrk_r>
 8008838:	3001      	adds	r0, #1
 800883a:	d1dd      	bne.n	80087f8 <_malloc_r+0x64>
 800883c:	e7cf      	b.n	80087de <_malloc_r+0x4a>
 800883e:	bf00      	nop
 8008840:	200000b4 	.word	0x200000b4
 8008844:	200000b8 	.word	0x200000b8

08008848 <_sbrk_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_sbrk_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f8 f99e 	bl	8000b94 <_sbrk>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_sbrk_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_sbrk_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000964 	.word	0x20000964

08008868 <siprintf>:
 8008868:	b40e      	push	{r1, r2, r3}
 800886a:	b500      	push	{lr}
 800886c:	b09c      	sub	sp, #112	; 0x70
 800886e:	ab1d      	add	r3, sp, #116	; 0x74
 8008870:	9002      	str	r0, [sp, #8]
 8008872:	9006      	str	r0, [sp, #24]
 8008874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008878:	4809      	ldr	r0, [pc, #36]	; (80088a0 <siprintf+0x38>)
 800887a:	9107      	str	r1, [sp, #28]
 800887c:	9104      	str	r1, [sp, #16]
 800887e:	4909      	ldr	r1, [pc, #36]	; (80088a4 <siprintf+0x3c>)
 8008880:	f853 2b04 	ldr.w	r2, [r3], #4
 8008884:	9105      	str	r1, [sp, #20]
 8008886:	6800      	ldr	r0, [r0, #0]
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	a902      	add	r1, sp, #8
 800888c:	f000 f874 	bl	8008978 <_svfiprintf_r>
 8008890:	9b02      	ldr	r3, [sp, #8]
 8008892:	2200      	movs	r2, #0
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	b01c      	add	sp, #112	; 0x70
 8008898:	f85d eb04 	ldr.w	lr, [sp], #4
 800889c:	b003      	add	sp, #12
 800889e:	4770      	bx	lr
 80088a0:	2000002c 	.word	0x2000002c
 80088a4:	ffff0208 	.word	0xffff0208

080088a8 <__malloc_lock>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__malloc_lock+0x8>)
 80088aa:	f000 baf9 	b.w	8008ea0 <__retarget_lock_acquire_recursive>
 80088ae:	bf00      	nop
 80088b0:	2000096c 	.word	0x2000096c

080088b4 <__malloc_unlock>:
 80088b4:	4801      	ldr	r0, [pc, #4]	; (80088bc <__malloc_unlock+0x8>)
 80088b6:	f000 baf4 	b.w	8008ea2 <__retarget_lock_release_recursive>
 80088ba:	bf00      	nop
 80088bc:	2000096c 	.word	0x2000096c

080088c0 <__ssputs_r>:
 80088c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c4:	688e      	ldr	r6, [r1, #8]
 80088c6:	429e      	cmp	r6, r3
 80088c8:	4682      	mov	sl, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	4690      	mov	r8, r2
 80088ce:	461f      	mov	r7, r3
 80088d0:	d838      	bhi.n	8008944 <__ssputs_r+0x84>
 80088d2:	898a      	ldrh	r2, [r1, #12]
 80088d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088d8:	d032      	beq.n	8008940 <__ssputs_r+0x80>
 80088da:	6825      	ldr	r5, [r4, #0]
 80088dc:	6909      	ldr	r1, [r1, #16]
 80088de:	eba5 0901 	sub.w	r9, r5, r1
 80088e2:	6965      	ldr	r5, [r4, #20]
 80088e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088ec:	3301      	adds	r3, #1
 80088ee:	444b      	add	r3, r9
 80088f0:	106d      	asrs	r5, r5, #1
 80088f2:	429d      	cmp	r5, r3
 80088f4:	bf38      	it	cc
 80088f6:	461d      	movcc	r5, r3
 80088f8:	0553      	lsls	r3, r2, #21
 80088fa:	d531      	bpl.n	8008960 <__ssputs_r+0xa0>
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7ff ff49 	bl	8008794 <_malloc_r>
 8008902:	4606      	mov	r6, r0
 8008904:	b950      	cbnz	r0, 800891c <__ssputs_r+0x5c>
 8008906:	230c      	movs	r3, #12
 8008908:	f8ca 3000 	str.w	r3, [sl]
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891c:	6921      	ldr	r1, [r4, #16]
 800891e:	464a      	mov	r2, r9
 8008920:	f000 fac0 	bl	8008ea4 <memcpy>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800892a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	6126      	str	r6, [r4, #16]
 8008932:	6165      	str	r5, [r4, #20]
 8008934:	444e      	add	r6, r9
 8008936:	eba5 0509 	sub.w	r5, r5, r9
 800893a:	6026      	str	r6, [r4, #0]
 800893c:	60a5      	str	r5, [r4, #8]
 800893e:	463e      	mov	r6, r7
 8008940:	42be      	cmp	r6, r7
 8008942:	d900      	bls.n	8008946 <__ssputs_r+0x86>
 8008944:	463e      	mov	r6, r7
 8008946:	4632      	mov	r2, r6
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	4641      	mov	r1, r8
 800894c:	f000 fab8 	bl	8008ec0 <memmove>
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	6822      	ldr	r2, [r4, #0]
 8008954:	1b9b      	subs	r3, r3, r6
 8008956:	4432      	add	r2, r6
 8008958:	60a3      	str	r3, [r4, #8]
 800895a:	6022      	str	r2, [r4, #0]
 800895c:	2000      	movs	r0, #0
 800895e:	e7db      	b.n	8008918 <__ssputs_r+0x58>
 8008960:	462a      	mov	r2, r5
 8008962:	f000 fac7 	bl	8008ef4 <_realloc_r>
 8008966:	4606      	mov	r6, r0
 8008968:	2800      	cmp	r0, #0
 800896a:	d1e1      	bne.n	8008930 <__ssputs_r+0x70>
 800896c:	6921      	ldr	r1, [r4, #16]
 800896e:	4650      	mov	r0, sl
 8008970:	f7ff fec0 	bl	80086f4 <_free_r>
 8008974:	e7c7      	b.n	8008906 <__ssputs_r+0x46>
	...

08008978 <_svfiprintf_r>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	4698      	mov	r8, r3
 800897e:	898b      	ldrh	r3, [r1, #12]
 8008980:	061b      	lsls	r3, r3, #24
 8008982:	b09d      	sub	sp, #116	; 0x74
 8008984:	4607      	mov	r7, r0
 8008986:	460d      	mov	r5, r1
 8008988:	4614      	mov	r4, r2
 800898a:	d50e      	bpl.n	80089aa <_svfiprintf_r+0x32>
 800898c:	690b      	ldr	r3, [r1, #16]
 800898e:	b963      	cbnz	r3, 80089aa <_svfiprintf_r+0x32>
 8008990:	2140      	movs	r1, #64	; 0x40
 8008992:	f7ff feff 	bl	8008794 <_malloc_r>
 8008996:	6028      	str	r0, [r5, #0]
 8008998:	6128      	str	r0, [r5, #16]
 800899a:	b920      	cbnz	r0, 80089a6 <_svfiprintf_r+0x2e>
 800899c:	230c      	movs	r3, #12
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	e0d1      	b.n	8008b4a <_svfiprintf_r+0x1d2>
 80089a6:	2340      	movs	r3, #64	; 0x40
 80089a8:	616b      	str	r3, [r5, #20]
 80089aa:	2300      	movs	r3, #0
 80089ac:	9309      	str	r3, [sp, #36]	; 0x24
 80089ae:	2320      	movs	r3, #32
 80089b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089b8:	2330      	movs	r3, #48	; 0x30
 80089ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b64 <_svfiprintf_r+0x1ec>
 80089be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089c2:	f04f 0901 	mov.w	r9, #1
 80089c6:	4623      	mov	r3, r4
 80089c8:	469a      	mov	sl, r3
 80089ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ce:	b10a      	cbz	r2, 80089d4 <_svfiprintf_r+0x5c>
 80089d0:	2a25      	cmp	r2, #37	; 0x25
 80089d2:	d1f9      	bne.n	80089c8 <_svfiprintf_r+0x50>
 80089d4:	ebba 0b04 	subs.w	fp, sl, r4
 80089d8:	d00b      	beq.n	80089f2 <_svfiprintf_r+0x7a>
 80089da:	465b      	mov	r3, fp
 80089dc:	4622      	mov	r2, r4
 80089de:	4629      	mov	r1, r5
 80089e0:	4638      	mov	r0, r7
 80089e2:	f7ff ff6d 	bl	80088c0 <__ssputs_r>
 80089e6:	3001      	adds	r0, #1
 80089e8:	f000 80aa 	beq.w	8008b40 <_svfiprintf_r+0x1c8>
 80089ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ee:	445a      	add	r2, fp
 80089f0:	9209      	str	r2, [sp, #36]	; 0x24
 80089f2:	f89a 3000 	ldrb.w	r3, [sl]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 80a2 	beq.w	8008b40 <_svfiprintf_r+0x1c8>
 80089fc:	2300      	movs	r3, #0
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a06:	f10a 0a01 	add.w	sl, sl, #1
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	9307      	str	r3, [sp, #28]
 8008a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a12:	931a      	str	r3, [sp, #104]	; 0x68
 8008a14:	4654      	mov	r4, sl
 8008a16:	2205      	movs	r2, #5
 8008a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1c:	4851      	ldr	r0, [pc, #324]	; (8008b64 <_svfiprintf_r+0x1ec>)
 8008a1e:	f7f7 fbdf 	bl	80001e0 <memchr>
 8008a22:	9a04      	ldr	r2, [sp, #16]
 8008a24:	b9d8      	cbnz	r0, 8008a5e <_svfiprintf_r+0xe6>
 8008a26:	06d0      	lsls	r0, r2, #27
 8008a28:	bf44      	itt	mi
 8008a2a:	2320      	movmi	r3, #32
 8008a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a30:	0711      	lsls	r1, r2, #28
 8008a32:	bf44      	itt	mi
 8008a34:	232b      	movmi	r3, #43	; 0x2b
 8008a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a40:	d015      	beq.n	8008a6e <_svfiprintf_r+0xf6>
 8008a42:	9a07      	ldr	r2, [sp, #28]
 8008a44:	4654      	mov	r4, sl
 8008a46:	2000      	movs	r0, #0
 8008a48:	f04f 0c0a 	mov.w	ip, #10
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a52:	3b30      	subs	r3, #48	; 0x30
 8008a54:	2b09      	cmp	r3, #9
 8008a56:	d94e      	bls.n	8008af6 <_svfiprintf_r+0x17e>
 8008a58:	b1b0      	cbz	r0, 8008a88 <_svfiprintf_r+0x110>
 8008a5a:	9207      	str	r2, [sp, #28]
 8008a5c:	e014      	b.n	8008a88 <_svfiprintf_r+0x110>
 8008a5e:	eba0 0308 	sub.w	r3, r0, r8
 8008a62:	fa09 f303 	lsl.w	r3, r9, r3
 8008a66:	4313      	orrs	r3, r2
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	46a2      	mov	sl, r4
 8008a6c:	e7d2      	b.n	8008a14 <_svfiprintf_r+0x9c>
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	1d19      	adds	r1, r3, #4
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	9103      	str	r1, [sp, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bfbb      	ittet	lt
 8008a7a:	425b      	neglt	r3, r3
 8008a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a80:	9307      	strge	r3, [sp, #28]
 8008a82:	9307      	strlt	r3, [sp, #28]
 8008a84:	bfb8      	it	lt
 8008a86:	9204      	strlt	r2, [sp, #16]
 8008a88:	7823      	ldrb	r3, [r4, #0]
 8008a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a8c:	d10c      	bne.n	8008aa8 <_svfiprintf_r+0x130>
 8008a8e:	7863      	ldrb	r3, [r4, #1]
 8008a90:	2b2a      	cmp	r3, #42	; 0x2a
 8008a92:	d135      	bne.n	8008b00 <_svfiprintf_r+0x188>
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	1d1a      	adds	r2, r3, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	9203      	str	r2, [sp, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bfb8      	it	lt
 8008aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aa4:	3402      	adds	r4, #2
 8008aa6:	9305      	str	r3, [sp, #20]
 8008aa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b74 <_svfiprintf_r+0x1fc>
 8008aac:	7821      	ldrb	r1, [r4, #0]
 8008aae:	2203      	movs	r2, #3
 8008ab0:	4650      	mov	r0, sl
 8008ab2:	f7f7 fb95 	bl	80001e0 <memchr>
 8008ab6:	b140      	cbz	r0, 8008aca <_svfiprintf_r+0x152>
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	eba0 000a 	sub.w	r0, r0, sl
 8008abe:	fa03 f000 	lsl.w	r0, r3, r0
 8008ac2:	9b04      	ldr	r3, [sp, #16]
 8008ac4:	4303      	orrs	r3, r0
 8008ac6:	3401      	adds	r4, #1
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ace:	4826      	ldr	r0, [pc, #152]	; (8008b68 <_svfiprintf_r+0x1f0>)
 8008ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ad4:	2206      	movs	r2, #6
 8008ad6:	f7f7 fb83 	bl	80001e0 <memchr>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d038      	beq.n	8008b50 <_svfiprintf_r+0x1d8>
 8008ade:	4b23      	ldr	r3, [pc, #140]	; (8008b6c <_svfiprintf_r+0x1f4>)
 8008ae0:	bb1b      	cbnz	r3, 8008b2a <_svfiprintf_r+0x1b2>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	3307      	adds	r3, #7
 8008ae6:	f023 0307 	bic.w	r3, r3, #7
 8008aea:	3308      	adds	r3, #8
 8008aec:	9303      	str	r3, [sp, #12]
 8008aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af0:	4433      	add	r3, r6
 8008af2:	9309      	str	r3, [sp, #36]	; 0x24
 8008af4:	e767      	b.n	80089c6 <_svfiprintf_r+0x4e>
 8008af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008afa:	460c      	mov	r4, r1
 8008afc:	2001      	movs	r0, #1
 8008afe:	e7a5      	b.n	8008a4c <_svfiprintf_r+0xd4>
 8008b00:	2300      	movs	r3, #0
 8008b02:	3401      	adds	r4, #1
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	4619      	mov	r1, r3
 8008b08:	f04f 0c0a 	mov.w	ip, #10
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b12:	3a30      	subs	r2, #48	; 0x30
 8008b14:	2a09      	cmp	r2, #9
 8008b16:	d903      	bls.n	8008b20 <_svfiprintf_r+0x1a8>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0c5      	beq.n	8008aa8 <_svfiprintf_r+0x130>
 8008b1c:	9105      	str	r1, [sp, #20]
 8008b1e:	e7c3      	b.n	8008aa8 <_svfiprintf_r+0x130>
 8008b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b24:	4604      	mov	r4, r0
 8008b26:	2301      	movs	r3, #1
 8008b28:	e7f0      	b.n	8008b0c <_svfiprintf_r+0x194>
 8008b2a:	ab03      	add	r3, sp, #12
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	462a      	mov	r2, r5
 8008b30:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <_svfiprintf_r+0x1f8>)
 8008b32:	a904      	add	r1, sp, #16
 8008b34:	4638      	mov	r0, r7
 8008b36:	f3af 8000 	nop.w
 8008b3a:	1c42      	adds	r2, r0, #1
 8008b3c:	4606      	mov	r6, r0
 8008b3e:	d1d6      	bne.n	8008aee <_svfiprintf_r+0x176>
 8008b40:	89ab      	ldrh	r3, [r5, #12]
 8008b42:	065b      	lsls	r3, r3, #25
 8008b44:	f53f af2c 	bmi.w	80089a0 <_svfiprintf_r+0x28>
 8008b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b4a:	b01d      	add	sp, #116	; 0x74
 8008b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b50:	ab03      	add	r3, sp, #12
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	462a      	mov	r2, r5
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <_svfiprintf_r+0x1f8>)
 8008b58:	a904      	add	r1, sp, #16
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	f000 f87a 	bl	8008c54 <_printf_i>
 8008b60:	e7eb      	b.n	8008b3a <_svfiprintf_r+0x1c2>
 8008b62:	bf00      	nop
 8008b64:	0800906c 	.word	0x0800906c
 8008b68:	08009076 	.word	0x08009076
 8008b6c:	00000000 	.word	0x00000000
 8008b70:	080088c1 	.word	0x080088c1
 8008b74:	08009072 	.word	0x08009072

08008b78 <_printf_common>:
 8008b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	4699      	mov	r9, r3
 8008b80:	688a      	ldr	r2, [r1, #8]
 8008b82:	690b      	ldr	r3, [r1, #16]
 8008b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	bfb8      	it	lt
 8008b8c:	4613      	movlt	r3, r2
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b94:	4607      	mov	r7, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	b10a      	cbz	r2, 8008b9e <_printf_common+0x26>
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	6033      	str	r3, [r6, #0]
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	0699      	lsls	r1, r3, #26
 8008ba2:	bf42      	ittt	mi
 8008ba4:	6833      	ldrmi	r3, [r6, #0]
 8008ba6:	3302      	addmi	r3, #2
 8008ba8:	6033      	strmi	r3, [r6, #0]
 8008baa:	6825      	ldr	r5, [r4, #0]
 8008bac:	f015 0506 	ands.w	r5, r5, #6
 8008bb0:	d106      	bne.n	8008bc0 <_printf_common+0x48>
 8008bb2:	f104 0a19 	add.w	sl, r4, #25
 8008bb6:	68e3      	ldr	r3, [r4, #12]
 8008bb8:	6832      	ldr	r2, [r6, #0]
 8008bba:	1a9b      	subs	r3, r3, r2
 8008bbc:	42ab      	cmp	r3, r5
 8008bbe:	dc26      	bgt.n	8008c0e <_printf_common+0x96>
 8008bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bc4:	1e13      	subs	r3, r2, #0
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	2301      	movne	r3, #1
 8008bcc:	0692      	lsls	r2, r2, #26
 8008bce:	d42b      	bmi.n	8008c28 <_printf_common+0xb0>
 8008bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	47c0      	blx	r8
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d01e      	beq.n	8008c1c <_printf_common+0xa4>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	68e5      	ldr	r5, [r4, #12]
 8008be2:	6832      	ldr	r2, [r6, #0]
 8008be4:	f003 0306 	and.w	r3, r3, #6
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	bf08      	it	eq
 8008bec:	1aad      	subeq	r5, r5, r2
 8008bee:	68a3      	ldr	r3, [r4, #8]
 8008bf0:	6922      	ldr	r2, [r4, #16]
 8008bf2:	bf0c      	ite	eq
 8008bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bf8:	2500      	movne	r5, #0
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	bfc4      	itt	gt
 8008bfe:	1a9b      	subgt	r3, r3, r2
 8008c00:	18ed      	addgt	r5, r5, r3
 8008c02:	2600      	movs	r6, #0
 8008c04:	341a      	adds	r4, #26
 8008c06:	42b5      	cmp	r5, r6
 8008c08:	d11a      	bne.n	8008c40 <_printf_common+0xc8>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e008      	b.n	8008c20 <_printf_common+0xa8>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4652      	mov	r2, sl
 8008c12:	4649      	mov	r1, r9
 8008c14:	4638      	mov	r0, r7
 8008c16:	47c0      	blx	r8
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d103      	bne.n	8008c24 <_printf_common+0xac>
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c24:	3501      	adds	r5, #1
 8008c26:	e7c6      	b.n	8008bb6 <_printf_common+0x3e>
 8008c28:	18e1      	adds	r1, r4, r3
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	2030      	movs	r0, #48	; 0x30
 8008c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c32:	4422      	add	r2, r4
 8008c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c3c:	3302      	adds	r3, #2
 8008c3e:	e7c7      	b.n	8008bd0 <_printf_common+0x58>
 8008c40:	2301      	movs	r3, #1
 8008c42:	4622      	mov	r2, r4
 8008c44:	4649      	mov	r1, r9
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d0e6      	beq.n	8008c1c <_printf_common+0xa4>
 8008c4e:	3601      	adds	r6, #1
 8008c50:	e7d9      	b.n	8008c06 <_printf_common+0x8e>
	...

08008c54 <_printf_i>:
 8008c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	460c      	mov	r4, r1
 8008c5a:	4691      	mov	r9, r2
 8008c5c:	7e27      	ldrb	r7, [r4, #24]
 8008c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c60:	2f78      	cmp	r7, #120	; 0x78
 8008c62:	4680      	mov	r8, r0
 8008c64:	469a      	mov	sl, r3
 8008c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c6a:	d807      	bhi.n	8008c7c <_printf_i+0x28>
 8008c6c:	2f62      	cmp	r7, #98	; 0x62
 8008c6e:	d80a      	bhi.n	8008c86 <_printf_i+0x32>
 8008c70:	2f00      	cmp	r7, #0
 8008c72:	f000 80d8 	beq.w	8008e26 <_printf_i+0x1d2>
 8008c76:	2f58      	cmp	r7, #88	; 0x58
 8008c78:	f000 80a3 	beq.w	8008dc2 <_printf_i+0x16e>
 8008c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c84:	e03a      	b.n	8008cfc <_printf_i+0xa8>
 8008c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c8a:	2b15      	cmp	r3, #21
 8008c8c:	d8f6      	bhi.n	8008c7c <_printf_i+0x28>
 8008c8e:	a001      	add	r0, pc, #4	; (adr r0, 8008c94 <_printf_i+0x40>)
 8008c90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c94:	08008ced 	.word	0x08008ced
 8008c98:	08008d01 	.word	0x08008d01
 8008c9c:	08008c7d 	.word	0x08008c7d
 8008ca0:	08008c7d 	.word	0x08008c7d
 8008ca4:	08008c7d 	.word	0x08008c7d
 8008ca8:	08008c7d 	.word	0x08008c7d
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008c7d 	.word	0x08008c7d
 8008cb4:	08008c7d 	.word	0x08008c7d
 8008cb8:	08008c7d 	.word	0x08008c7d
 8008cbc:	08008c7d 	.word	0x08008c7d
 8008cc0:	08008e0d 	.word	0x08008e0d
 8008cc4:	08008d31 	.word	0x08008d31
 8008cc8:	08008def 	.word	0x08008def
 8008ccc:	08008c7d 	.word	0x08008c7d
 8008cd0:	08008c7d 	.word	0x08008c7d
 8008cd4:	08008e2f 	.word	0x08008e2f
 8008cd8:	08008c7d 	.word	0x08008c7d
 8008cdc:	08008d31 	.word	0x08008d31
 8008ce0:	08008c7d 	.word	0x08008c7d
 8008ce4:	08008c7d 	.word	0x08008c7d
 8008ce8:	08008df7 	.word	0x08008df7
 8008cec:	680b      	ldr	r3, [r1, #0]
 8008cee:	1d1a      	adds	r2, r3, #4
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	600a      	str	r2, [r1, #0]
 8008cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e0a3      	b.n	8008e48 <_printf_i+0x1f4>
 8008d00:	6825      	ldr	r5, [r4, #0]
 8008d02:	6808      	ldr	r0, [r1, #0]
 8008d04:	062e      	lsls	r6, r5, #24
 8008d06:	f100 0304 	add.w	r3, r0, #4
 8008d0a:	d50a      	bpl.n	8008d22 <_printf_i+0xce>
 8008d0c:	6805      	ldr	r5, [r0, #0]
 8008d0e:	600b      	str	r3, [r1, #0]
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	da03      	bge.n	8008d1c <_printf_i+0xc8>
 8008d14:	232d      	movs	r3, #45	; 0x2d
 8008d16:	426d      	negs	r5, r5
 8008d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d1c:	485e      	ldr	r0, [pc, #376]	; (8008e98 <_printf_i+0x244>)
 8008d1e:	230a      	movs	r3, #10
 8008d20:	e019      	b.n	8008d56 <_printf_i+0x102>
 8008d22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d26:	6805      	ldr	r5, [r0, #0]
 8008d28:	600b      	str	r3, [r1, #0]
 8008d2a:	bf18      	it	ne
 8008d2c:	b22d      	sxthne	r5, r5
 8008d2e:	e7ef      	b.n	8008d10 <_printf_i+0xbc>
 8008d30:	680b      	ldr	r3, [r1, #0]
 8008d32:	6825      	ldr	r5, [r4, #0]
 8008d34:	1d18      	adds	r0, r3, #4
 8008d36:	6008      	str	r0, [r1, #0]
 8008d38:	0628      	lsls	r0, r5, #24
 8008d3a:	d501      	bpl.n	8008d40 <_printf_i+0xec>
 8008d3c:	681d      	ldr	r5, [r3, #0]
 8008d3e:	e002      	b.n	8008d46 <_printf_i+0xf2>
 8008d40:	0669      	lsls	r1, r5, #25
 8008d42:	d5fb      	bpl.n	8008d3c <_printf_i+0xe8>
 8008d44:	881d      	ldrh	r5, [r3, #0]
 8008d46:	4854      	ldr	r0, [pc, #336]	; (8008e98 <_printf_i+0x244>)
 8008d48:	2f6f      	cmp	r7, #111	; 0x6f
 8008d4a:	bf0c      	ite	eq
 8008d4c:	2308      	moveq	r3, #8
 8008d4e:	230a      	movne	r3, #10
 8008d50:	2100      	movs	r1, #0
 8008d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d56:	6866      	ldr	r6, [r4, #4]
 8008d58:	60a6      	str	r6, [r4, #8]
 8008d5a:	2e00      	cmp	r6, #0
 8008d5c:	bfa2      	ittt	ge
 8008d5e:	6821      	ldrge	r1, [r4, #0]
 8008d60:	f021 0104 	bicge.w	r1, r1, #4
 8008d64:	6021      	strge	r1, [r4, #0]
 8008d66:	b90d      	cbnz	r5, 8008d6c <_printf_i+0x118>
 8008d68:	2e00      	cmp	r6, #0
 8008d6a:	d04d      	beq.n	8008e08 <_printf_i+0x1b4>
 8008d6c:	4616      	mov	r6, r2
 8008d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d72:	fb03 5711 	mls	r7, r3, r1, r5
 8008d76:	5dc7      	ldrb	r7, [r0, r7]
 8008d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d7c:	462f      	mov	r7, r5
 8008d7e:	42bb      	cmp	r3, r7
 8008d80:	460d      	mov	r5, r1
 8008d82:	d9f4      	bls.n	8008d6e <_printf_i+0x11a>
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	d10b      	bne.n	8008da0 <_printf_i+0x14c>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	07df      	lsls	r7, r3, #31
 8008d8c:	d508      	bpl.n	8008da0 <_printf_i+0x14c>
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	6861      	ldr	r1, [r4, #4]
 8008d92:	4299      	cmp	r1, r3
 8008d94:	bfde      	ittt	le
 8008d96:	2330      	movle	r3, #48	; 0x30
 8008d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008da0:	1b92      	subs	r2, r2, r6
 8008da2:	6122      	str	r2, [r4, #16]
 8008da4:	f8cd a000 	str.w	sl, [sp]
 8008da8:	464b      	mov	r3, r9
 8008daa:	aa03      	add	r2, sp, #12
 8008dac:	4621      	mov	r1, r4
 8008dae:	4640      	mov	r0, r8
 8008db0:	f7ff fee2 	bl	8008b78 <_printf_common>
 8008db4:	3001      	adds	r0, #1
 8008db6:	d14c      	bne.n	8008e52 <_printf_i+0x1fe>
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbc:	b004      	add	sp, #16
 8008dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc2:	4835      	ldr	r0, [pc, #212]	; (8008e98 <_printf_i+0x244>)
 8008dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	680e      	ldr	r6, [r1, #0]
 8008dcc:	061f      	lsls	r7, r3, #24
 8008dce:	f856 5b04 	ldr.w	r5, [r6], #4
 8008dd2:	600e      	str	r6, [r1, #0]
 8008dd4:	d514      	bpl.n	8008e00 <_printf_i+0x1ac>
 8008dd6:	07d9      	lsls	r1, r3, #31
 8008dd8:	bf44      	itt	mi
 8008dda:	f043 0320 	orrmi.w	r3, r3, #32
 8008dde:	6023      	strmi	r3, [r4, #0]
 8008de0:	b91d      	cbnz	r5, 8008dea <_printf_i+0x196>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	f023 0320 	bic.w	r3, r3, #32
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	2310      	movs	r3, #16
 8008dec:	e7b0      	b.n	8008d50 <_printf_i+0xfc>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	f043 0320 	orr.w	r3, r3, #32
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	2378      	movs	r3, #120	; 0x78
 8008df8:	4828      	ldr	r0, [pc, #160]	; (8008e9c <_printf_i+0x248>)
 8008dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dfe:	e7e3      	b.n	8008dc8 <_printf_i+0x174>
 8008e00:	065e      	lsls	r6, r3, #25
 8008e02:	bf48      	it	mi
 8008e04:	b2ad      	uxthmi	r5, r5
 8008e06:	e7e6      	b.n	8008dd6 <_printf_i+0x182>
 8008e08:	4616      	mov	r6, r2
 8008e0a:	e7bb      	b.n	8008d84 <_printf_i+0x130>
 8008e0c:	680b      	ldr	r3, [r1, #0]
 8008e0e:	6826      	ldr	r6, [r4, #0]
 8008e10:	6960      	ldr	r0, [r4, #20]
 8008e12:	1d1d      	adds	r5, r3, #4
 8008e14:	600d      	str	r5, [r1, #0]
 8008e16:	0635      	lsls	r5, r6, #24
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	d501      	bpl.n	8008e20 <_printf_i+0x1cc>
 8008e1c:	6018      	str	r0, [r3, #0]
 8008e1e:	e002      	b.n	8008e26 <_printf_i+0x1d2>
 8008e20:	0671      	lsls	r1, r6, #25
 8008e22:	d5fb      	bpl.n	8008e1c <_printf_i+0x1c8>
 8008e24:	8018      	strh	r0, [r3, #0]
 8008e26:	2300      	movs	r3, #0
 8008e28:	6123      	str	r3, [r4, #16]
 8008e2a:	4616      	mov	r6, r2
 8008e2c:	e7ba      	b.n	8008da4 <_printf_i+0x150>
 8008e2e:	680b      	ldr	r3, [r1, #0]
 8008e30:	1d1a      	adds	r2, r3, #4
 8008e32:	600a      	str	r2, [r1, #0]
 8008e34:	681e      	ldr	r6, [r3, #0]
 8008e36:	6862      	ldr	r2, [r4, #4]
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7f7 f9d0 	bl	80001e0 <memchr>
 8008e40:	b108      	cbz	r0, 8008e46 <_printf_i+0x1f2>
 8008e42:	1b80      	subs	r0, r0, r6
 8008e44:	6060      	str	r0, [r4, #4]
 8008e46:	6863      	ldr	r3, [r4, #4]
 8008e48:	6123      	str	r3, [r4, #16]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e50:	e7a8      	b.n	8008da4 <_printf_i+0x150>
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	4632      	mov	r2, r6
 8008e56:	4649      	mov	r1, r9
 8008e58:	4640      	mov	r0, r8
 8008e5a:	47d0      	blx	sl
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d0ab      	beq.n	8008db8 <_printf_i+0x164>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	079b      	lsls	r3, r3, #30
 8008e64:	d413      	bmi.n	8008e8e <_printf_i+0x23a>
 8008e66:	68e0      	ldr	r0, [r4, #12]
 8008e68:	9b03      	ldr	r3, [sp, #12]
 8008e6a:	4298      	cmp	r0, r3
 8008e6c:	bfb8      	it	lt
 8008e6e:	4618      	movlt	r0, r3
 8008e70:	e7a4      	b.n	8008dbc <_printf_i+0x168>
 8008e72:	2301      	movs	r3, #1
 8008e74:	4632      	mov	r2, r6
 8008e76:	4649      	mov	r1, r9
 8008e78:	4640      	mov	r0, r8
 8008e7a:	47d0      	blx	sl
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d09b      	beq.n	8008db8 <_printf_i+0x164>
 8008e80:	3501      	adds	r5, #1
 8008e82:	68e3      	ldr	r3, [r4, #12]
 8008e84:	9903      	ldr	r1, [sp, #12]
 8008e86:	1a5b      	subs	r3, r3, r1
 8008e88:	42ab      	cmp	r3, r5
 8008e8a:	dcf2      	bgt.n	8008e72 <_printf_i+0x21e>
 8008e8c:	e7eb      	b.n	8008e66 <_printf_i+0x212>
 8008e8e:	2500      	movs	r5, #0
 8008e90:	f104 0619 	add.w	r6, r4, #25
 8008e94:	e7f5      	b.n	8008e82 <_printf_i+0x22e>
 8008e96:	bf00      	nop
 8008e98:	0800907d 	.word	0x0800907d
 8008e9c:	0800908e 	.word	0x0800908e

08008ea0 <__retarget_lock_acquire_recursive>:
 8008ea0:	4770      	bx	lr

08008ea2 <__retarget_lock_release_recursive>:
 8008ea2:	4770      	bx	lr

08008ea4 <memcpy>:
 8008ea4:	440a      	add	r2, r1
 8008ea6:	4291      	cmp	r1, r2
 8008ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008eac:	d100      	bne.n	8008eb0 <memcpy+0xc>
 8008eae:	4770      	bx	lr
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eba:	4291      	cmp	r1, r2
 8008ebc:	d1f9      	bne.n	8008eb2 <memcpy+0xe>
 8008ebe:	bd10      	pop	{r4, pc}

08008ec0 <memmove>:
 8008ec0:	4288      	cmp	r0, r1
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	eb01 0402 	add.w	r4, r1, r2
 8008ec8:	d902      	bls.n	8008ed0 <memmove+0x10>
 8008eca:	4284      	cmp	r4, r0
 8008ecc:	4623      	mov	r3, r4
 8008ece:	d807      	bhi.n	8008ee0 <memmove+0x20>
 8008ed0:	1e43      	subs	r3, r0, #1
 8008ed2:	42a1      	cmp	r1, r4
 8008ed4:	d008      	beq.n	8008ee8 <memmove+0x28>
 8008ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ede:	e7f8      	b.n	8008ed2 <memmove+0x12>
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	428a      	cmp	r2, r1
 8008ee6:	d100      	bne.n	8008eea <memmove+0x2a>
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ef2:	e7f7      	b.n	8008ee4 <memmove+0x24>

08008ef4 <_realloc_r>:
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	4614      	mov	r4, r2
 8008efa:	460e      	mov	r6, r1
 8008efc:	b921      	cbnz	r1, 8008f08 <_realloc_r+0x14>
 8008efe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f02:	4611      	mov	r1, r2
 8008f04:	f7ff bc46 	b.w	8008794 <_malloc_r>
 8008f08:	b922      	cbnz	r2, 8008f14 <_realloc_r+0x20>
 8008f0a:	f7ff fbf3 	bl	80086f4 <_free_r>
 8008f0e:	4625      	mov	r5, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f14:	f000 f814 	bl	8008f40 <_malloc_usable_size_r>
 8008f18:	42a0      	cmp	r0, r4
 8008f1a:	d20f      	bcs.n	8008f3c <_realloc_r+0x48>
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f7ff fc38 	bl	8008794 <_malloc_r>
 8008f24:	4605      	mov	r5, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d0f2      	beq.n	8008f10 <_realloc_r+0x1c>
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	f7ff ffb9 	bl	8008ea4 <memcpy>
 8008f32:	4631      	mov	r1, r6
 8008f34:	4638      	mov	r0, r7
 8008f36:	f7ff fbdd 	bl	80086f4 <_free_r>
 8008f3a:	e7e9      	b.n	8008f10 <_realloc_r+0x1c>
 8008f3c:	4635      	mov	r5, r6
 8008f3e:	e7e7      	b.n	8008f10 <_realloc_r+0x1c>

08008f40 <_malloc_usable_size_r>:
 8008f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f44:	1f18      	subs	r0, r3, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bfbc      	itt	lt
 8008f4a:	580b      	ldrlt	r3, [r1, r0]
 8008f4c:	18c0      	addlt	r0, r0, r3
 8008f4e:	4770      	bx	lr

08008f50 <_init>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	bf00      	nop
 8008f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f56:	bc08      	pop	{r3}
 8008f58:	469e      	mov	lr, r3
 8008f5a:	4770      	bx	lr

08008f5c <_fini>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr
