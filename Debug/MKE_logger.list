
MKE_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008694  08008694  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800869c  0800869c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800869c  0800869c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080086a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000090  08008734  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08008734  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002013b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046bb  00000000  00000000  000401fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  000448b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  000458d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aaf4  00000000  00000000  00046730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001826a  00000000  00000000  00061224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc7d  00000000  00000000  0007948e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010710b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000439c  00000000  00000000  00107160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800855c 	.word	0x0800855c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800855c 	.word	0x0800855c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_CRC_Init+0x20>)
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <MX_CRC_Init+0x24>)
 8000580:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CRC_Init+0x20>)
 8000584:	f000 fd71 	bl	800106a <HAL_CRC_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800058e:	f000 f921 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000bc 	.word	0x200000bc
 800059c:	40023000 	.word	0x40023000

080005a0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <HAL_CRC_MspInit+0x3c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d10d      	bne.n	80005ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_CRC_MspInit+0x40>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <HAL_CRC_MspInit+0x40>)
 80005bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_CRC_MspInit+0x40>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023000 	.word	0x40023000
 80005e0:	40023800 	.word	0x40023800

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <MX_GPIO_Init+0xe0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <MX_GPIO_Init+0xe0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <MX_GPIO_Init+0xe0>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_GPIO_Init+0xe0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4815      	ldr	r0, [pc, #84]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000672:	f000 fe9b 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <MX_GPIO_Init+0xe8>)
 800067c:	f000 fe96 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800069a:	f000 fd03 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 800069e:	2310      	movs	r3, #16
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_GPIO_Init+0xe8>)
 80006b6:	f000 fcf5 	bl	80010a4 <HAL_GPIO_Init>

}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020000 	.word	0x40020000

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fb22 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f80e 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ff82 	bl	80005e4 <MX_GPIO_Init>
  MX_CRC_Init();
 80006e0:	f7ff ff4a 	bl	8000578 <MX_CRC_Init>
  MX_SPI1_Init();
 80006e4:	f000 f93a 	bl	800095c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80006e8:	f000 fa5c 	bl	8000ba4 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80006ec:	f006 ffcc 	bl	8007688 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006f0:	f006 fff0 	bl	80076d4 <MX_USB_HOST_Process>
 80006f4:	e7fc      	b.n	80006f0 <main+0x20>
	...

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f007 faf2 	bl	8007cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <SystemClock_Config+0xd4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a29      	ldr	r2, [pc, #164]	; (80007cc <SystemClock_Config+0xd4>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <SystemClock_Config+0xd4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <SystemClock_Config+0xd8>)
 8000746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <SystemClock_Config+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000758:	2303      	movs	r3, #3
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000762:	2301      	movs	r3, #1
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2310      	movs	r3, #16
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000774:	230f      	movs	r3, #15
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000778:	2390      	movs	r3, #144	; 0x90
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000780:	2305      	movs	r3, #5
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fa4d 	bl	8002c28 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000794:	f000 f81e 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fcb0 	bl	8003118 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007be:	f000 f809 	bl	80007d4 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <USBH_HID_EventCallback>:
					};//MKE Test with consumer

uint8_t Button1, Button2, Button3;

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_MOUSE)  // if the HID is Mouse
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f005 f893 	bl	8005914 <USBH_HID_GetDeviceType>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	f040 8099 	bne.w	8000928 <USBH_HID_EventCallback+0x148>
		{
			HID_MOUSE_Info_TypeDef *Mouse_Info;
			Mouse_Info = USBH_HID_GetMouseInfo(phost);  // Get the info
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f005 fa0e 	bl	8005c18 <USBH_HID_GetMouseInfo>
 80007fc:	60f8      	str	r0, [r7, #12]
			int X_Val = Mouse_Info->x;  // get the x value
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	617b      	str	r3, [r7, #20]
			int Y_Val = Mouse_Info->y;  // get the y value
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	785b      	ldrb	r3, [r3, #1]
 8000808:	613b      	str	r3, [r7, #16]
			if (X_Val > 127) X_Val -= 255;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	2b7f      	cmp	r3, #127	; 0x7f
 800080e:	dd02      	ble.n	8000816 <USBH_HID_EventCallback+0x36>
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3bff      	subs	r3, #255	; 0xff
 8000814:	617b      	str	r3, [r7, #20]
			if (Y_Val > 127) Y_Val -= 255;
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	2b7f      	cmp	r3, #127	; 0x7f
 800081a:	dd02      	ble.n	8000822 <USBH_HID_EventCallback+0x42>
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	3bff      	subs	r3, #255	; 0xff
 8000820:	613b      	str	r3, [r7, #16]


			int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_Val, Y_Val, \
					                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	789b      	ldrb	r3, [r3, #2]
			int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_Val, Y_Val, \
 8000826:	461a      	mov	r2, r3
					                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	78db      	ldrb	r3, [r3, #3]
			int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_Val, Y_Val, \
 800082c:	4619      	mov	r1, r3
					                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	791b      	ldrb	r3, [r3, #4]
			int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_Val, Y_Val, \
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	9101      	str	r1, [sp, #4]
 8000836:	9200      	str	r2, [sp, #0]
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	493c      	ldr	r1, [pc, #240]	; (8000930 <USBH_HID_EventCallback+0x150>)
 800083e:	483d      	ldr	r0, [pc, #244]	; (8000934 <USBH_HID_EventCallback+0x154>)
 8000840:	f007 fb18 	bl	8007e74 <siprintf>
 8000844:	60b8      	str	r0, [r7, #8]
			HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	483b      	ldr	r0, [pc, #236]	; (8000938 <USBH_HID_EventCallback+0x158>)
 800084c:	f000 fdc7 	bl	80013de <HAL_GPIO_TogglePin>

			spi_transmit_buffer.target=0b00001001;
 8000850:	4b3a      	ldr	r3, [pc, #232]	; (800093c <USBH_HID_EventCallback+0x15c>)
 8000852:	2209      	movs	r2, #9
 8000854:	701a      	strb	r2, [r3, #0]

			spi_transmit_buffer.mouse_x=X_Val;
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	b25a      	sxtb	r2, r3
 800085a:	4b38      	ldr	r3, [pc, #224]	; (800093c <USBH_HID_EventCallback+0x15c>)
 800085c:	709a      	strb	r2, [r3, #2]
			spi_transmit_buffer.mouse_y=Y_Val;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	b25a      	sxtb	r2, r3
 8000862:	4b36      	ldr	r3, [pc, #216]	; (800093c <USBH_HID_EventCallback+0x15c>)
 8000864:	70da      	strb	r2, [r3, #3]

			Button1 =  Mouse_Info->buttons[0];
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	789a      	ldrb	r2, [r3, #2]
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <USBH_HID_EventCallback+0x160>)
 800086c:	701a      	strb	r2, [r3, #0]
			Button2 =  Mouse_Info->buttons[1];
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	78da      	ldrb	r2, [r3, #3]
 8000872:	4b34      	ldr	r3, [pc, #208]	; (8000944 <USBH_HID_EventCallback+0x164>)
 8000874:	701a      	strb	r2, [r3, #0]
			Button3 =  Mouse_Info->buttons[2];
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	791a      	ldrb	r2, [r3, #4]
 800087a:	4b33      	ldr	r3, [pc, #204]	; (8000948 <USBH_HID_EventCallback+0x168>)
 800087c:	701a      	strb	r2, [r3, #0]

			if (Mouse_Info->buttons[0]==1)  spi_transmit_buffer.button=spi_transmit_buffer.button|0b00000001;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	789b      	ldrb	r3, [r3, #2]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d107      	bne.n	8000896 <USBH_HID_EventCallback+0xb6>
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <USBH_HID_EventCallback+0x15c>)
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b2a      	ldr	r3, [pc, #168]	; (800093c <USBH_HID_EventCallback+0x15c>)
 8000892:	705a      	strb	r2, [r3, #1]
 8000894:	e006      	b.n	80008a4 <USBH_HID_EventCallback+0xc4>
			else spi_transmit_buffer.button=spi_transmit_buffer.button&0b11111110;
 8000896:	4b29      	ldr	r3, [pc, #164]	; (800093c <USBH_HID_EventCallback+0x15c>)
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	f023 0301 	bic.w	r3, r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008a2:	705a      	strb	r2, [r3, #1]

			if (Mouse_Info->buttons[1]==1)  spi_transmit_buffer.button=spi_transmit_buffer.button|0b00000010;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	78db      	ldrb	r3, [r3, #3]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d107      	bne.n	80008bc <USBH_HID_EventCallback+0xdc>
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008b8:	705a      	strb	r2, [r3, #1]
 80008ba:	e006      	b.n	80008ca <USBH_HID_EventCallback+0xea>
			else spi_transmit_buffer.button=spi_transmit_buffer.button&0b11111101;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	f023 0302 	bic.w	r3, r3, #2
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008c8:	705a      	strb	r2, [r3, #1]

			if (Mouse_Info->buttons[2]==1)  spi_transmit_buffer.button=spi_transmit_buffer.button|0b00000100;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d107      	bne.n	80008e2 <USBH_HID_EventCallback+0x102>
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008de:	705a      	strb	r2, [r3, #1]
 80008e0:	e006      	b.n	80008f0 <USBH_HID_EventCallback+0x110>
			else spi_transmit_buffer.button=spi_transmit_buffer.button&0b11111011;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	f023 0304 	bic.w	r3, r3, #4
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <USBH_HID_EventCallback+0x15c>)
 80008ee:	705a      	strb	r2, [r3, #1]


			HAL_UART_Transmit(&huart1, (uint8_t *) Uart_Buf, len, 100);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	2364      	movs	r3, #100	; 0x64
 80008f6:	490f      	ldr	r1, [pc, #60]	; (8000934 <USBH_HID_EventCallback+0x154>)
 80008f8:	4814      	ldr	r0, [pc, #80]	; (800094c <USBH_HID_EventCallback+0x16c>)
 80008fa:	f003 f998 	bl	8003c2e <HAL_UART_Transmit>
			HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	4813      	ldr	r0, [pc, #76]	; (8000950 <USBH_HID_EventCallback+0x170>)
 8000904:	f000 fd52 	bl	80013ac <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fa79 	bl	8000e00 <HAL_Delay>
			HAL_SPI_TransmitReceive(&hspi1,&spi_transmit_buffer,&spi_receive_buffer,sizeof(spi_transmit_buffer),10);
 800090e:	230a      	movs	r3, #10
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2311      	movs	r3, #17
 8000914:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <USBH_HID_EventCallback+0x174>)
 8000916:	4909      	ldr	r1, [pc, #36]	; (800093c <USBH_HID_EventCallback+0x15c>)
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <USBH_HID_EventCallback+0x178>)
 800091a:	f002 fe5e 	bl	80035da <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2110      	movs	r1, #16
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <USBH_HID_EventCallback+0x170>)
 8000924:	f000 fd42 	bl	80013ac <HAL_GPIO_WritePin>
		}
}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08008574 	.word	0x08008574
 8000934:	200000ec 	.word	0x200000ec
 8000938:	40020800 	.word	0x40020800
 800093c:	200000c4 	.word	0x200000c4
 8000940:	200000ea 	.word	0x200000ea
 8000944:	200000e9 	.word	0x200000e9
 8000948:	200000eb 	.word	0x200000eb
 800094c:	200001a8 	.word	0x200001a8
 8000950:	40020000 	.word	0x40020000
 8000954:	200000d8 	.word	0x200000d8
 8000958:	20000150 	.word	0x20000150

0800095c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000962:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <MX_SPI1_Init+0x6c>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800096c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_SPI1_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000990:	2230      	movs	r2, #48	; 0x30
 8000992:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_SPI1_Init+0x68>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_SPI1_Init+0x68>)
 80009a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI1_Init+0x68>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_SPI1_Init+0x68>)
 80009b0:	f002 fd82 	bl	80034b8 <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80009ba:	f7ff ff0b 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000150 	.word	0x20000150
 80009c8:	40013000 	.word	0x40013000

080009cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_SPI_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12b      	bne.n	8000a46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_SPI_MspInit+0x88>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_SPI_MspInit+0x88>)
 80009f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_SPI_MspInit+0x88>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_SPI_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_SPI_MspInit+0x88>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_SPI_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a26:	23e0      	movs	r3, #224	; 0xe0
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a36:	2305      	movs	r3, #5
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_SPI_MspInit+0x8c>)
 8000a42:	f000 fb2f 	bl	80010a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40013000 	.word	0x40013000
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f962 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <OTG_FS_IRQHandler+0x10>)
 8000b06:	f000 feef 	bl	80018e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000600 	.word	0x20000600

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f007 f89a 	bl	8007c7c <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20010000 	.word	0x20010000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	200000ac 	.word	0x200000ac
 8000b7c:	20000918 	.word	0x20000918

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_USART1_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	f002 ffda 	bl	8003b94 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f7ff fdf5 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001a8 	.word	0x200001a8
 8000bf4:	40011000 	.word	0x40011000

08000bf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_UART_MspInit+0xc0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d14a      	bne.n	8000cb0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_UART_MspInit+0xc4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c80:	2307      	movs	r3, #7
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <HAL_UART_MspInit+0xc8>)
 8000c8c:	f000 fa0a 	bl	80010a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c90:	2340      	movs	r3, #64	; 0x40
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <HAL_UART_MspInit+0xcc>)
 8000cac:	f000 f9fa 	bl	80010a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40011000 	.word	0x40011000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce4:	4c0b      	ldr	r4, [pc, #44]	; (8000d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf2:	f7ff ff45 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f006 ffc7 	bl	8007c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fce9 	bl	80006d0 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d0c:	080086a4 	.word	0x080086a4
  ldr r2, =_sbss
 8000d10:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d14:	20000914 	.word	0x20000914

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f94f 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fe84 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f967 	bl	8001052 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f92f 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	200001ec 	.word	0x200001ec

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200001ec 	.word	0x200001ec

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e00e      	b.n	800109a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	795b      	ldrb	r3, [r3, #5]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d105      	bne.n	8001092 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fa87 	bl	80005a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e159      	b.n	8001374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8148 	bne.w	800136e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d130      	bne.n	8001158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a2 	beq.w	800136e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b57      	ldr	r3, [pc, #348]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b54      	ldr	r3, [pc, #336]	; (800138c <HAL_GPIO_Init+0x2e8>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_GPIO_Init+0x2f0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x202>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <HAL_GPIO_Init+0x2f4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x1fe>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a47      	ldr	r2, [pc, #284]	; (800139c <HAL_GPIO_Init+0x2f8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x1fa>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x1f6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_GPIO_Init+0x300>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x1f2>
 8001292:	2304      	movs	r3, #4
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 8001296:	2307      	movs	r3, #7
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133e:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001368:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f aea2 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	400b      	ands	r3, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001414:	b08f      	sub	sp, #60	; 0x3c
 8001416:	af0a      	add	r7, sp, #40	; 0x28
 8001418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e054      	b.n	80014ce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f006 f980 	bl	8007744 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2203      	movs	r2, #3
 8001448:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f002 ff1e 	bl	80042a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	687e      	ldr	r6, [r7, #4]
 8001470:	466d      	mov	r5, sp
 8001472:	f106 0410 	add.w	r4, r6, #16
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001482:	e885 0003 	stmia.w	r5, {r0, r1}
 8001486:	1d33      	adds	r3, r6, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f002 fe98 	bl	80041c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f002 ff15 	bl	80042c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	687e      	ldr	r6, [r7, #4]
 80014a4:	466d      	mov	r5, sp
 80014a6:	f106 0410 	add.w	r4, r6, #16
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ba:	1d33      	adds	r3, r6, #4
 80014bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f003 f89e 	bl	8004600 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014d6:	b590      	push	{r4, r7, lr}
 80014d8:	b089      	sub	sp, #36	; 0x24
 80014da:	af04      	add	r7, sp, #16
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	4608      	mov	r0, r1
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	4603      	mov	r3, r0
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70bb      	strb	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_HCD_HC_Init+0x28>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e076      	b.n	80015ec <HAL_HCD_HC_Init+0x116>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	333d      	adds	r3, #61	; 0x3d
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	212c      	movs	r1, #44	; 0x2c
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	3338      	adds	r3, #56	; 0x38
 8001526:	787a      	ldrb	r2, [r7, #1]
 8001528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	212c      	movs	r1, #44	; 0x2c
 8001530:	fb01 f303 	mul.w	r3, r1, r3
 8001534:	4413      	add	r3, r2
 8001536:	3340      	adds	r3, #64	; 0x40
 8001538:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800153a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	212c      	movs	r1, #44	; 0x2c
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	4413      	add	r3, r2
 8001548:	3339      	adds	r3, #57	; 0x39
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	212c      	movs	r1, #44	; 0x2c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	333f      	adds	r3, #63	; 0x3f
 800155c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	78ba      	ldrb	r2, [r7, #2]
 8001566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156a:	b2d0      	uxtb	r0, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	333a      	adds	r3, #58	; 0x3a
 8001578:	4602      	mov	r2, r0
 800157a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800157c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da09      	bge.n	8001598 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	212c      	movs	r1, #44	; 0x2c
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	333b      	adds	r3, #59	; 0x3b
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e008      	b.n	80015aa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	333b      	adds	r3, #59	; 0x3b
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	333c      	adds	r3, #60	; 0x3c
 80015b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015bc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	787c      	ldrb	r4, [r7, #1]
 80015c4:	78ba      	ldrb	r2, [r7, #2]
 80015c6:	78f9      	ldrb	r1, [r7, #3]
 80015c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4623      	mov	r3, r4
 80015da:	f003 f997 	bl	800490c <USB_HC_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_HCD_HC_Halt+0x1e>
 800160e:	2302      	movs	r3, #2
 8001610:	e00f      	b.n	8001632 <HAL_HCD_HC_Halt+0x3e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fbe7 	bl	8004df6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	70fb      	strb	r3, [r7, #3]
 800164e:	460b      	mov	r3, r1
 8001650:	70bb      	strb	r3, [r7, #2]
 8001652:	4613      	mov	r3, r2
 8001654:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	333b      	adds	r3, #59	; 0x3b
 8001664:	78ba      	ldrb	r2, [r7, #2]
 8001666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	212c      	movs	r1, #44	; 0x2c
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	333f      	adds	r3, #63	; 0x3f
 8001676:	787a      	ldrb	r2, [r7, #1]
 8001678:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800167a:	7c3b      	ldrb	r3, [r7, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d112      	bne.n	80016a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	3342      	adds	r3, #66	; 0x42
 800168e:	2203      	movs	r2, #3
 8001690:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	333d      	adds	r3, #61	; 0x3d
 80016a0:	7f3a      	ldrb	r2, [r7, #28]
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e008      	b.n	80016b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3342      	adds	r3, #66	; 0x42
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	f200 80c6 	bhi.w	800184c <HAL_HCD_HC_SubmitRequest+0x210>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	08001839 	.word	0x08001839
 80016d0:	0800173d 	.word	0x0800173d
 80016d4:	080017bb 	.word	0x080017bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016d8:	7c3b      	ldrb	r3, [r7, #16]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	f040 80b8 	bne.w	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
 80016e0:	78bb      	ldrb	r3, [r7, #2]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 80b4 	bne.w	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016e8:	8b3b      	ldrh	r3, [r7, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d108      	bne.n	8001700 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3355      	adds	r3, #85	; 0x55
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	3355      	adds	r3, #85	; 0x55
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	212c      	movs	r1, #44	; 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3342      	adds	r3, #66	; 0x42
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001726:	e093      	b.n	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	3342      	adds	r3, #66	; 0x42
 8001736:	2202      	movs	r2, #2
 8001738:	701a      	strb	r2, [r3, #0]
      break;
 800173a:	e089      	b.n	8001850 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d11d      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3355      	adds	r3, #85	; 0x55
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	3342      	adds	r3, #66	; 0x42
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001768:	e073      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
      break;
 800177c:	e069      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	212c      	movs	r1, #44	; 0x2c
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	3354      	adds	r3, #84	; 0x54
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3342      	adds	r3, #66	; 0x42
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
      break;
 80017a4:	e055      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	212c      	movs	r1, #44	; 0x2c
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	3342      	adds	r3, #66	; 0x42
 80017b4:	2202      	movs	r2, #2
 80017b6:	701a      	strb	r2, [r3, #0]
      break;
 80017b8:	e04b      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ba:	78bb      	ldrb	r3, [r7, #2]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d11d      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	3355      	adds	r3, #85	; 0x55
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3342      	adds	r3, #66	; 0x42
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017e6:	e034      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3342      	adds	r3, #66	; 0x42
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
      break;
 80017fa:	e02a      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3354      	adds	r3, #84	; 0x54
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3342      	adds	r3, #66	; 0x42
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
      break;
 8001822:	e016      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3342      	adds	r3, #66	; 0x42
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	e00c      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3342      	adds	r3, #66	; 0x42
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
      break;
 800184a:	e002      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800184c:	bf00      	nop
 800184e:	e000      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001850:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3344      	adds	r3, #68	; 0x44
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	8b3a      	ldrh	r2, [r7, #24]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	202c      	movs	r0, #44	; 0x2c
 800186c:	fb00 f303 	mul.w	r3, r0, r3
 8001870:	440b      	add	r3, r1
 8001872:	334c      	adds	r3, #76	; 0x4c
 8001874:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3360      	adds	r3, #96	; 0x60
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3350      	adds	r3, #80	; 0x50
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3339      	adds	r3, #57	; 0x39
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3361      	adds	r3, #97	; 0x61
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	222c      	movs	r2, #44	; 0x2c
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	3338      	adds	r3, #56	; 0x38
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	18d1      	adds	r1, r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	f003 f93a 	bl	8004b50 <USB_HC_StartXfer>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop

080018e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fe3b 	bl	800457a <USB_GetMode>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	f040 80f6 	bne.w	8001af8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fe1f 	bl	8004554 <USB_ReadInterrupts>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80ec 	beq.w	8001af6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fe16 	bl	8004554 <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001932:	d104      	bne.n	800193e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800193c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fe06 	bl	8004554 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001952:	d104      	bne.n	800195e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800195c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fdf6 	bl	8004554 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001972:	d104      	bne.n	800197e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800197c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fde6 	bl	8004554 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d103      	bne.n	800199a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fdd8 	bl	8004554 <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ae:	d11c      	bne.n	80019ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019ca:	2110      	movs	r1, #16
 80019cc:	6938      	ldr	r0, [r7, #16]
 80019ce:	f002 fcc7 	bl	8004360 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019d2:	6938      	ldr	r0, [r7, #16]
 80019d4:	f002 fcf8 	bl	80043c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fece 	bl	8004780 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f005 ff1d 	bl	8007824 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fdb0 	bl	8004554 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fe:	d102      	bne.n	8001a06 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f001 f89e 	bl	8002b42 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fda2 	bl	8004554 <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d106      	bne.n	8001a28 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f005 fee6 	bl	80077ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2208      	movs	r2, #8
 8001a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fd91 	bl	8004554 <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d101      	bne.n	8001a40 <HAL_HCD_IRQHandler+0x158>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_HCD_IRQHandler+0x15a>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0210 	bic.w	r2, r2, #16
 8001a54:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 ffa1 	bl	800299e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0210 	orr.w	r2, r2, #16
 8001a6a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fd6f 	bl	8004554 <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a80:	d13a      	bne.n	8001af8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f9a4 	bl	8004dd4 <USB_HC_ReadInterrupt>
 8001a8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e025      	b.n	8001ae0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d018      	beq.n	8001ada <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abe:	d106      	bne.n	8001ace <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8ab 	bl	8001c22 <HCD_HC_IN_IRQHandler>
 8001acc:	e005      	b.n	8001ada <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fbf9 	bl	80022cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3d4      	bcc.n	8001a94 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	e000      	b.n	8001af8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001af6:	bf00      	nop
    }
  }
}
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_HCD_Start+0x16>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e013      	b.n	8001b3c <HAL_HCD_Start+0x3e>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 fe90 	bl	8004848 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fba8 	bl	8004282 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_HCD_Stop+0x16>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e00d      	b.n	8001b76 <HAL_HCD_Stop+0x32>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fa7e 	bl	8005068 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fe32 	bl	80047f4 <USB_ResetPort>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3360      	adds	r3, #96	; 0x60
 8001bb4:	781b      	ldrb	r3, [r3, #0]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3350      	adds	r3, #80	; 0x50
 8001bdc:	681b      	ldr	r3, [r3, #0]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fe76 	bl	80048e8 <USB_GetCurrentFrame>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fe51 	bl	80048ba <USB_GetHostSpeed>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d11a      	bne.n	8001c88 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2304      	movs	r3, #4
 8001c62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3361      	adds	r3, #97	; 0x61
 8001c72:	2206      	movs	r2, #6
 8001c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 f8b8 	bl	8004df6 <USB_HC_Halt>
 8001c86:	e0af      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c9e:	d11b      	bne.n	8001cd8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cac:	461a      	mov	r2, r3
 8001cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3361      	adds	r3, #97	; 0x61
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 f890 	bl	8004df6 <USB_HC_Halt>
 8001cd6:	e087      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d109      	bne.n	8001d02 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	6093      	str	r3, [r2, #8]
 8001d00:	e072      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d11a      	bne.n	8001d4e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	461a      	mov	r2, r3
 8001d26:	2308      	movs	r3, #8
 8001d28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3361      	adds	r3, #97	; 0x61
 8001d38:	2205      	movs	r2, #5
 8001d3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 f855 	bl	8004df6 <USB_HC_Halt>
 8001d4c:	e04c      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	d11b      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	461a      	mov	r2, r3
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	3361      	adds	r3, #97	; 0x61
 8001d88:	2208      	movs	r2, #8
 8001d8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 f82d 	bl	8004df6 <USB_HC_Halt>
 8001d9c:	e024      	b.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d119      	bne.n	8001de8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3361      	adds	r3, #97	; 0x61
 8001dd4:	2206      	movs	r2, #6
 8001dd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f807 	bl	8004df6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfe:	d112      	bne.n	8001e26 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fff3 	bl	8004df6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e22:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e24:	e24e      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 80df 	bne.w	8001ffc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d019      	beq.n	8001e7a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3348      	adds	r3, #72	; 0x48
 8001e54:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	0159      	lsls	r1, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e68:	1ad2      	subs	r2, r2, r3
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	202c      	movs	r0, #44	; 0x2c
 8001e70:	fb00 f303 	mul.w	r3, r0, r3
 8001e74:	440b      	add	r3, r1
 8001e76:	3350      	adds	r3, #80	; 0x50
 8001e78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3361      	adds	r3, #97	; 0x61
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	335c      	adds	r3, #92	; 0x5c
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2301      	movs	r3, #1
 8001eae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	212c      	movs	r1, #44	; 0x2c
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	333f      	adds	r3, #63	; 0x3f
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	333f      	adds	r3, #63	; 0x3f
 8001ed2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d111      	bne.n	8001efc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 ff87 	bl	8004df6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	6093      	str	r3, [r2, #8]
 8001efa:	e03a      	b.n	8001f72 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	333f      	adds	r3, #63	; 0x3f
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d009      	beq.n	8001f24 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	333f      	adds	r3, #63	; 0x3f
 8001f1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d126      	bne.n	8001f72 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	0151      	lsls	r1, r2, #5
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	440a      	add	r2, r1
 8001f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f42:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	212c      	movs	r1, #44	; 0x2c
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	3360      	adds	r3, #96	; 0x60
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	b2d9      	uxtb	r1, r3
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	202c      	movs	r0, #44	; 0x2c
 8001f60:	fb00 f303 	mul.w	r3, r0, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3360      	adds	r3, #96	; 0x60
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f005 fc67 	bl	8007840 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d12b      	bne.n	8001fd2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3348      	adds	r3, #72	; 0x48
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	202c      	movs	r0, #44	; 0x2c
 8001f90:	fb00 f202 	mul.w	r2, r0, r2
 8001f94:	440a      	add	r2, r1
 8001f96:	3240      	adds	r2, #64	; 0x40
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 818e 	beq.w	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3354      	adds	r3, #84	; 0x54
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2d8      	uxtb	r0, r3
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3354      	adds	r3, #84	; 0x54
 8001fcc:	4602      	mov	r2, r0
 8001fce:	701a      	strb	r2, [r3, #0]
}
 8001fd0:	e178      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	3354      	adds	r3, #84	; 0x54
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f083 0301 	eor.w	r3, r3, #1
 8001fe6:	b2d8      	uxtb	r0, r3
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3354      	adds	r3, #84	; 0x54
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	701a      	strb	r2, [r3, #0]
}
 8001ffa:	e163      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	f040 80f6 	bne.w	8002200 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3361      	adds	r3, #97	; 0x61
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d109      	bne.n	800203c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3360      	adds	r3, #96	; 0x60
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e0c9      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3361      	adds	r3, #97	; 0x61
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d109      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3360      	adds	r3, #96	; 0x60
 800205e:	2205      	movs	r2, #5
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e0b5      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3361      	adds	r3, #97	; 0x61
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b06      	cmp	r3, #6
 8002076:	d009      	beq.n	800208c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3361      	adds	r3, #97	; 0x61
 8002086:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002088:	2b08      	cmp	r3, #8
 800208a:	d150      	bne.n	800212e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	335c      	adds	r3, #92	; 0x5c
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	202c      	movs	r0, #44	; 0x2c
 80020a4:	fb00 f303 	mul.w	r3, r0, r3
 80020a8:	440b      	add	r3, r1
 80020aa:	335c      	adds	r3, #92	; 0x5c
 80020ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	335c      	adds	r3, #92	; 0x5c
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d912      	bls.n	80020e8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3360      	adds	r3, #96	; 0x60
 80020e2:	2204      	movs	r2, #4
 80020e4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020e6:	e073      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002110:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002118:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800212c:	e050      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3361      	adds	r3, #97	; 0x61
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d122      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800216a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002172:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e023      	b.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3361      	adds	r3, #97	; 0x61
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b07      	cmp	r3, #7
 800219a:	d119      	bne.n	80021d0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	335c      	adds	r3, #92	; 0x5c
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	202c      	movs	r0, #44	; 0x2c
 80021b4:	fb00 f303 	mul.w	r3, r0, r3
 80021b8:	440b      	add	r3, r1
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3360      	adds	r3, #96	; 0x60
 80021cc:	2204      	movs	r2, #4
 80021ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	2302      	movs	r3, #2
 80021e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	b2d9      	uxtb	r1, r3
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	202c      	movs	r0, #44	; 0x2c
 80021ec:	fb00 f303 	mul.w	r3, r0, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3360      	adds	r3, #96	; 0x60
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f005 fb21 	bl	8007840 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021fe:	e061      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b10      	cmp	r3, #16
 8002214:	d156      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	333f      	adds	r3, #63	; 0x3f
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d111      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	335c      	adds	r3, #92	; 0x5c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f002 fdd5 	bl	8004df6 <USB_HC_Halt>
 800224c:	e031      	b.n	80022b2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	333f      	adds	r3, #63	; 0x3f
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	333f      	adds	r3, #63	; 0x3f
 8002270:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002272:	2b02      	cmp	r3, #2
 8002274:	d11d      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	335c      	adds	r3, #92	; 0x5c
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d110      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3361      	adds	r3, #97	; 0x61
 800229e:	2203      	movs	r2, #3
 80022a0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 fda2 	bl	8004df6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	461a      	mov	r2, r3
 80022c0:	2310      	movs	r3, #16
 80022c2:	6093      	str	r3, [r2, #8]
}
 80022c4:	bf00      	nop
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11a      	bne.n	8002332 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	461a      	mov	r2, r3
 800230a:	2304      	movs	r3, #4
 800230c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3361      	adds	r3, #97	; 0x61
 800231c:	2206      	movs	r2, #6
 800231e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fd63 	bl	8004df6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002330:	e331      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b20      	cmp	r3, #32
 8002346:	d12e      	bne.n	80023a6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2320      	movs	r3, #32
 8002358:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	333d      	adds	r3, #61	; 0x3d
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	f040 8313 	bne.w	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	333d      	adds	r3, #61	; 0x3d
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3360      	adds	r3, #96	; 0x60
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fd29 	bl	8004df6 <USB_HC_Halt>
}
 80023a4:	e2f7      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023bc:	d112      	bne.n	80023e4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	461a      	mov	r2, r3
 80023cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fd0a 	bl	8004df6 <USB_HC_Halt>
}
 80023e2:	e2d8      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d140      	bne.n	800247c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	335c      	adds	r3, #92	; 0x5c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d111      	bne.n	8002446 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	333d      	adds	r3, #61	; 0x3d
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	461a      	mov	r2, r3
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	2301      	movs	r3, #1
 8002456:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3361      	adds	r3, #97	; 0x61
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fcbe 	bl	8004df6 <USB_HC_Halt>
}
 800247a:	e28c      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d12c      	bne.n	80024ec <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3361      	adds	r3, #97	; 0x61
 80024a0:	2204      	movs	r2, #4
 80024a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	333d      	adds	r3, #61	; 0x3d
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	335c      	adds	r3, #92	; 0x5c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fc8f 	bl	8004df6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2340      	movs	r3, #64	; 0x40
 80024e8:	6093      	str	r3, [r2, #8]
}
 80024ea:	e254      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11a      	bne.n	8002538 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	461a      	mov	r2, r3
 8002510:	2308      	movs	r3, #8
 8002512:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3361      	adds	r3, #97	; 0x61
 8002522:	2205      	movs	r2, #5
 8002524:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fc60 	bl	8004df6 <USB_HC_Halt>
}
 8002536:	e22e      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b10      	cmp	r3, #16
 800254c:	d140      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3361      	adds	r3, #97	; 0x61
 800256e:	2203      	movs	r2, #3
 8002570:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	333d      	adds	r3, #61	; 0x3d
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d112      	bne.n	80025ac <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	333c      	adds	r3, #60	; 0x3c
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d108      	bne.n	80025ac <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	333d      	adds	r3, #61	; 0x3d
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fc1d 	bl	8004df6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	2310      	movs	r3, #16
 80025cc:	6093      	str	r3, [r2, #8]
}
 80025ce:	e1e2      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b80      	cmp	r3, #128	; 0x80
 80025e4:	d164      	bne.n	80026b0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d111      	bne.n	8002612 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3361      	adds	r3, #97	; 0x61
 80025fc:	2206      	movs	r2, #6
 80025fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f002 fbf3 	bl	8004df6 <USB_HC_Halt>
 8002610:	e044      	b.n	800269c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	202c      	movs	r0, #44	; 0x2c
 800262a:	fb00 f303 	mul.w	r3, r0, r3
 800262e:	440b      	add	r3, r1
 8002630:	335c      	adds	r3, #92	; 0x5c
 8002632:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	335c      	adds	r3, #92	; 0x5c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d920      	bls.n	800268a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	335c      	adds	r3, #92	; 0x5c
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3360      	adds	r3, #96	; 0x60
 8002668:	2204      	movs	r2, #4
 800266a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	b2d9      	uxtb	r1, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	202c      	movs	r0, #44	; 0x2c
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	4413      	add	r3, r2
 800267c:	3360      	adds	r3, #96	; 0x60
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f005 f8dc 	bl	8007840 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002688:	e008      	b.n	800269c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3360      	adds	r3, #96	; 0x60
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	6093      	str	r3, [r2, #8]
}
 80026ae:	e172      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c6:	d11b      	bne.n	8002700 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3361      	adds	r3, #97	; 0x61
 80026d6:	2208      	movs	r2, #8
 80026d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 fb86 	bl	8004df6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fc:	6093      	str	r3, [r2, #8]
}
 80026fe:	e14a      	b.n	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	f040 813f 	bne.w	8002996 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3361      	adds	r3, #97	; 0x61
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d17d      	bne.n	8002828 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3360      	adds	r3, #96	; 0x60
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	333f      	adds	r3, #63	; 0x3f
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d00a      	beq.n	8002768 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	333f      	adds	r3, #63	; 0x3f
 8002760:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002762:	2b03      	cmp	r3, #3
 8002764:	f040 8100 	bne.w	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d113      	bne.n	8002798 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3355      	adds	r3, #85	; 0x55
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2d8      	uxtb	r0, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3355      	adds	r3, #85	; 0x55
 8002794:	4602      	mov	r2, r0
 8002796:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b01      	cmp	r3, #1
 800279e:	f040 80e3 	bne.w	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	334c      	adds	r3, #76	; 0x4c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d8 	beq.w	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	334c      	adds	r3, #76	; 0x4c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	202c      	movs	r0, #44	; 0x2c
 80027ce:	fb00 f202 	mul.w	r2, r0, r2
 80027d2:	440a      	add	r2, r1
 80027d4:	3240      	adds	r2, #64	; 0x40
 80027d6:	8812      	ldrh	r2, [r2, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	3b01      	subs	r3, #1
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	202c      	movs	r0, #44	; 0x2c
 80027e2:	fb00 f202 	mul.w	r2, r0, r2
 80027e6:	440a      	add	r2, r1
 80027e8:	3240      	adds	r2, #64	; 0x40
 80027ea:	8812      	ldrh	r2, [r2, #0]
 80027ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80b5 	beq.w	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3355      	adds	r3, #85	; 0x55
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2d8      	uxtb	r0, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3355      	adds	r3, #85	; 0x55
 8002822:	4602      	mov	r2, r0
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e09f      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3361      	adds	r3, #97	; 0x61
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d109      	bne.n	8002850 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3360      	adds	r3, #96	; 0x60
 800284a:	2202      	movs	r2, #2
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e08b      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3361      	adds	r3, #97	; 0x61
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d109      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3360      	adds	r3, #96	; 0x60
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e077      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3361      	adds	r3, #97	; 0x61
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d109      	bne.n	80028a0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3360      	adds	r3, #96	; 0x60
 800289a:	2205      	movs	r2, #5
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e063      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d009      	beq.n	80028c8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3361      	adds	r3, #97	; 0x61
 80028c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d14f      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	335c      	adds	r3, #92	; 0x5c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	202c      	movs	r0, #44	; 0x2c
 80028e0:	fb00 f303 	mul.w	r3, r0, r3
 80028e4:	440b      	add	r3, r1
 80028e6:	335c      	adds	r3, #92	; 0x5c
 80028e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	335c      	adds	r3, #92	; 0x5c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d912      	bls.n	8002924 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	335c      	adds	r3, #92	; 0x5c
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3360      	adds	r3, #96	; 0x60
 800291e:	2204      	movs	r2, #4
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e021      	b.n	8002968 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3360      	adds	r3, #96	; 0x60
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800294c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002954:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	461a      	mov	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	461a      	mov	r2, r3
 8002976:	2302      	movs	r3, #2
 8002978:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	b2d9      	uxtb	r1, r3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	202c      	movs	r0, #44	; 0x2c
 8002984:	fb00 f303 	mul.w	r3, r0, r3
 8002988:	4413      	add	r3, r2
 800298a:	3360      	adds	r3, #96	; 0x60
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f004 ff55 	bl	8007840 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002996:	bf00      	nop
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b08a      	sub	sp, #40	; 0x28
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	0c5b      	lsrs	r3, r3, #17
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d004      	beq.n	80029e4 <HCD_RXQLVL_IRQHandler+0x46>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	f000 80a9 	beq.w	8002b34 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029e2:	e0aa      	b.n	8002b3a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80a6 	beq.w	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3344      	adds	r3, #68	; 0x44
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 809b 	beq.w	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3350      	adds	r3, #80	; 0x50
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	441a      	add	r2, r3
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	202c      	movs	r0, #44	; 0x2c
 8002a1c:	fb00 f303 	mul.w	r3, r0, r3
 8002a20:	440b      	add	r3, r1
 8002a22:	334c      	adds	r3, #76	; 0x4c
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d87a      	bhi.n	8002b20 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3344      	adds	r3, #68	; 0x44
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	b292      	uxth	r2, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f001 fd2e 	bl	80044a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3344      	adds	r3, #68	; 0x44
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	202c      	movs	r0, #44	; 0x2c
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	440b      	add	r3, r1
 8002a68:	3344      	adds	r3, #68	; 0x44
 8002a6a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3350      	adds	r3, #80	; 0x50
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	441a      	add	r2, r3
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	202c      	movs	r0, #44	; 0x2c
 8002a86:	fb00 f303 	mul.w	r3, r0, r3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3350      	adds	r3, #80	; 0x50
 8002a8e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	0cdb      	lsrs	r3, r3, #19
 8002aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3340      	adds	r3, #64	; 0x40
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d13c      	bne.n	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d039      	beq.n	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ada:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3354      	adds	r3, #84	; 0x54
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2d8      	uxtb	r0, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3354      	adds	r3, #84	; 0x54
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	701a      	strb	r2, [r3, #0]
      break;
 8002b1e:	e00b      	b.n	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3360      	adds	r3, #96	; 0x60
 8002b2e:	2204      	movs	r2, #4
 8002b30:	701a      	strb	r2, [r3, #0]
      break;
 8002b32:	e001      	b.n	8002b38 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b34:	bf00      	nop
 8002b36:	e000      	b.n	8002b3a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b38:	bf00      	nop
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b6e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d10b      	bne.n	8002b92 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f004 fe3f 	bl	8007808 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d132      	bne.n	8002c02 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d126      	bne.n	8002bfc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d113      	bne.n	8002bde <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc0:	d106      	bne.n	8002bd0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fdd9 	bl	8004780 <USB_InitFSLSPClkSel>
 8002bce:	e011      	b.n	8002bf4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 fdd2 	bl	8004780 <USB_InitFSLSPClkSel>
 8002bdc:	e00a      	b.n	8002bf4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d106      	bne.n	8002bf4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bec:	461a      	mov	r2, r3
 8002bee:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bf2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f004 fe31 	bl	800785c <HAL_HCD_PortEnabled_Callback>
 8002bfa:	e002      	b.n	8002c02 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f004 fe3b 	bl	8007878 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d103      	bne.n	8002c14 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f043 0320 	orr.w	r3, r3, #32
 8002c12:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e264      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d075      	beq.n	8002d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c46:	4ba3      	ldr	r3, [pc, #652]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c52:	4ba0      	ldr	r3, [pc, #640]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d112      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5e:	4b9d      	ldr	r3, [pc, #628]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	4b99      	ldr	r3, [pc, #612]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d05b      	beq.n	8002d30 <HAL_RCC_OscConfig+0x108>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d157      	bne.n	8002d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e23f      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCC_OscConfig+0x74>
 8002c8e:	4b91      	ldr	r3, [pc, #580]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a90      	ldr	r2, [pc, #576]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e01d      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x98>
 8002ca6:	4b8b      	ldr	r3, [pc, #556]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a8a      	ldr	r2, [pc, #552]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a87      	ldr	r2, [pc, #540]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb0>
 8002cc0:	4b84      	ldr	r3, [pc, #528]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a83      	ldr	r2, [pc, #524]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b81      	ldr	r3, [pc, #516]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a80      	ldr	r2, [pc, #512]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f882 	bl	8000de8 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe f87e 	bl	8000de8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e204      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b76      	ldr	r3, [pc, #472]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xc0>
 8002d06:	e014      	b.n	8002d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe f86e 	bl	8000de8 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fe f86a 	bl	8000de8 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1f0      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	4b6c      	ldr	r3, [pc, #432]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0xe8>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d063      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3e:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4a:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d11c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d56:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x152>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1c4      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b56      	ldr	r3, [pc, #344]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4952      	ldr	r1, [pc, #328]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	e03a      	b.n	8002e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d98:	4b4f      	ldr	r3, [pc, #316]	; (8002ed8 <HAL_RCC_OscConfig+0x2b0>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7fe f823 	bl	8000de8 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da6:	f7fe f81f 	bl	8000de8 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1a5      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4940      	ldr	r1, [pc, #256]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <HAL_RCC_OscConfig+0x2b0>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe f802 	bl	8000de8 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de8:	f7fd fffe 	bl	8000de8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e184      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d030      	beq.n	8002e74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_RCC_OscConfig+0x2b4>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fd ffe2 	bl	8000de8 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e28:	f7fd ffde 	bl	8000de8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e164      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x200>
 8002e46:	e015      	b.n	8002e74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_OscConfig+0x2b4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7fd ffcb 	bl	8000de8 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e56:	f7fd ffc7 	bl	8000de8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e14d      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80a0 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x2b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d121      	bne.n	8002f02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_RCC_OscConfig+0x2b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <HAL_RCC_OscConfig+0x2b8>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7fd ff8d 	bl	8000de8 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e011      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2ce>
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	42470000 	.word	0x42470000
 8002edc:	42470e80 	.word	0x42470e80
 8002ee0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee4:	f7fd ff80 	bl	8000de8 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e106      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef6:	4b85      	ldr	r3, [pc, #532]	; (800310c <HAL_RCC_OscConfig+0x4e4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d106      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2f0>
 8002f0a:	4b81      	ldr	r3, [pc, #516]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a80      	ldr	r2, [pc, #512]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
 8002f16:	e01c      	b.n	8002f52 <HAL_RCC_OscConfig+0x32a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x312>
 8002f20:	4b7b      	ldr	r3, [pc, #492]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a7a      	ldr	r2, [pc, #488]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	4b78      	ldr	r3, [pc, #480]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a77      	ldr	r2, [pc, #476]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
 8002f38:	e00b      	b.n	8002f52 <HAL_RCC_OscConfig+0x32a>
 8002f3a:	4b75      	ldr	r3, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a74      	ldr	r2, [pc, #464]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	4b72      	ldr	r3, [pc, #456]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a71      	ldr	r2, [pc, #452]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fd ff45 	bl	8000de8 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd ff41 	bl	8000de8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0c5      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	4b65      	ldr	r3, [pc, #404]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ee      	beq.n	8002f62 <HAL_RCC_OscConfig+0x33a>
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7fd ff2f 	bl	8000de8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fd ff2b 	bl	8000de8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0af      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	4b5a      	ldr	r3, [pc, #360]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b56      	ldr	r3, [pc, #344]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	4a55      	ldr	r2, [pc, #340]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 809b 	beq.w	8003102 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fcc:	4b50      	ldr	r3, [pc, #320]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d05c      	beq.n	8003092 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d141      	bne.n	8003064 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fd feff 	bl	8000de8 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fd fefb 	bl	8000de8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e081      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003000:	4b43      	ldr	r3, [pc, #268]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	019b      	lsls	r3, r3, #6
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	3b01      	subs	r3, #1
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	061b      	lsls	r3, r3, #24
 8003030:	4937      	ldr	r1, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_RCC_OscConfig+0x4ec>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fd fed4 	bl	8000de8 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7fd fed0 	bl	8000de8 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e056      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x41c>
 8003062:	e04e      	b.n	8003102 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <HAL_RCC_OscConfig+0x4ec>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fd febd 	bl	8000de8 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003072:	f7fd feb9 	bl	8000de8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e03f      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003084:	4b22      	ldr	r3, [pc, #136]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x44a>
 8003090:	e037      	b.n	8003102 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e032      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_RCC_OscConfig+0x4e8>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d028      	beq.n	80030fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d121      	bne.n	80030fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d11a      	bne.n	80030fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d111      	bne.n	80030fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	3b01      	subs	r3, #1
 80030e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40007000 	.word	0x40007000
 8003110:	40023800 	.word	0x40023800
 8003114:	42470060 	.word	0x42470060

08003118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cc      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d90c      	bls.n	8003154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800318e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e067      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4934      	ldr	r1, [pc, #208]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7fd fdee 	bl	8000de8 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fd fdea 	bl	8000de8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d20c      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329e:	f000 f821 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490a      	ldr	r1, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fd4e 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	080085a8 	.word	0x080085a8
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000004 	.word	0x20000004

080032e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ea:	2100      	movs	r1, #0
 80032ec:	6079      	str	r1, [r7, #4]
 80032ee:	2100      	movs	r1, #0
 80032f0:	60f9      	str	r1, [r7, #12]
 80032f2:	2100      	movs	r1, #0
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032f6:	2100      	movs	r1, #0
 80032f8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032fa:	4952      	ldr	r1, [pc, #328]	; (8003444 <HAL_RCC_GetSysClockFreq+0x160>)
 80032fc:	6889      	ldr	r1, [r1, #8]
 80032fe:	f001 010c 	and.w	r1, r1, #12
 8003302:	2908      	cmp	r1, #8
 8003304:	d00d      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x3e>
 8003306:	2908      	cmp	r1, #8
 8003308:	f200 8094 	bhi.w	8003434 <HAL_RCC_GetSysClockFreq+0x150>
 800330c:	2900      	cmp	r1, #0
 800330e:	d002      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x32>
 8003310:	2904      	cmp	r1, #4
 8003312:	d003      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x38>
 8003314:	e08e      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003316:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_GetSysClockFreq+0x164>)
 8003318:	60bb      	str	r3, [r7, #8]
       break;
 800331a:	e08e      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331c:	4b4b      	ldr	r3, [pc, #300]	; (800344c <HAL_RCC_GetSysClockFreq+0x168>)
 800331e:	60bb      	str	r3, [r7, #8]
      break;
 8003320:	e08b      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003322:	4948      	ldr	r1, [pc, #288]	; (8003444 <HAL_RCC_GetSysClockFreq+0x160>)
 8003324:	6849      	ldr	r1, [r1, #4]
 8003326:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800332a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332c:	4945      	ldr	r1, [pc, #276]	; (8003444 <HAL_RCC_GetSysClockFreq+0x160>)
 800332e:	6849      	ldr	r1, [r1, #4]
 8003330:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003334:	2900      	cmp	r1, #0
 8003336:	d024      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003338:	4942      	ldr	r1, [pc, #264]	; (8003444 <HAL_RCC_GetSysClockFreq+0x160>)
 800333a:	6849      	ldr	r1, [r1, #4]
 800333c:	0989      	lsrs	r1, r1, #6
 800333e:	4608      	mov	r0, r1
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003348:	f04f 0500 	mov.w	r5, #0
 800334c:	ea00 0204 	and.w	r2, r0, r4
 8003350:	ea01 0305 	and.w	r3, r1, r5
 8003354:	493d      	ldr	r1, [pc, #244]	; (800344c <HAL_RCC_GetSysClockFreq+0x168>)
 8003356:	fb01 f003 	mul.w	r0, r1, r3
 800335a:	2100      	movs	r1, #0
 800335c:	fb01 f102 	mul.w	r1, r1, r2
 8003360:	1844      	adds	r4, r0, r1
 8003362:	493a      	ldr	r1, [pc, #232]	; (800344c <HAL_RCC_GetSysClockFreq+0x168>)
 8003364:	fba2 0101 	umull	r0, r1, r2, r1
 8003368:	1863      	adds	r3, r4, r1
 800336a:	4619      	mov	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	461a      	mov	r2, r3
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f7fc ff84 	bl	8000280 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e04a      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003382:	4b30      	ldr	r3, [pc, #192]	; (8003444 <HAL_RCC_GetSysClockFreq+0x160>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	461a      	mov	r2, r3
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	ea02 0400 	and.w	r4, r2, r0
 800339a:	ea03 0501 	and.w	r5, r3, r1
 800339e:	4620      	mov	r0, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	014b      	lsls	r3, r1, #5
 80033ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033b0:	0142      	lsls	r2, r0, #5
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	1b00      	subs	r0, r0, r4
 80033b8:	eb61 0105 	sbc.w	r1, r1, r5
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	018b      	lsls	r3, r1, #6
 80033c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033ca:	0182      	lsls	r2, r0, #6
 80033cc:	1a12      	subs	r2, r2, r0
 80033ce:	eb63 0301 	sbc.w	r3, r3, r1
 80033d2:	f04f 0000 	mov.w	r0, #0
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	00d9      	lsls	r1, r3, #3
 80033dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033e0:	00d0      	lsls	r0, r2, #3
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	1912      	adds	r2, r2, r4
 80033e8:	eb45 0303 	adc.w	r3, r5, r3
 80033ec:	f04f 0000 	mov.w	r0, #0
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	0299      	lsls	r1, r3, #10
 80033f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033fa:	0290      	lsls	r0, r2, #10
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	461a      	mov	r2, r3
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	f7fc ff38 	bl	8000280 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4613      	mov	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_RCC_GetSysClockFreq+0x160>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	3301      	adds	r3, #1
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	60bb      	str	r3, [r7, #8]
      break;
 8003432:	e002      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_RCC_GetSysClockFreq+0x164>)
 8003436:	60bb      	str	r3, [r7, #8]
      break;
 8003438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343a:	68bb      	ldr	r3, [r7, #8]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bdb0      	pop	{r4, r5, r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	00f42400 	.word	0x00f42400
 800344c:	017d7840 	.word	0x017d7840

08003450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_RCC_GetHCLKFreq+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000000 	.word	0x20000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff0 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0a9b      	lsrs	r3, r3, #10
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	080085b8 	.word	0x080085b8

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffdc 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0b5b      	lsrs	r3, r3, #13
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	080085b8 	.word	0x080085b8

080034b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e083      	b.n	80035d2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d108      	bne.n	80034e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034da:	d009      	beq.n	80034f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
 80034e2:	e005      	b.n	80034f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fa61 	bl	80009cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003520:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	ea42 0103 	orr.w	r1, r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	f003 0104 	and.w	r1, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	f003 0210 	and.w	r2, r3, #16
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a4:	d105      	bne.n	80035b2 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b292      	uxth	r2, r2
 80035b0:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b08e      	sub	sp, #56	; 0x38
 80035de:	af02      	add	r7, sp, #8
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035ec:	2301      	movs	r3, #1
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x2a>
 8003600:	2302      	movs	r3, #2
 8003602:	e1f8      	b.n	80039f6 <HAL_SPI_TransmitReceive+0x41c>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360c:	f7fd fbec 	bl	8000de8 <HAL_GetTick>
 8003610:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800362a:	2b01      	cmp	r3, #1
 800362c:	d00f      	beq.n	800364e <HAL_SPI_TransmitReceive+0x74>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003634:	d107      	bne.n	8003646 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <HAL_SPI_TransmitReceive+0x6c>
 800363e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003642:	2b04      	cmp	r3, #4
 8003644:	d003      	beq.n	800364e <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8003646:	2302      	movs	r3, #2
 8003648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800364c:	e1c9      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x86>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x86>
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003666:	e1bc      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b04      	cmp	r3, #4
 8003672:	d003      	beq.n	800367c <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2205      	movs	r2, #5
 8003678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	887a      	ldrh	r2, [r7, #2]
 800369e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ba:	d10f      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036da:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d007      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003702:	f040 808b 	bne.w	800381c <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_SPI_TransmitReceive+0x13a>
 800370e:	8b7b      	ldrh	r3, [r7, #26]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d178      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003738:	e065      	b.n	8003806 <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d12d      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x1ca>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x1ca>
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d125      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	881a      	ldrh	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10c      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x1ca>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003792:	d107      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037a2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d119      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x20c>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d014      	beq.n	80037e6 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	b292      	uxth	r2, r2
 80037c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037e2:	2301      	movs	r3, #1
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037e6:	f7fd faff 	bl	8000de8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d807      	bhi.n	8003806 <HAL_SPI_TransmitReceive+0x22c>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d003      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003804:	e0ed      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d194      	bne.n	800373a <HAL_SPI_TransmitReceive+0x160>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d18f      	bne.n	800373a <HAL_SPI_TransmitReceive+0x160>
 800381a:	e08e      	b.n	800393a <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_SPI_TransmitReceive+0x250>
 8003824:	8b7b      	ldrh	r3, [r7, #26]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d17d      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003850:	e069      	b.n	8003926 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b02      	cmp	r3, #2
 800385e:	d12e      	bne.n	80038be <HAL_SPI_TransmitReceive+0x2e4>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d029      	beq.n	80038be <HAL_SPI_TransmitReceive+0x2e4>
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d126      	bne.n	80038be <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10c      	bne.n	80038be <HAL_SPI_TransmitReceive+0x2e4>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ac:	d107      	bne.n	80038be <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038bc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d119      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x326>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d014      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038fc:	2301      	movs	r3, #1
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003900:	f7fd fa72 	bl	8000de8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800390c:	429a      	cmp	r2, r3
 800390e:	d803      	bhi.n	8003918 <HAL_SPI_TransmitReceive+0x33e>
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d102      	bne.n	800391e <HAL_SPI_TransmitReceive+0x344>
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003924:	e05d      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d190      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x278>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d18b      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003942:	d119      	bne.n	8003978 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	2201      	movs	r2, #1
 800394c:	2101      	movs	r1, #1
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f856 	bl	8003a00 <SPI_WaitFlagStateUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	f043 0202 	orr.w	r2, r3, #2
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800396c:	e039      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8003976:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b10      	cmp	r3, #16
 8003984:	d10d      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0202 	orr.w	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800399a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f8b2 	bl	8003b10 <SPI_EndRxTxTransaction>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d006      	beq.n	80039c0 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039be:	e010      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	e000      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 80039e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3730      	adds	r7, #48	; 0x30
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a10:	f7fd f9ea 	bl	8000de8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a20:	f7fd f9e2 	bl	8000de8 <HAL_GetTick>
 8003a24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	015b      	lsls	r3, r3, #5
 8003a2c:	0d1b      	lsrs	r3, r3, #20
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a36:	e054      	b.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d050      	beq.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a40:	f7fd f9d2 	bl	8000de8 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d902      	bls.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d13d      	bne.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a6e:	d111      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a78:	d004      	beq.n	8003a84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a82:	d107      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9c:	d10f      	bne.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003abc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e017      	b.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	bf0c      	ite	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	2300      	movne	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d19b      	bne.n	8003a38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000000 	.word	0x20000000

08003b10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <SPI_EndRxTxTransaction+0x7c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <SPI_EndRxTxTransaction+0x80>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0d5b      	lsrs	r3, r3, #21
 8003b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d112      	bne.n	8003b62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2200      	movs	r2, #0
 8003b44:	2180      	movs	r1, #128	; 0x80
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff5a 	bl	8003a00 <SPI_WaitFlagStateUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e00f      	b.n	8003b82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d0f2      	beq.n	8003b62 <SPI_EndRxTxTransaction+0x52>
 8003b7c:	e000      	b.n	8003b80 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b7e:	bf00      	nop
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	165e9f81 	.word	0x165e9f81

08003b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e03f      	b.n	8003c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd f81c 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f929 	bl	8003e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08a      	sub	sp, #40	; 0x28
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d17c      	bne.n	8003d48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_UART_Transmit+0x2c>
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e075      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_UART_Transmit+0x3e>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e06e      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2221      	movs	r2, #33	; 0x21
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c82:	f7fd f8b1 	bl	8000de8 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d108      	bne.n	8003cb0 <HAL_UART_Transmit+0x82>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e003      	b.n	8003cb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cc0:	e02a      	b.n	8003d18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f840 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e036      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e007      	b.n	8003d0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	3301      	adds	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1cf      	bne.n	8003cc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2140      	movs	r1, #64	; 0x40
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f810 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e006      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b090      	sub	sp, #64	; 0x40
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	e050      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d04c      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d72:	f7fd f839 	bl	8000de8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d241      	bcs.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003da2:	637a      	str	r2, [r7, #52]	; 0x34
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e5      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd6:	623a      	str	r2, [r7, #32]
 8003dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	69f9      	ldr	r1, [r7, #28]
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e00f      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	bf0c      	ite	eq
 8003e16:	2301      	moveq	r3, #1
 8003e18:	2300      	movne	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d09f      	beq.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3740      	adds	r7, #64	; 0x40
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	b09f      	sub	sp, #124	; 0x7c
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e46:	68d9      	ldr	r1, [r3, #12]
 8003e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	ea40 0301 	orr.w	r3, r0, r1
 8003e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e74:	f021 010c 	bic.w	r1, r1, #12
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	6999      	ldr	r1, [r3, #24]
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	ea40 0301 	orr.w	r3, r0, r1
 8003e98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4bc5      	ldr	r3, [pc, #788]	; (80041b4 <UART_SetConfig+0x384>)
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d004      	beq.n	8003eae <UART_SetConfig+0x7e>
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4bc3      	ldr	r3, [pc, #780]	; (80041b8 <UART_SetConfig+0x388>)
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d103      	bne.n	8003eb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eae:	f7ff faef 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8003eb2:	6778      	str	r0, [r7, #116]	; 0x74
 8003eb4:	e002      	b.n	8003ebc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eb6:	f7ff fad7 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8003eba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	f040 80b6 	bne.w	8004034 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eca:	461c      	mov	r4, r3
 8003ecc:	f04f 0500 	mov.w	r5, #0
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	462b      	mov	r3, r5
 8003ed4:	1891      	adds	r1, r2, r2
 8003ed6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ed8:	415b      	adcs	r3, r3
 8003eda:	647b      	str	r3, [r7, #68]	; 0x44
 8003edc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ee0:	1912      	adds	r2, r2, r4
 8003ee2:	eb45 0303 	adc.w	r3, r5, r3
 8003ee6:	f04f 0000 	mov.w	r0, #0
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	00d9      	lsls	r1, r3, #3
 8003ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ef4:	00d0      	lsls	r0, r2, #3
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	1911      	adds	r1, r2, r4
 8003efc:	6639      	str	r1, [r7, #96]	; 0x60
 8003efe:	416b      	adcs	r3, r5
 8003f00:	667b      	str	r3, [r7, #100]	; 0x64
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	1891      	adds	r1, r2, r2
 8003f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f10:	415b      	adcs	r3, r3
 8003f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f1c:	f7fc f9b0 	bl	8000280 <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4ba5      	ldr	r3, [pc, #660]	; (80041bc <UART_SetConfig+0x38c>)
 8003f26:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	011e      	lsls	r6, r3, #4
 8003f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f30:	461c      	mov	r4, r3
 8003f32:	f04f 0500 	mov.w	r5, #0
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
 8003f42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f46:	1912      	adds	r2, r2, r4
 8003f48:	eb45 0303 	adc.w	r3, r5, r3
 8003f4c:	f04f 0000 	mov.w	r0, #0
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	00d9      	lsls	r1, r3, #3
 8003f56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f5a:	00d0      	lsls	r0, r2, #3
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	1911      	adds	r1, r2, r4
 8003f62:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f64:	416b      	adcs	r3, r5
 8003f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	1891      	adds	r1, r2, r2
 8003f74:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f76:	415b      	adcs	r3, r3
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f82:	f7fc f97d 	bl	8000280 <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4b8c      	ldr	r3, [pc, #560]	; (80041bc <UART_SetConfig+0x38c>)
 8003f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	2164      	movs	r1, #100	; 0x64
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	3332      	adds	r3, #50	; 0x32
 8003f9e:	4a87      	ldr	r2, [pc, #540]	; (80041bc <UART_SetConfig+0x38c>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fac:	441e      	add	r6, r3
 8003fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	1894      	adds	r4, r2, r2
 8003fbc:	623c      	str	r4, [r7, #32]
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fc6:	1812      	adds	r2, r2, r0
 8003fc8:	eb41 0303 	adc.w	r3, r1, r3
 8003fcc:	f04f 0400 	mov.w	r4, #0
 8003fd0:	f04f 0500 	mov.w	r5, #0
 8003fd4:	00dd      	lsls	r5, r3, #3
 8003fd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fda:	00d4      	lsls	r4, r2, #3
 8003fdc:	4622      	mov	r2, r4
 8003fde:	462b      	mov	r3, r5
 8003fe0:	1814      	adds	r4, r2, r0
 8003fe2:	653c      	str	r4, [r7, #80]	; 0x50
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	461a      	mov	r2, r3
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	1891      	adds	r1, r2, r2
 8003ff4:	61b9      	str	r1, [r7, #24]
 8003ff6:	415b      	adcs	r3, r3
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ffe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004002:	f7fc f93d 	bl	8000280 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4b6c      	ldr	r3, [pc, #432]	; (80041bc <UART_SetConfig+0x38c>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	2164      	movs	r1, #100	; 0x64
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	3332      	adds	r3, #50	; 0x32
 800401e:	4a67      	ldr	r2, [pc, #412]	; (80041bc <UART_SetConfig+0x38c>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	f003 0207 	and.w	r2, r3, #7
 800402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4432      	add	r2, r6
 8004030:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004032:	e0b9      	b.n	80041a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004036:	461c      	mov	r4, r3
 8004038:	f04f 0500 	mov.w	r5, #0
 800403c:	4622      	mov	r2, r4
 800403e:	462b      	mov	r3, r5
 8004040:	1891      	adds	r1, r2, r2
 8004042:	6139      	str	r1, [r7, #16]
 8004044:	415b      	adcs	r3, r3
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800404c:	1912      	adds	r2, r2, r4
 800404e:	eb45 0303 	adc.w	r3, r5, r3
 8004052:	f04f 0000 	mov.w	r0, #0
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	00d9      	lsls	r1, r3, #3
 800405c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004060:	00d0      	lsls	r0, r2, #3
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	eb12 0804 	adds.w	r8, r2, r4
 800406a:	eb43 0905 	adc.w	r9, r3, r5
 800406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4618      	mov	r0, r3
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	008b      	lsls	r3, r1, #2
 8004082:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004086:	0082      	lsls	r2, r0, #2
 8004088:	4640      	mov	r0, r8
 800408a:	4649      	mov	r1, r9
 800408c:	f7fc f8f8 	bl	8000280 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4b49      	ldr	r3, [pc, #292]	; (80041bc <UART_SetConfig+0x38c>)
 8004096:	fba3 2302 	umull	r2, r3, r3, r2
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	011e      	lsls	r6, r3, #4
 800409e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a0:	4618      	mov	r0, r3
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	1894      	adds	r4, r2, r2
 80040ac:	60bc      	str	r4, [r7, #8]
 80040ae:	415b      	adcs	r3, r3
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b6:	1812      	adds	r2, r2, r0
 80040b8:	eb41 0303 	adc.w	r3, r1, r3
 80040bc:	f04f 0400 	mov.w	r4, #0
 80040c0:	f04f 0500 	mov.w	r5, #0
 80040c4:	00dd      	lsls	r5, r3, #3
 80040c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040ca:	00d4      	lsls	r4, r2, #3
 80040cc:	4622      	mov	r2, r4
 80040ce:	462b      	mov	r3, r5
 80040d0:	1814      	adds	r4, r2, r0
 80040d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80040d4:	414b      	adcs	r3, r1
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	008b      	lsls	r3, r1, #2
 80040ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040f0:	0082      	lsls	r2, r0, #2
 80040f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040f6:	f7fc f8c3 	bl	8000280 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <UART_SetConfig+0x38c>)
 8004100:	fba3 1302 	umull	r1, r3, r3, r2
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	2164      	movs	r1, #100	; 0x64
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	3332      	adds	r3, #50	; 0x32
 8004112:	4a2a      	ldr	r2, [pc, #168]	; (80041bc <UART_SetConfig+0x38c>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800411e:	441e      	add	r6, r3
 8004120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004122:	4618      	mov	r0, r3
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	1894      	adds	r4, r2, r2
 800412e:	603c      	str	r4, [r7, #0]
 8004130:	415b      	adcs	r3, r3
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004138:	1812      	adds	r2, r2, r0
 800413a:	eb41 0303 	adc.w	r3, r1, r3
 800413e:	f04f 0400 	mov.w	r4, #0
 8004142:	f04f 0500 	mov.w	r5, #0
 8004146:	00dd      	lsls	r5, r3, #3
 8004148:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800414c:	00d4      	lsls	r4, r2, #3
 800414e:	4622      	mov	r2, r4
 8004150:	462b      	mov	r3, r5
 8004152:	eb12 0a00 	adds.w	sl, r2, r0
 8004156:	eb43 0b01 	adc.w	fp, r3, r1
 800415a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4618      	mov	r0, r3
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	008b      	lsls	r3, r1, #2
 800416e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004172:	0082      	lsls	r2, r0, #2
 8004174:	4650      	mov	r0, sl
 8004176:	4659      	mov	r1, fp
 8004178:	f7fc f882 	bl	8000280 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <UART_SetConfig+0x38c>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a09      	ldr	r2, [pc, #36]	; (80041bc <UART_SetConfig+0x38c>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4432      	add	r2, r6
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	377c      	adds	r7, #124	; 0x7c
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b2:	bf00      	nop
 80041b4:	40011000 	.word	0x40011000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	51eb851f 	.word	0x51eb851f

080041c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c0:	b084      	sub	sp, #16
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	f107 001c 	add.w	r0, r7, #28
 80041ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d122      	bne.n	800421e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9c0 	bl	8004598 <USB_CoreReset>
 8004218:	4603      	mov	r3, r0
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	e01a      	b.n	8004254 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f9b4 	bl	8004598 <USB_CoreReset>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
 8004246:	e005      	b.n	8004254 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10b      	bne.n	8004272 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f043 0206 	orr.w	r2, r3, #6
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f043 0220 	orr.w	r2, r3, #32
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800427e:	b004      	add	sp, #16
 8004280:	4770      	bx	lr

08004282 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f043 0201 	orr.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 0201 	bic.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d115      	bne.n	8004314 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042f4:	2001      	movs	r0, #1
 80042f6:	f7fc fd83 	bl	8000e00 <HAL_Delay>
      ms++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f93a 	bl	800457a <USB_GetMode>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d01e      	beq.n	800434a <USB_SetCurrentMode+0x84>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b31      	cmp	r3, #49	; 0x31
 8004310:	d9f0      	bls.n	80042f4 <USB_SetCurrentMode+0x2e>
 8004312:	e01a      	b.n	800434a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d115      	bne.n	8004346 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004326:	2001      	movs	r0, #1
 8004328:	f7fc fd6a 	bl	8000e00 <HAL_Delay>
      ms++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f921 	bl	800457a <USB_GetMode>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <USB_SetCurrentMode+0x84>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b31      	cmp	r3, #49	; 0x31
 8004342:	d9f0      	bls.n	8004326 <USB_SetCurrentMode+0x60>
 8004344:	e001      	b.n	800434a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e005      	b.n	8004356 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b32      	cmp	r3, #50	; 0x32
 800434e:	d101      	bne.n	8004354 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3301      	adds	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <USB_FlushTxFifo+0x64>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e01b      	b.n	80043b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	daf2      	bge.n	800436e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	019b      	lsls	r3, r3, #6
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3301      	adds	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <USB_FlushTxFifo+0x64>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e006      	b.n	80043b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d0f0      	beq.n	8004398 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	00030d40 	.word	0x00030d40

080043c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3301      	adds	r3, #1
 80043d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a11      	ldr	r2, [pc, #68]	; (8004424 <USB_FlushRxFifo+0x5c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e018      	b.n	8004418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	daf2      	bge.n	80043d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2210      	movs	r2, #16
 80043f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <USB_FlushRxFifo+0x5c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e006      	b.n	8004418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b10      	cmp	r3, #16
 8004414:	d0f0      	beq.n	80043f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	00030d40 	.word	0x00030d40

08004428 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	4611      	mov	r1, r2
 8004434:	461a      	mov	r2, r3
 8004436:	460b      	mov	r3, r1
 8004438:	71fb      	strb	r3, [r7, #7]
 800443a:	4613      	mov	r3, r2
 800443c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d123      	bne.n	8004496 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800444e:	88bb      	ldrh	r3, [r7, #4]
 8004450:	3303      	adds	r3, #3
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004456:	2300      	movs	r3, #0
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e018      	b.n	800448e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	031a      	lsls	r2, r3, #12
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4413      	add	r3, r2
 8004464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004468:	461a      	mov	r2, r3
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3301      	adds	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3301      	adds	r3, #1
 800447a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3301      	adds	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	3301      	adds	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3e2      	bcc.n	800445c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3724      	adds	r7, #36	; 0x24
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b08b      	sub	sp, #44	; 0x2c
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	623b      	str	r3, [r7, #32]
 80044ce:	e014      	b.n	80044fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	601a      	str	r2, [r3, #0]
    pDest++;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	3301      	adds	r3, #1
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	3301      	adds	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	3301      	adds	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	3301      	adds	r3, #1
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	6a3a      	ldr	r2, [r7, #32]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d3e6      	bcc.n	80044d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004502:	8bfb      	ldrh	r3, [r7, #30]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01e      	beq.n	8004546 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004512:	461a      	mov	r2, r3
 8004514:	f107 0310 	add.w	r3, r7, #16
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
 8004528:	b2da      	uxtb	r2, r3
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	701a      	strb	r2, [r3, #0]
      i++;
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	3301      	adds	r3, #1
 8004532:	623b      	str	r3, [r7, #32]
      pDest++;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	3301      	adds	r3, #1
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800453a:	8bfb      	ldrh	r3, [r7, #30]
 800453c:	3b01      	subs	r3, #1
 800453e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004540:	8bfb      	ldrh	r3, [r7, #30]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ea      	bne.n	800451c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004548:	4618      	mov	r0, r3
 800454a:	372c      	adds	r7, #44	; 0x2c
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4013      	ands	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800456c:	68fb      	ldr	r3, [r7, #12]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0301 	and.w	r3, r3, #1
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <USB_CoreReset+0x64>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e01b      	b.n	80045ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	daf2      	bge.n	80045a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <USB_CoreReset+0x64>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e006      	b.n	80045ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d0f0      	beq.n	80045ce <USB_CoreReset+0x36>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	00030d40 	.word	0x00030d40

08004600 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004600:	b084      	sub	sp, #16
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800460e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004620:	461a      	mov	r2, r3
 8004622:	2300      	movs	r3, #0
 8004624:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d10a      	bne.n	8004672 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800466a:	f043 0304 	orr.w	r3, r3, #4
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	e014      	b.n	800469c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004680:	f023 0304 	bic.w	r3, r3, #4
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e009      	b.n	800469c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004696:	f023 0304 	bic.w	r3, r3, #4
 800469a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800469c:	2110      	movs	r1, #16
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fe5e 	bl	8004360 <USB_FlushTxFifo>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fe8a 	bl	80043c8 <USB_FlushRxFifo>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	e015      	b.n	80046f0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d0:	461a      	mov	r2, r3
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
 80046d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	461a      	mov	r2, r3
 80046e6:	2300      	movs	r3, #0
 80046e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3e5      	bcc.n	80046c4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f04f 32ff 	mov.w	r2, #4294967295
 8004704:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a13      	ldr	r2, [pc, #76]	; (800476c <USB_HostInit+0x16c>)
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a13      	ldr	r2, [pc, #76]	; (8004770 <USB_HostInit+0x170>)
 8004724:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004728:	e009      	b.n	800473e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a10      	ldr	r2, [pc, #64]	; (8004774 <USB_HostInit+0x174>)
 8004734:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <USB_HostInit+0x178>)
 800473a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	2b00      	cmp	r3, #0
 8004742:	d105      	bne.n	8004750 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f043 0210 	orr.w	r2, r3, #16
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <USB_HostInit+0x17c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004768:	b004      	add	sp, #16
 800476a:	4770      	bx	lr
 800476c:	01000200 	.word	0x01000200
 8004770:	00e00300 	.word	0x00e00300
 8004774:	00600080 	.word	0x00600080
 8004778:	004000e0 	.word	0x004000e0
 800477c:	a3200008 	.word	0xa3200008

08004780 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047b8:	4313      	orrs	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c8:	461a      	mov	r2, r3
 80047ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80047ce:	6053      	str	r3, [r2, #4]
 80047d0:	e009      	b.n	80047e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d106      	bne.n	80047e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047de:	461a      	mov	r2, r3
 80047e0:	f241 7370 	movw	r3, #6000	; 0x1770
 80047e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004814:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800481e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004822:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004824:	2064      	movs	r0, #100	; 0x64
 8004826:	f7fc faeb 	bl	8000e00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004836:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004838:	200a      	movs	r0, #10
 800483a:	f7fc fae1 	bl	8000e00 <HAL_Delay>

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800486c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <USB_DriveVbus+0x44>
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d106      	bne.n	800488c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800488a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d109      	bne.n	80048ac <USB_DriveVbus+0x64>
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	0c5b      	lsrs	r3, r3, #17
 80048d8:	f003 0303 	and.w	r3, r3, #3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	b29b      	uxth	r3, r3
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	4608      	mov	r0, r1
 8004916:	4611      	mov	r1, r2
 8004918:	461a      	mov	r2, r3
 800491a:	4603      	mov	r3, r0
 800491c:	70fb      	strb	r3, [r7, #3]
 800491e:	460b      	mov	r3, r1
 8004920:	70bb      	strb	r3, [r7, #2]
 8004922:	4613      	mov	r3, r2
 8004924:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493a:	461a      	mov	r2, r3
 800493c:	f04f 33ff 	mov.w	r3, #4294967295
 8004940:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004946:	2b03      	cmp	r3, #3
 8004948:	d87e      	bhi.n	8004a48 <USB_HC_Init+0x13c>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <USB_HC_Init+0x44>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	08004961 	.word	0x08004961
 8004954:	08004a0b 	.word	0x08004a0b
 8004958:	08004961 	.word	0x08004961
 800495c:	080049cd 	.word	0x080049cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496c:	461a      	mov	r2, r3
 800496e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004972:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004974:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	da10      	bge.n	800499e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	78fa      	ldrb	r2, [r7, #3]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	440a      	add	r2, r1
 8004992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800499c:	e057      	b.n	8004a4e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d051      	beq.n	8004a4e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049c8:	60d3      	str	r3, [r2, #12]
      break;
 80049ca:	e040      	b.n	8004a4e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d8:	461a      	mov	r2, r3
 80049da:	f240 639d 	movw	r3, #1693	; 0x69d
 80049de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80049e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	da34      	bge.n	8004a52 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004a08:	e023      	b.n	8004a52 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a16:	461a      	mov	r2, r3
 8004a18:	f240 2325 	movw	r3, #549	; 0x225
 8004a1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	da17      	bge.n	8004a56 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	78fa      	ldrb	r2, [r7, #3]
 8004a36:	0151      	lsls	r1, r2, #5
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	440a      	add	r2, r1
 8004a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a40:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004a44:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004a46:	e006      	b.n	8004a56 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	77fb      	strb	r3, [r7, #31]
      break;
 8004a4c:	e004      	b.n	8004a58 <USB_HC_Init+0x14c>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <USB_HC_Init+0x14c>
      break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <USB_HC_Init+0x14c>
      break;
 8004a56:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	78fa      	ldrb	r2, [r7, #3]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	2101      	movs	r1, #1
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	6939      	ldr	r1, [r7, #16]
 8004a8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a92:	4313      	orrs	r3, r2
 8004a94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004aa2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da03      	bge.n	8004ab2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	e001      	b.n	8004ab6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff feff 	bl	80048ba <USB_GetHostSpeed>
 8004abc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004abe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d106      	bne.n	8004ad4 <USB_HC_Init+0x1c8>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d003      	beq.n	8004ad4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e001      	b.n	8004ad8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ad8:	787b      	ldrb	r3, [r7, #1]
 8004ada:	059b      	lsls	r3, r3, #22
 8004adc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ae0:	78bb      	ldrb	r3, [r7, #2]
 8004ae2:	02db      	lsls	r3, r3, #11
 8004ae4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ae8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004aea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004aee:	049b      	lsls	r3, r3, #18
 8004af0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004af4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004af6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004af8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004afc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	0159      	lsls	r1, r3, #5
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	440b      	add	r3, r1
 8004b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b14:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004b16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d003      	beq.n	8004b26 <USB_HC_Init+0x21a>
 8004b1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d10f      	bne.n	8004b46 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004b46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d02d      	beq.n	8004bd6 <USB_HC_StartXfer+0x86>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	791b      	ldrb	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d129      	bne.n	8004bd6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d117      	bne.n	8004bb8 <USB_HC_StartXfer+0x68>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	79db      	ldrb	r3, [r3, #7]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <USB_HC_StartXfer+0x48>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	79db      	ldrb	r3, [r3, #7]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d10f      	bne.n	8004bb8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	6a3a      	ldr	r2, [r7, #32]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <USB_HC_StartXfer+0x86>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	795b      	ldrb	r3, [r3, #5]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d107      	bne.n	8004bd6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fa0f 	bl	8004ff0 <USB_DoPing>
      return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e0f8      	b.n	8004dc8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	8912      	ldrh	r2, [r2, #8]
 8004be6:	4413      	add	r3, r2
 8004be8:	3b01      	subs	r3, #1
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	8912      	ldrh	r2, [r2, #8]
 8004bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bf2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004bf4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004bf6:	8b7b      	ldrh	r3, [r7, #26]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d90b      	bls.n	8004c14 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004bfc:	8b7b      	ldrh	r3, [r7, #26]
 8004bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	8912      	ldrh	r2, [r2, #8]
 8004c06:	fb02 f203 	mul.w	r2, r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	611a      	str	r2, [r3, #16]
 8004c0e:	e001      	b.n	8004c14 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004c10:	2301      	movs	r3, #1
 8004c12:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	78db      	ldrb	r3, [r3, #3]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004c1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	8912      	ldrh	r2, [r2, #8]
 8004c22:	fb02 f203 	mul.w	r2, r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	611a      	str	r2, [r3, #16]
 8004c2a:	e003      	b.n	8004c34 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c3e:	04d9      	lsls	r1, r3, #19
 8004c40:	4b63      	ldr	r3, [pc, #396]	; (8004dd0 <USB_HC_StartXfer+0x280>)
 8004c42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	7a9b      	ldrb	r3, [r3, #10]
 8004c4a:	075b      	lsls	r3, r3, #29
 8004c4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c50:	69f9      	ldr	r1, [r7, #28]
 8004c52:	0148      	lsls	r0, r1, #5
 8004c54:	6a39      	ldr	r1, [r7, #32]
 8004c56:	4401      	add	r1, r0
 8004c58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	68d9      	ldr	r1, [r3, #12]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c76:	460a      	mov	r2, r1
 8004c78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	7e7b      	ldrb	r3, [r7, #25]
 8004cc2:	075b      	lsls	r3, r3, #29
 8004cc4:	69f9      	ldr	r1, [r7, #28]
 8004cc6:	0148      	lsls	r0, r1, #5
 8004cc8:	6a39      	ldr	r1, [r7, #32]
 8004cca:	4401      	add	r1, r0
 8004ccc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	78db      	ldrb	r3, [r3, #3]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	e003      	b.n	8004d06 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d04:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e04e      	b.n	8004dc8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	78db      	ldrb	r3, [r3, #3]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d149      	bne.n	8004dc6 <USB_HC_StartXfer+0x276>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d045      	beq.n	8004dc6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	79db      	ldrb	r3, [r3, #7]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d830      	bhi.n	8004da4 <USB_HC_StartXfer+0x254>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <USB_HC_StartXfer+0x1f8>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d59 	.word	0x08004d59
 8004d54:	08004d7d 	.word	0x08004d7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	3303      	adds	r3, #3
 8004d5e:	089b      	lsrs	r3, r3, #2
 8004d60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004d62:	8afa      	ldrh	r2, [r7, #22]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d91c      	bls.n	8004da8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	619a      	str	r2, [r3, #24]
        }
        break;
 8004d7a:	e015      	b.n	8004da8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	3303      	adds	r3, #3
 8004d82:	089b      	lsrs	r3, r3, #2
 8004d84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004d86:	8afa      	ldrh	r2, [r7, #22]
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d90a      	bls.n	8004dac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	619a      	str	r2, [r3, #24]
        }
        break;
 8004da2:	e003      	b.n	8004dac <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004da4:	bf00      	nop
 8004da6:	e002      	b.n	8004dae <USB_HC_StartXfer+0x25e>
        break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <USB_HC_StartXfer+0x25e>
        break;
 8004dac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68d9      	ldr	r1, [r3, #12]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	785a      	ldrb	r2, [r3, #1]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	9000      	str	r0, [sp, #0]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff fb31 	bl	8004428 <USB_WritePacket>
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3728      	adds	r7, #40	; 0x28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	1ff80000 	.word	0x1ff80000

08004dd4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	b29b      	uxth	r3, r3
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b089      	sub	sp, #36	; 0x24
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	0c9b      	lsrs	r3, r3, #18
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	0fdb      	lsrs	r3, r3, #31
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d104      	bne.n	8004e50 <USB_HC_Halt+0x5a>
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e0c8      	b.n	8004fe2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <USB_HC_Halt+0x66>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d163      	bne.n	8004f24 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e7a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f040 80ab 	bne.w	8004fe0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d133      	bne.n	8004efe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eb4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ed4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ee2:	d81d      	bhi.n	8004f20 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004efa:	d0ec      	beq.n	8004ed6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004efc:	e070      	b.n	8004fe0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f1c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f1e:	e05f      	b.n	8004fe0 <USB_HC_Halt+0x1ea>
            break;
 8004f20:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f22:	e05d      	b.n	8004fe0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f42:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d133      	bne.n	8004fbc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f92:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fa0:	d81d      	bhi.n	8004fde <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb8:	d0ec      	beq.n	8004f94 <USB_HC_Halt+0x19e>
 8004fba:	e011      	b.n	8004fe0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e000      	b.n	8004fe0 <USB_HC_Halt+0x1ea>
          break;
 8004fde:	bf00      	nop
    }
  }

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005004:	2301      	movs	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	04da      	lsls	r2, r3, #19
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <USB_DoPing+0x74>)
 800500e:	4013      	ands	r3, r2
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	440a      	add	r2, r1
 8005018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005020:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005038:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005040:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504e:	461a      	mov	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	1ff80000 	.word	0x1ff80000

08005068 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff f911 	bl	80042a4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005082:	2110      	movs	r1, #16
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff f96b 	bl	8004360 <USB_FlushTxFifo>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff f997 	bl	80043c8 <USB_FlushRxFifo>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e01f      	b.n	80050ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	3301      	adds	r3, #1
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b0f      	cmp	r3, #15
 80050ee:	d9dc      	bls.n	80050aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80050f0:	2300      	movs	r3, #0
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	e034      	b.n	8005160 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800510c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005114:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800511c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	4413      	add	r3, r2
 8005126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512a:	461a      	mov	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3301      	adds	r3, #1
 8005134:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800513c:	d80c      	bhi.n	8005158 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	4413      	add	r3, r2
 8005146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005154:	d0ec      	beq.n	8005130 <USB_StopHost+0xc8>
 8005156:	e000      	b.n	800515a <USB_StopHost+0xf2>
        break;
 8005158:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	3301      	adds	r3, #1
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d9c7      	bls.n	80050f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516c:	461a      	mov	r2, r3
 800516e:	f04f 33ff 	mov.w	r3, #4294967295
 8005172:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f04f 32ff 	mov.w	r2, #4294967295
 800517a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff f880 	bl	8004282 <USB_EnableGlobalInt>

  return ret;
 8005182:	7ffb      	ldrb	r3, [r7, #31]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b08b      	sub	sp, #44	; 0x2c
 8005190:	af04      	add	r7, sp, #16
 8005192:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800519e:	7919      	ldrb	r1, [r3, #4]
 80051a0:	23ff      	movs	r3, #255	; 0xff
 80051a2:	2201      	movs	r2, #1
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 ff15 	bl	8005fd4 <USBH_FindInterface>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80051ae:	7dbb      	ldrb	r3, [r7, #22]
 80051b0:	2bff      	cmp	r3, #255	; 0xff
 80051b2:	d002      	beq.n	80051ba <USBH_HID_InterfaceInit+0x2e>
 80051b4:	7dbb      	ldrb	r3, [r7, #22]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d901      	bls.n	80051be <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80051ba:	2302      	movs	r3, #2
 80051bc:	e108      	b.n	80053d0 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 80051be:	7dbb      	ldrb	r3, [r7, #22]
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 feea 	bl	8005f9c <USBH_SelectInterface>
 80051c8:	4603      	mov	r3, r0
 80051ca:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80051cc:	7d7b      	ldrb	r3, [r7, #21]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 80051d2:	2302      	movs	r3, #2
 80051d4:	e0fc      	b.n	80053d0 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80051dc:	2034      	movs	r0, #52	; 0x34
 80051de:	f002 fd77 	bl	8007cd0 <malloc>
 80051e2:	4603      	mov	r3, r0
 80051e4:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0ea      	b.n	80053d0 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 80051fa:	2234      	movs	r2, #52	; 0x34
 80051fc:	2100      	movs	r1, #0
 80051fe:	6938      	ldr	r0, [r7, #16]
 8005200:	f002 fd76 	bl	8007cf0 <memset>

  HID_Handle->state = HID_ERROR;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2207      	movs	r2, #7
 8005208:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800520a:	7dbb      	ldrb	r3, [r7, #22]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	211a      	movs	r1, #26
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	4413      	add	r3, r2
 8005216:	f203 3349 	addw	r3, r3, #841	; 0x349
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d103      	bne.n	8005228 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4a6d      	ldr	r2, [pc, #436]	; (80053d8 <USBH_HID_InterfaceInit+0x24c>)
 8005224:	631a      	str	r2, [r3, #48]	; 0x30
 8005226:	e010      	b.n	800524a <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8005228:	7dbb      	ldrb	r3, [r7, #22]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	211a      	movs	r1, #26
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	4413      	add	r3, r2
 8005234:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d103      	bne.n	8005246 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4a66      	ldr	r2, [pc, #408]	; (80053dc <USBH_HID_InterfaceInit+0x250>)
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
 8005244:	e001      	b.n	800524a <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8005246:	2302      	movs	r3, #2
 8005248:	e0c2      	b.n	80053d0 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2200      	movs	r2, #0
 800524e:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2200      	movs	r2, #0
 8005254:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005256:	7dbb      	ldrb	r3, [r7, #22]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	211a      	movs	r1, #26
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	4413      	add	r3, r2
 8005262:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005266:	781a      	ldrb	r2, [r3, #0]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800526c:	7dbb      	ldrb	r3, [r7, #22]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	211a      	movs	r1, #26
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	4413      	add	r3, r2
 8005278:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800527c:	881a      	ldrh	r2, [r3, #0]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8005282:	7dbb      	ldrb	r3, [r7, #22]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	211a      	movs	r1, #26
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	4413      	add	r3, r2
 800528e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	b29a      	uxth	r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	8b9b      	ldrh	r3, [r3, #28]
 800529e:	2b09      	cmp	r3, #9
 80052a0:	d802      	bhi.n	80052a8 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	220a      	movs	r2, #10
 80052a6:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80052a8:	7dbb      	ldrb	r3, [r7, #22]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	211a      	movs	r1, #26
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	f203 3346 	addw	r3, r3, #838	; 0x346
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	bf28      	it	cs
 80052be:	2302      	movcs	r3, #2
 80052c0:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
 80052c6:	e07d      	b.n	80053c4 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 80052c8:	7dbb      	ldrb	r3, [r7, #22]
 80052ca:	7df9      	ldrb	r1, [r7, #23]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	3101      	adds	r1, #1
 80052d0:	00c9      	lsls	r1, r1, #3
 80052d2:	201a      	movs	r0, #26
 80052d4:	fb00 f303 	mul.w	r3, r0, r3
 80052d8:	440b      	add	r3, r1
 80052da:	4413      	add	r3, r2
 80052dc:	f203 3346 	addw	r3, r3, #838	; 0x346
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b25b      	sxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da35      	bge.n	8005354 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80052e8:	7dbb      	ldrb	r3, [r7, #22]
 80052ea:	7df9      	ldrb	r1, [r7, #23]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	3101      	adds	r1, #1
 80052f0:	00c9      	lsls	r1, r1, #3
 80052f2:	201a      	movs	r0, #26
 80052f4:	fb00 f303 	mul.w	r3, r0, r3
 80052f8:	440b      	add	r3, r1
 80052fa:	4413      	add	r3, r2
 80052fc:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005300:	781a      	ldrb	r2, [r3, #0]
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	791b      	ldrb	r3, [r3, #4]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f002 f958 	bl	80075c2 <USBH_AllocPipe>
 8005312:	4603      	mov	r3, r0
 8005314:	461a      	mov	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	7859      	ldrb	r1, [r3, #1]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	7918      	ldrb	r0, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	8b12      	ldrh	r2, [r2, #24]
 8005332:	9202      	str	r2, [sp, #8]
 8005334:	2203      	movs	r2, #3
 8005336:	9201      	str	r2, [sp, #4]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	4623      	mov	r3, r4
 800533c:	4602      	mov	r2, r0
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f002 f910 	bl	8007564 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2200      	movs	r2, #0
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f002 fc11 	bl	8007b74 <USBH_LL_SetToggle>
 8005352:	e034      	b.n	80053be <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005354:	7dbb      	ldrb	r3, [r7, #22]
 8005356:	7df9      	ldrb	r1, [r7, #23]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	3101      	adds	r1, #1
 800535c:	00c9      	lsls	r1, r1, #3
 800535e:	201a      	movs	r0, #26
 8005360:	fb00 f303 	mul.w	r3, r0, r3
 8005364:	440b      	add	r3, r1
 8005366:	4413      	add	r3, r2
 8005368:	f203 3346 	addw	r3, r3, #838	; 0x346
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	78db      	ldrb	r3, [r3, #3]
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f002 f922 	bl	80075c2 <USBH_AllocPipe>
 800537e:	4603      	mov	r3, r0
 8005380:	461a      	mov	r2, r3
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	7819      	ldrb	r1, [r3, #0]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	78d8      	ldrb	r0, [r3, #3]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	8b12      	ldrh	r2, [r2, #24]
 800539e:	9202      	str	r2, [sp, #8]
 80053a0:	2203      	movs	r2, #3
 80053a2:	9201      	str	r2, [sp, #4]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	4623      	mov	r3, r4
 80053a8:	4602      	mov	r2, r0
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f002 f8da 	bl	8007564 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2200      	movs	r2, #0
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f002 fbdb 	bl	8007b74 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	3301      	adds	r3, #1
 80053c2:	75fb      	strb	r3, [r7, #23]
 80053c4:	7dfa      	ldrb	r2, [r7, #23]
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	f4ff af7d 	bcc.w	80052c8 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd90      	pop	{r4, r7, pc}
 80053d8:	08005add 	.word	0x08005add
 80053dc:	08005b85 	.word	0x08005b85

080053e0 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 f8ce 	bl	80075a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f002 f8f9 	bl	8007604 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f002 f8bb 	bl	80075a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f002 f8e6 	bl	8007604 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00b      	beq.n	8005462 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4618      	mov	r0, r3
 8005454:	f002 fc44 	bl	8007ce0 <free>
    phost->pActiveClass->pData = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800545e:	2200      	movs	r2, #0
 8005460:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005478:	2301      	movs	r3, #1
 800547a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	795b      	ldrb	r3, [r3, #5]
 800548a:	2b05      	cmp	r3, #5
 800548c:	d860      	bhi.n	8005550 <USBH_HID_ClassRequest+0xe4>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <USBH_HID_ClassRequest+0x28>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054ad 	.word	0x080054ad
 8005498:	08005551 	.word	0x08005551
 800549c:	080054c7 	.word	0x080054c7
 80054a0:	080054ad 	.word	0x080054ad
 80054a4:	080054f1 	.word	0x080054f1
 80054a8:	0800551b 	.word	0x0800551b
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	331c      	adds	r3, #28
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f000 f9cd 	bl	8005858 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2202      	movs	r2, #2
 80054c2:	715a      	strb	r2, [r3, #5]

      break;
 80054c4:	e04b      	b.n	800555e <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f930 	bl	8005732 <USBH_HID_GetHIDReportDescriptor>
 80054d2:	4603      	mov	r3, r0
 80054d4:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2204      	movs	r2, #4
 80054e0:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 80054e2:	e037      	b.n	8005554 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80054e4:	7bbb      	ldrb	r3, [r7, #14]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d134      	bne.n	8005554 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 80054ea:	2302      	movs	r3, #2
 80054ec:	73fb      	strb	r3, [r7, #15]
      break;
 80054ee:	e031      	b.n	8005554 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 80054f0:	2200      	movs	r2, #0
 80054f2:	2100      	movs	r1, #0
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f935 	bl	8005764 <USBH_HID_SetIdle>
 80054fa:	4603      	mov	r3, r0
 80054fc:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 80054fe:	7bbb      	ldrb	r3, [r7, #14]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2205      	movs	r2, #5
 8005508:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800550a:	e025      	b.n	8005558 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800550c:	7bbb      	ldrb	r3, [r7, #14]
 800550e:	2b03      	cmp	r3, #3
 8005510:	d122      	bne.n	8005558 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2205      	movs	r2, #5
 8005516:	715a      	strb	r2, [r3, #5]
      break;
 8005518:	e01e      	b.n	8005558 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800551a:	2100      	movs	r1, #0
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f975 	bl	800580c <USBH_HID_SetProtocol>
 8005522:	4603      	mov	r3, r0
 8005524:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2201      	movs	r2, #1
 8005530:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005538:	2102      	movs	r1, #2
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	4798      	blx	r3
        status = USBH_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8005542:	e00b      	b.n	800555c <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8005544:	7bbb      	ldrb	r3, [r7, #14]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d108      	bne.n	800555c <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 800554a:	2302      	movs	r3, #2
 800554c:	73fb      	strb	r3, [r7, #15]
      break;
 800554e:	e005      	b.n	800555c <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8005550:	bf00      	nop
 8005552:	e004      	b.n	800555e <USBH_HID_ClassRequest+0xf2>
      break;
 8005554:	bf00      	nop
 8005556:	e002      	b.n	800555e <USBH_HID_ClassRequest+0xf2>
      break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <USBH_HID_ClassRequest+0xf2>
      break;
 800555c:	bf00      	nop
  }

  return status;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af02      	add	r7, sp, #8
 800556e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	789b      	ldrb	r3, [r3, #2]
 8005582:	2b06      	cmp	r3, #6
 8005584:	f200 80a9 	bhi.w	80056da <USBH_HID_Process+0x172>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <USBH_HID_Process+0x28>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055ad 	.word	0x080055ad
 8005594:	080055bd 	.word	0x080055bd
 8005598:	080056db 	.word	0x080056db
 800559c:	080056db 	.word	0x080056db
 80055a0:	0800562d 	.word	0x0800562d
 80055a4:	08005617 	.word	0x08005617
 80055a8:	0800565b 	.word	0x0800565b
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2201      	movs	r2, #1
 80055b8:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80055ba:	e093      	b.n	80056e4 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	8b1b      	ldrh	r3, [r3, #24]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	2101      	movs	r1, #1
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f8f0 	bl	80057b4 <USBH_HID_GetReport>
 80055d4:	4603      	mov	r3, r0
 80055d6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2205      	movs	r2, #5
 80055e2:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80055e4:	e07e      	b.n	80056e4 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d105      	bne.n	80055f8 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2201      	movs	r2, #1
 80055f0:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	75fb      	strb	r3, [r7, #23]
      break;
 80055f6:	e075      	b.n	80056e4 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 80055f8:	7dfb      	ldrb	r3, [r7, #23]
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d105      	bne.n	800560a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2205      	movs	r2, #5
 8005602:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	75fb      	strb	r3, [r7, #23]
      break;
 8005608:	e06c      	b.n	80056e4 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2207      	movs	r2, #7
 800560e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005610:	2302      	movs	r3, #2
 8005612:	75fb      	strb	r3, [r7, #23]
      break;
 8005614:	e066      	b.n	80056e4 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05c      	beq.n	80056de <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2204      	movs	r2, #4
 8005628:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800562a:	e058      	b.n	80056de <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005634:	b2da      	uxtb	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 ff73 	bl	8007526 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2206      	movs	r2, #6
 8005644:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8005658:	e044      	b.n	80056e4 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f002 fa5d 	bl	8007b20 <USBH_LL_GetURBState>
 8005666:	4603      	mov	r3, r0
 8005668:	2b01      	cmp	r3, #1
 800566a:	d120      	bne.n	80056ae <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f002 f9c2 	bl	80079fc <USBH_LL_GetLastXferSize>
 8005678:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	d12e      	bne.n	80056e2 <USBH_HID_Process+0x17a>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02b      	beq.n	80056e2 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f103 0008 	add.w	r0, r3, #8
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6959      	ldr	r1, [r3, #20]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	8b1b      	ldrh	r3, [r3, #24]
 8005698:	461a      	mov	r2, r3
 800569a:	f000 f9ca 	bl	8005a32 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fb f89a 	bl	80007e0 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 80056ac:	e019      	b.n	80056e2 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f002 fa33 	bl	8007b20 <USBH_LL_GetURBState>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b05      	cmp	r3, #5
 80056be:	d110      	bne.n	80056e2 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	7e9b      	ldrb	r3, [r3, #26]
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 fa51 	bl	8006b6e <USBH_ClrFeature>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2204      	movs	r2, #4
 80056d6:	709a      	strb	r2, [r3, #2]
      break;
 80056d8:	e003      	b.n	80056e2 <USBH_HID_Process+0x17a>

    default:
      break;
 80056da:	bf00      	nop
 80056dc:	e002      	b.n	80056e4 <USBH_HID_Process+0x17c>
      break;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <USBH_HID_Process+0x17c>
      break;
 80056e2:	bf00      	nop
  }

  return status;
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop

080056f0 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	789b      	ldrb	r3, [r3, #2]
 8005706:	2b06      	cmp	r3, #6
 8005708:	d10c      	bne.n	8005724 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	8b92      	ldrh	r2, [r2, #28]
 800571a:	4293      	cmp	r3, r2
 800571c:	d302      	bcc.n	8005724 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2204      	movs	r2, #4
 8005722:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af02      	add	r7, sp, #8
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005744:	887b      	ldrh	r3, [r7, #2]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800574e:	2101      	movs	r1, #1
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 f96c 	bl	8006a2e <USBH_GetDescriptor>
 8005756:	4603      	mov	r3, r0
 8005758:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
 8005770:	4613      	mov	r3, r2
 8005772:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2221      	movs	r2, #33	; 0x21
 8005778:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	220a      	movs	r2, #10
 800577e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	b29b      	uxth	r3, r3
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	b29a      	uxth	r2, r3
 8005788:	78bb      	ldrb	r3, [r7, #2]
 800578a:	b29b      	uxth	r3, r3
 800578c:	4313      	orrs	r3, r2
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80057a0:	2200      	movs	r2, #0
 80057a2:	2100      	movs	r1, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fcaf 	bl	8007108 <USBH_CtlReq>
 80057aa:	4603      	mov	r3, r0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	72fb      	strb	r3, [r7, #11]
 80057c2:	4613      	mov	r3, r2
 80057c4:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	22a1      	movs	r2, #161	; 0xa1
 80057ca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80057d2:	7afb      	ldrb	r3, [r7, #11]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	b29a      	uxth	r2, r3
 80057da:	7abb      	ldrb	r3, [r7, #10]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	4313      	orrs	r3, r2
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80057ec:	7e3b      	ldrb	r3, [r7, #24]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80057f4:	7e3b      	ldrb	r3, [r7, #24]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f001 fc83 	bl	8007108 <USBH_CtlReq>
 8005802:	4603      	mov	r3, r0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2221      	movs	r2, #33	; 0x21
 800581c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	220b      	movs	r2, #11
 8005822:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	825a      	strh	r2, [r3, #18]
 8005830:	e002      	b.n	8005838 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005844:	2200      	movs	r2, #0
 8005846:	2100      	movs	r1, #0
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f001 fc5d 	bl	8007108 <USBH_CtlReq>
 800584e:	4603      	mov	r3, r0

}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	3302      	adds	r3, #2
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b29a      	uxth	r2, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	3303      	adds	r3, #3
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	b29b      	uxth	r3, r3
 800587a:	4313      	orrs	r3, r2
 800587c:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800587e:	897b      	ldrh	r3, [r7, #10]
 8005880:	2b09      	cmp	r3, #9
 8005882:	d943      	bls.n	800590c <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8005884:	2309      	movs	r3, #9
 8005886:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8005888:	e03c      	b.n	8005904 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	4619      	mov	r1, r3
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f001 fc1e 	bl	80070d2 <USBH_GetNextDesc>
 8005896:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b21      	cmp	r3, #33	; 0x21
 800589e:	d131      	bne.n	8005904 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	781a      	ldrb	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	785a      	ldrb	r2, [r3, #1]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3302      	adds	r3, #2
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3303      	adds	r3, #3
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	791a      	ldrb	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	795a      	ldrb	r2, [r3, #5]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	799a      	ldrb	r2, [r3, #6]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3307      	adds	r3, #7
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3308      	adds	r3, #8
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	811a      	strh	r2, [r3, #8]
        break;
 8005900:	bf00      	nop
      }
    }
  }
}
 8005902:	e003      	b.n	800590c <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8005904:	893b      	ldrh	r3, [r7, #8]
 8005906:	897a      	ldrh	r2, [r7, #10]
 8005908:	429a      	cmp	r2, r3
 800590a:	d8be      	bhi.n	800588a <USBH_HID_ParseHIDDesc+0x32>
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800591c:	23ff      	movs	r3, #255	; 0xff
 800591e:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b0b      	cmp	r3, #11
 8005928:	d117      	bne.n	800595a <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005930:	4619      	mov	r1, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	231a      	movs	r3, #26
 8005936:	fb03 f301 	mul.w	r3, r3, r1
 800593a:	4413      	add	r3, r2
 800593c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d102      	bne.n	8005950 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800594a:	2302      	movs	r3, #2
 800594c:	73fb      	strb	r3, [r7, #15]
 800594e:	e004      	b.n	800595a <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d101      	bne.n	800595a <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	88fa      	ldrh	r2, [r7, #6]
 800598c:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	601a      	str	r2, [r3, #0]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	7a9b      	ldrb	r3, [r3, #10]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d131      	bne.n	8005a1e <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80059c0:	2300      	movs	r3, #0
 80059c2:	82fb      	strh	r3, [r7, #22]
 80059c4:	e027      	b.n	8005a16 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	88da      	ldrh	r2, [r3, #6]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	889b      	ldrh	r3, [r3, #4]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d019      	beq.n	8005a06 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	88d2      	ldrh	r2, [r2, #6]
 80059da:	441a      	add	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1c59      	adds	r1, r3, #1
 80059e0:	6139      	str	r1, [r7, #16]
 80059e2:	7812      	ldrb	r2, [r2, #0]
 80059e4:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	88db      	ldrh	r3, [r3, #6]
 80059ea:	3301      	adds	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	88da      	ldrh	r2, [r3, #6]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	891b      	ldrh	r3, [r3, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d108      	bne.n	8005a10 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	80da      	strh	r2, [r3, #6]
 8005a04:	e004      	b.n	8005a10 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	729a      	strb	r2, [r3, #10]
        return i;
 8005a0c:	8afb      	ldrh	r3, [r7, #22]
 8005a0e:	e00a      	b.n	8005a26 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8005a10:	8afb      	ldrh	r3, [r7, #22]
 8005a12:	3301      	adds	r3, #1
 8005a14:	82fb      	strh	r3, [r7, #22]
 8005a16:	8afa      	ldrh	r2, [r7, #22]
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d3d3      	bcc.n	80059c6 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005a24:	88fb      	ldrh	r3, [r7, #6]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b087      	sub	sp, #28
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	7a9b      	ldrb	r3, [r3, #10]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d13c      	bne.n	8005ac6 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	82fb      	strh	r3, [r7, #22]
 8005a56:	e032      	b.n	8005abe <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	889b      	ldrh	r3, [r3, #4]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	88d2      	ldrh	r2, [r2, #6]
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00a      	beq.n	8005a7c <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	889b      	ldrh	r3, [r3, #4]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d108      	bne.n	8005a86 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	88db      	ldrh	r3, [r3, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	729a      	strb	r2, [r3, #10]
        return i;
 8005a82:	8afb      	ldrh	r3, [r7, #22]
 8005a84:	e023      	b.n	8005ace <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	613a      	str	r2, [r7, #16]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	8889      	ldrh	r1, [r1, #4]
 8005a94:	440a      	add	r2, r1
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	889b      	ldrh	r3, [r3, #4]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	889a      	ldrh	r2, [r3, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	891b      	ldrh	r3, [r3, #8]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d102      	bne.n	8005ab8 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8005ab8:	8afb      	ldrh	r3, [r7, #22]
 8005aba:	3301      	adds	r3, #1
 8005abc:	82fb      	strh	r3, [r7, #22]
 8005abe:	8afa      	ldrh	r2, [r7, #22]
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d3c8      	bcc.n	8005a58 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005acc:	88fb      	ldrh	r3, [r7, #6]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8005aee:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <USBH_HID_KeybdInit+0x9c>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8005af4:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <USBH_HID_KeybdInit+0x9c>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8005afa:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <USBH_HID_KeybdInit+0x9c>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8005b00:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <USBH_HID_KeybdInit+0x9c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8005b06:	4b1c      	ldr	r3, [pc, #112]	; (8005b78 <USBH_HID_KeybdInit+0x9c>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8005b0c:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <USBH_HID_KeybdInit+0x9c>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8005b12:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <USBH_HID_KeybdInit+0x9c>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8005b18:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <USBH_HID_KeybdInit+0x9c>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e00c      	b.n	8005b3e <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8005b24:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <USBH_HID_KeybdInit+0xa0>)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8005b2e:	4a14      	ldr	r2, [pc, #80]	; (8005b80 <USBH_HID_KeybdInit+0xa4>)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2100      	movs	r1, #0
 8005b34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d9ef      	bls.n	8005b24 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	8b1b      	ldrh	r3, [r3, #24]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d902      	bls.n	8005b52 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2208      	movs	r2, #8
 8005b50:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <USBH_HID_KeybdInit+0xa4>)
 8005b56:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f103 0008 	add.w	r0, r3, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b64:	2250      	movs	r2, #80	; 0x50
 8005b66:	4619      	mov	r1, r3
 8005b68:	f7ff fefe 	bl	8005968 <USBH_HID_FifoInit>

  return USBH_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000200 	.word	0x20000200
 8005b7c:	200001f0 	.word	0x200001f0
 8005b80:	200001f8 	.word	0x200001f8

08005b84 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8005b96:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <USBH_HID_MouseInit+0x88>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <USBH_HID_MouseInit+0x88>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8005ba2:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <USBH_HID_MouseInit+0x88>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8005ba8:	4b18      	ldr	r3, [pc, #96]	; (8005c0c <USBH_HID_MouseInit+0x88>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <USBH_HID_MouseInit+0x88>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	e00c      	b.n	8005bd4 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <USBH_HID_MouseInit+0x8c>)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <USBH_HID_MouseInit+0x90>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d9ef      	bls.n	8005bba <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	8b1b      	ldrh	r3, [r3, #24]
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d902      	bls.n	8005be8 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2208      	movs	r2, #8
 8005be6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <USBH_HID_MouseInit+0x90>)
 8005bec:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f103 0008 	add.w	r0, r3, #8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005bfa:	2250      	movs	r2, #80	; 0x50
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f7ff feb3 	bl	8005968 <USBH_HID_FifoInit>

  return USBH_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20000210 	.word	0x20000210
 8005c10:	20000218 	.word	0x20000218
 8005c14:	20000220 	.word	0x20000220

08005c18 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f80d 	bl	8005c40 <USBH_HID_MouseDecode>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8005c2c:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <USBH_HID_GetMouseInfo+0x24>)
 8005c2e:	e000      	b.n	8005c32 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8005c30:	2300      	movs	r3, #0
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000210 	.word	0x20000210

08005c40 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8b1b      	ldrh	r3, [r3, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e039      	b.n	8005cd2 <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f103 0008 	add.w	r0, r3, #8
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8b1b      	ldrh	r3, [r3, #24]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	491c      	ldr	r1, [pc, #112]	; (8005cdc <USBH_HID_MouseDecode+0x9c>)
 8005c6c:	f7ff fe98 	bl	80059a0 <USBH_HID_FifoRead>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8b1b      	ldrh	r3, [r3, #24]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d129      	bne.n	8005cd0 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4818      	ldr	r0, [pc, #96]	; (8005ce0 <USBH_HID_MouseDecode+0xa0>)
 8005c80:	f000 f83a 	bl	8005cf8 <HID_ReadItem>
 8005c84:	4603      	mov	r3, r0
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <USBH_HID_MouseDecode+0xa4>)
 8005c8a:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4816      	ldr	r0, [pc, #88]	; (8005ce8 <USBH_HID_MouseDecode+0xa8>)
 8005c90:	f000 f832 	bl	8005cf8 <HID_ReadItem>
 8005c94:	4603      	mov	r3, r0
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <USBH_HID_MouseDecode+0xa4>)
 8005c9a:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4813      	ldr	r0, [pc, #76]	; (8005cec <USBH_HID_MouseDecode+0xac>)
 8005ca0:	f000 f82a 	bl	8005cf8 <HID_ReadItem>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <USBH_HID_MouseDecode+0xa4>)
 8005caa:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 8005cac:	2100      	movs	r1, #0
 8005cae:	4810      	ldr	r0, [pc, #64]	; (8005cf0 <USBH_HID_MouseDecode+0xb0>)
 8005cb0:	f000 f822 	bl	8005cf8 <HID_ReadItem>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <USBH_HID_MouseDecode+0xa4>)
 8005cba:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	480d      	ldr	r0, [pc, #52]	; (8005cf4 <USBH_HID_MouseDecode+0xb4>)
 8005cc0:	f000 f81a 	bl	8005cf8 <HID_ReadItem>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <USBH_HID_MouseDecode+0xa4>)
 8005cca:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 8005cd0:	2302      	movs	r3, #2
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000218 	.word	0x20000218
 8005ce0:	08008620 	.word	0x08008620
 8005ce4:	20000210 	.word	0x20000210
 8005ce8:	08008640 	.word	0x08008640
 8005cec:	080085c0 	.word	0x080085c0
 8005cf0:	080085e0 	.word	0x080085e0
 8005cf4:	08008600 	.word	0x08008600

08005cf8 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	; 0x24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7a1b      	ldrb	r3, [r3, #8]
 8005d16:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7a5b      	ldrb	r3, [r3, #9]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01a      	beq.n	8005d56 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	7a5b      	ldrb	r3, [r3, #9]
 8005d24:	78fa      	ldrb	r2, [r7, #3]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d301      	bcc.n	8005d2e <HID_ReadItem+0x36>
    {
      return (0U);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e078      	b.n	8005e20 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6852      	ldr	r2, [r2, #4]
 8005d34:	fb02 f303 	mul.w	r3, r2, r3
 8005d38:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8005d3a:	7cfb      	ldrb	r3, [r7, #19]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	e00a      	b.n	8005d72 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d004      	beq.n	8005d88 <HID_ReadItem+0x90>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	08db      	lsrs	r3, r3, #3
 8005d84:	3301      	adds	r3, #1
 8005d86:	e002      	b.n	8005d8e <HID_ReadItem+0x96>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	08db      	lsrs	r3, r3, #3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d8e3      	bhi.n	8005d5c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8005d94:	7cfb      	ldrb	r3, [r7, #19]
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	40da      	lsrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8005da2:	fa01 f303 	lsl.w	r3, r1, r3
 8005da6:	43db      	mvns	r3, r3
 8005da8:	4013      	ands	r3, r2
 8005daa:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d304      	bcc.n	8005dc0 <HID_ReadItem+0xc8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d901      	bls.n	8005dc4 <HID_ReadItem+0xcc>
  {
    return (0U);
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e02d      	b.n	8005e20 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	7a9b      	ldrb	r3, [r3, #10]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01e      	beq.n	8005e0a <HID_ReadItem+0x112>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d014      	beq.n	8005e0a <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	425b      	negs	r3, r3
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	e010      	b.n	8005e20 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	fb02 f303 	mul.w	r3, r2, r3
 8005e08:	e00a      	b.n	8005e20 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HID_ReadItem+0x11e>
    {
      return (val);
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	e004      	b.n	8005e20 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3724      	adds	r7, #36	; 0x24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e40:	2302      	movs	r3, #2
 8005e42:	e029      	b.n	8005e98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	79fa      	ldrb	r2, [r7, #7]
 8005e48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f81f 	bl	8005ea0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f001 fcff 	bl	8007894 <USBH_LL_Init>

  return USBH_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e009      	b.n	8005ec6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	33e0      	adds	r3, #224	; 0xe0
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b0f      	cmp	r3, #15
 8005eca:	d9f2      	bls.n	8005eb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e009      	b.n	8005ee6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eec:	d3f1      	bcc.n	8005ed2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2240      	movs	r2, #64	; 0x40
 8005f12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d016      	beq.n	8005f8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10e      	bne.n	8005f84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	33de      	adds	r3, #222	; 0xde
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]
 8005f82:	e004      	b.n	8005f8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f84:	2302      	movs	r3, #2
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	e001      	b.n	8005f8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d204      	bcs.n	8005fc2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	78fa      	ldrb	r2, [r7, #3]
 8005fbc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005fc0:	e001      	b.n	8005fc6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	70fb      	strb	r3, [r7, #3]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70bb      	strb	r3, [r7, #2]
 8005fea:	4613      	mov	r3, r2
 8005fec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ffc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ffe:	e025      	b.n	800604c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	221a      	movs	r2, #26
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	3308      	adds	r3, #8
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	3302      	adds	r3, #2
 8006010:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	795b      	ldrb	r3, [r3, #5]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	429a      	cmp	r2, r3
 800601a:	d002      	beq.n	8006022 <USBH_FindInterface+0x4e>
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	2bff      	cmp	r3, #255	; 0xff
 8006020:	d111      	bne.n	8006046 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006026:	78ba      	ldrb	r2, [r7, #2]
 8006028:	429a      	cmp	r2, r3
 800602a:	d002      	beq.n	8006032 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800602c:	78bb      	ldrb	r3, [r7, #2]
 800602e:	2bff      	cmp	r3, #255	; 0xff
 8006030:	d109      	bne.n	8006046 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006036:	787a      	ldrb	r2, [r7, #1]
 8006038:	429a      	cmp	r2, r3
 800603a:	d002      	beq.n	8006042 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800603c:	787b      	ldrb	r3, [r7, #1]
 800603e:	2bff      	cmp	r3, #255	; 0xff
 8006040:	d101      	bne.n	8006046 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	e006      	b.n	8006054 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	3301      	adds	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d9d6      	bls.n	8006000 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006052:	23ff      	movs	r3, #255	; 0xff
}
 8006054:	4618      	mov	r0, r3
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fc4f 	bl	800790c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800606e:	2101      	movs	r1, #1
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 fd68 	bl	8007b46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af04      	add	r7, sp, #16
 8006086:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006088:	2302      	movs	r3, #2
 800608a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d102      	bne.n	80060a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2203      	movs	r2, #3
 80060a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b0b      	cmp	r3, #11
 80060aa:	f200 81be 	bhi.w	800642a <USBH_Process+0x3aa>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <USBH_Process+0x34>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	080060e5 	.word	0x080060e5
 80060b8:	08006117 	.word	0x08006117
 80060bc:	0800617f 	.word	0x0800617f
 80060c0:	080063c5 	.word	0x080063c5
 80060c4:	0800642b 	.word	0x0800642b
 80060c8:	08006223 	.word	0x08006223
 80060cc:	0800636b 	.word	0x0800636b
 80060d0:	08006259 	.word	0x08006259
 80060d4:	08006279 	.word	0x08006279
 80060d8:	08006299 	.word	0x08006299
 80060dc:	080062dd 	.word	0x080062dd
 80060e0:	080063ad 	.word	0x080063ad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 819e 	beq.w	800642e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80060f8:	20c8      	movs	r0, #200	; 0xc8
 80060fa:	f001 fd6b 	bl	8007bd4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fc61 	bl	80079c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006114:	e18b      	b.n	800642e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800611c:	2b01      	cmp	r3, #1
 800611e:	d107      	bne.n	8006130 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800612e:	e18d      	b.n	800644c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800613a:	d914      	bls.n	8006166 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006142:	3301      	adds	r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006152:	2b03      	cmp	r3, #3
 8006154:	d903      	bls.n	800615e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	220d      	movs	r2, #13
 800615a:	701a      	strb	r2, [r3, #0]
      break;
 800615c:	e176      	b.n	800644c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
      break;
 8006164:	e172      	b.n	800644c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800616c:	f103 020a 	add.w	r2, r3, #10
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006176:	200a      	movs	r0, #10
 8006178:	f001 fd2c 	bl	8007bd4 <USBH_Delay>
      break;
 800617c:	e166      	b.n	800644c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800618e:	2104      	movs	r1, #4
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006194:	2064      	movs	r0, #100	; 0x64
 8006196:	f001 fd1d 	bl	8007bd4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fbec 	bl	8007978 <USBH_LL_GetSpeed>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2205      	movs	r2, #5
 80061ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fa05 	bl	80075c2 <USBH_AllocPipe>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80061c0:	2180      	movs	r1, #128	; 0x80
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f9fd 	bl	80075c2 <USBH_AllocPipe>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	7919      	ldrb	r1, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80061e4:	b292      	uxth	r2, r2
 80061e6:	9202      	str	r2, [sp, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	9201      	str	r2, [sp, #4]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4603      	mov	r3, r0
 80061f0:	2280      	movs	r2, #128	; 0x80
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 f9b6 	bl	8007564 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7959      	ldrb	r1, [r3, #5]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800620c:	b292      	uxth	r2, r2
 800620e:	9202      	str	r2, [sp, #8]
 8006210:	2200      	movs	r2, #0
 8006212:	9201      	str	r2, [sp, #4]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	4603      	mov	r3, r0
 8006218:	2200      	movs	r2, #0
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 f9a2 	bl	8007564 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006220:	e114      	b.n	800644c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f918 	bl	8006458 <USBH_HandleEnum>
 8006228:	4603      	mov	r3, r0
 800622a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 80fe 	bne.w	8006432 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006244:	2b01      	cmp	r3, #1
 8006246:	d103      	bne.n	8006250 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2208      	movs	r2, #8
 800624c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800624e:	e0f0      	b.n	8006432 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2207      	movs	r2, #7
 8006254:	701a      	strb	r2, [r3, #0]
      break;
 8006256:	e0ec      	b.n	8006432 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80e9 	beq.w	8006436 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800626a:	2101      	movs	r1, #1
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2208      	movs	r2, #8
 8006274:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006276:	e0de      	b.n	8006436 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800627e:	b29b      	uxth	r3, r3
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc2c 	bl	8006ae0 <USBH_SetCfg>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 80d5 	bne.w	800643a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2209      	movs	r2, #9
 8006294:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006296:	e0d0      	b.n	800643a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80062a6:	2101      	movs	r1, #1
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fc3c 	bl	8006b26 <USBH_SetFeature>
 80062ae:	4603      	mov	r3, r0
 80062b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	220a      	movs	r2, #10
 80062be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062c0:	e0bd      	b.n	800643e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	f040 80b9 	bne.w	800643e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	220a      	movs	r2, #10
 80062d0:	701a      	strb	r2, [r3, #0]
      break;
 80062d2:	e0b4      	b.n	800643e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	220a      	movs	r2, #10
 80062d8:	701a      	strb	r2, [r3, #0]
      break;
 80062da:	e0b0      	b.n	800643e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 80ad 	beq.w	8006442 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	73fb      	strb	r3, [r7, #15]
 80062f4:	e016      	b.n	8006324 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80062f6:	7bfa      	ldrb	r2, [r7, #15]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	32de      	adds	r2, #222	; 0xde
 80062fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006300:	791a      	ldrb	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006308:	429a      	cmp	r2, r3
 800630a:	d108      	bne.n	800631e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800630c:	7bfa      	ldrb	r2, [r7, #15]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32de      	adds	r2, #222	; 0xde
 8006312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800631c:	e005      	b.n	800632a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	3301      	adds	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0e5      	beq.n	80062f6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d016      	beq.n	8006362 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2206      	movs	r2, #6
 800634a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006352:	2103      	movs	r1, #3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006358:	e073      	b.n	8006442 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	220d      	movs	r2, #13
 800635e:	701a      	strb	r2, [r3, #0]
      break;
 8006360:	e06f      	b.n	8006442 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	220d      	movs	r2, #13
 8006366:	701a      	strb	r2, [r3, #0]
      break;
 8006368:	e06b      	b.n	8006442 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d017      	beq.n	80063a4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
 8006380:	4603      	mov	r3, r0
 8006382:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d103      	bne.n	8006394 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	220b      	movs	r2, #11
 8006390:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006392:	e058      	b.n	8006446 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006394:	7bbb      	ldrb	r3, [r7, #14]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d154      	bne.n	8006446 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	220d      	movs	r2, #13
 80063a0:	701a      	strb	r2, [r3, #0]
      break;
 80063a2:	e050      	b.n	8006446 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	220d      	movs	r2, #13
 80063a8:	701a      	strb	r2, [r3, #0]
      break;
 80063aa:	e04c      	b.n	8006446 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d049      	beq.n	800644a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
      }
      break;
 80063c2:	e042      	b.n	800644a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff fd67 	bl	8005ea0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006400:	2105      	movs	r1, #5
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	d107      	bne.n	8006422 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fe20 	bl	8006060 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006420:	e014      	b.n	800644c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 fa72 	bl	800790c <USBH_LL_Start>
      break;
 8006428:	e010      	b.n	800644c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800642a:	bf00      	nop
 800642c:	e00e      	b.n	800644c <USBH_Process+0x3cc>
      break;
 800642e:	bf00      	nop
 8006430:	e00c      	b.n	800644c <USBH_Process+0x3cc>
      break;
 8006432:	bf00      	nop
 8006434:	e00a      	b.n	800644c <USBH_Process+0x3cc>
    break;
 8006436:	bf00      	nop
 8006438:	e008      	b.n	800644c <USBH_Process+0x3cc>
      break;
 800643a:	bf00      	nop
 800643c:	e006      	b.n	800644c <USBH_Process+0x3cc>
      break;
 800643e:	bf00      	nop
 8006440:	e004      	b.n	800644c <USBH_Process+0x3cc>
      break;
 8006442:	bf00      	nop
 8006444:	e002      	b.n	800644c <USBH_Process+0x3cc>
      break;
 8006446:	bf00      	nop
 8006448:	e000      	b.n	800644c <USBH_Process+0x3cc>
      break;
 800644a:	bf00      	nop
  }
  return USBH_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop

08006458 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af04      	add	r7, sp, #16
 800645e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006464:	2301      	movs	r3, #1
 8006466:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b07      	cmp	r3, #7
 800646e:	f200 81c1 	bhi.w	80067f4 <USBH_HandleEnum+0x39c>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <USBH_HandleEnum+0x20>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	08006499 	.word	0x08006499
 800647c:	08006557 	.word	0x08006557
 8006480:	080065c1 	.word	0x080065c1
 8006484:	0800664f 	.word	0x0800664f
 8006488:	080066b9 	.word	0x080066b9
 800648c:	08006729 	.word	0x08006729
 8006490:	0800676f 	.word	0x0800676f
 8006494:	080067b5 	.word	0x080067b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006498:	2108      	movs	r1, #8
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa50 	bl	8006940 <USBH_Get_DevDesc>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d130      	bne.n	800650c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7919      	ldrb	r1, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80064ce:	b292      	uxth	r2, r2
 80064d0:	9202      	str	r2, [sp, #8]
 80064d2:	2200      	movs	r2, #0
 80064d4:	9201      	str	r2, [sp, #4]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	4603      	mov	r3, r0
 80064da:	2280      	movs	r2, #128	; 0x80
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 f841 	bl	8007564 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	7959      	ldrb	r1, [r3, #5]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064f6:	b292      	uxth	r2, r2
 80064f8:	9202      	str	r2, [sp, #8]
 80064fa:	2200      	movs	r2, #0
 80064fc:	9201      	str	r2, [sp, #4]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4603      	mov	r3, r0
 8006502:	2200      	movs	r2, #0
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f82d 	bl	8007564 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800650a:	e175      	b.n	80067f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b03      	cmp	r3, #3
 8006510:	f040 8172 	bne.w	80067f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800651a:	3301      	adds	r3, #1
 800651c:	b2da      	uxtb	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800652a:	2b03      	cmp	r3, #3
 800652c:	d903      	bls.n	8006536 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	220d      	movs	r2, #13
 8006532:	701a      	strb	r2, [r3, #0]
      break;
 8006534:	e160      	b.n	80067f8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	795b      	ldrb	r3, [r3, #5]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 f861 	bl	8007604 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	791b      	ldrb	r3, [r3, #4]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 f85b 	bl	8007604 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
      break;
 8006554:	e150      	b.n	80067f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006556:	2112      	movs	r1, #18
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f9f1 	bl	8006940 <USBH_Get_DevDesc>
 800655e:	4603      	mov	r3, r0
 8006560:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800656e:	e145      	b.n	80067fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	2b03      	cmp	r3, #3
 8006574:	f040 8142 	bne.w	80067fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800657e:	3301      	adds	r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800658e:	2b03      	cmp	r3, #3
 8006590:	d903      	bls.n	800659a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	220d      	movs	r2, #13
 8006596:	701a      	strb	r2, [r3, #0]
      break;
 8006598:	e130      	b.n	80067fc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	795b      	ldrb	r3, [r3, #5]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 f82f 	bl	8007604 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	791b      	ldrb	r3, [r3, #4]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 f829 	bl	8007604 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
      break;
 80065be:	e11d      	b.n	80067fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80065c0:	2101      	movs	r1, #1
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa68 	bl	8006a98 <USBH_SetAddress>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d132      	bne.n	8006638 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80065d2:	2002      	movs	r0, #2
 80065d4:	f001 fafe 	bl	8007bd4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2203      	movs	r2, #3
 80065e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	7919      	ldrb	r1, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80065fa:	b292      	uxth	r2, r2
 80065fc:	9202      	str	r2, [sp, #8]
 80065fe:	2200      	movs	r2, #0
 8006600:	9201      	str	r2, [sp, #4]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4603      	mov	r3, r0
 8006606:	2280      	movs	r2, #128	; 0x80
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 ffab 	bl	8007564 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7959      	ldrb	r1, [r3, #5]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006622:	b292      	uxth	r2, r2
 8006624:	9202      	str	r2, [sp, #8]
 8006626:	2200      	movs	r2, #0
 8006628:	9201      	str	r2, [sp, #4]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4603      	mov	r3, r0
 800662e:	2200      	movs	r2, #0
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 ff97 	bl	8007564 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006636:	e0e3      	b.n	8006800 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	2b03      	cmp	r3, #3
 800663c:	f040 80e0 	bne.w	8006800 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	220d      	movs	r2, #13
 8006644:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	705a      	strb	r2, [r3, #1]
      break;
 800664c:	e0d8      	b.n	8006800 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800664e:	2109      	movs	r1, #9
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f99d 	bl	8006990 <USBH_Get_CfgDesc>
 8006656:	4603      	mov	r3, r0
 8006658:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2204      	movs	r2, #4
 8006664:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006666:	e0cd      	b.n	8006804 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	2b03      	cmp	r3, #3
 800666c:	f040 80ca 	bne.w	8006804 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006676:	3301      	adds	r3, #1
 8006678:	b2da      	uxtb	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006686:	2b03      	cmp	r3, #3
 8006688:	d903      	bls.n	8006692 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	220d      	movs	r2, #13
 800668e:	701a      	strb	r2, [r3, #0]
      break;
 8006690:	e0b8      	b.n	8006804 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	795b      	ldrb	r3, [r3, #5]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 ffb3 	bl	8007604 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	791b      	ldrb	r3, [r3, #4]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 ffad 	bl	8007604 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
      break;
 80066b6:	e0a5      	b.n	8006804 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f965 	bl	8006990 <USBH_Get_CfgDesc>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2205      	movs	r2, #5
 80066d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80066d6:	e097      	b.n	8006808 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	f040 8094 	bne.w	8006808 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066e6:	3301      	adds	r3, #1
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d903      	bls.n	8006702 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	220d      	movs	r2, #13
 80066fe:	701a      	strb	r2, [r3, #0]
      break;
 8006700:	e082      	b.n	8006808 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	795b      	ldrb	r3, [r3, #5]
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 ff7b 	bl	8007604 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	791b      	ldrb	r3, [r3, #4]
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 ff75 	bl	8007604 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
      break;
 8006726:	e06f      	b.n	8006808 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800672e:	2b00      	cmp	r3, #0
 8006730:	d019      	beq.n	8006766 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800673e:	23ff      	movs	r3, #255	; 0xff
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f949 	bl	80069d8 <USBH_Get_StringDesc>
 8006746:	4603      	mov	r3, r0
 8006748:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2206      	movs	r2, #6
 8006754:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006756:	e059      	b.n	800680c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d156      	bne.n	800680c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2206      	movs	r2, #6
 8006762:	705a      	strb	r2, [r3, #1]
      break;
 8006764:	e052      	b.n	800680c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2206      	movs	r2, #6
 800676a:	705a      	strb	r2, [r3, #1]
      break;
 800676c:	e04e      	b.n	800680c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006774:	2b00      	cmp	r3, #0
 8006776:	d019      	beq.n	80067ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006784:	23ff      	movs	r3, #255	; 0xff
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f926 	bl	80069d8 <USBH_Get_StringDesc>
 800678c:	4603      	mov	r3, r0
 800678e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2207      	movs	r2, #7
 800679a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800679c:	e038      	b.n	8006810 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d135      	bne.n	8006810 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2207      	movs	r2, #7
 80067a8:	705a      	strb	r2, [r3, #1]
      break;
 80067aa:	e031      	b.n	8006810 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2207      	movs	r2, #7
 80067b0:	705a      	strb	r2, [r3, #1]
      break;
 80067b2:	e02d      	b.n	8006810 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d017      	beq.n	80067ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80067ca:	23ff      	movs	r3, #255	; 0xff
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f903 	bl	80069d8 <USBH_Get_StringDesc>
 80067d2:	4603      	mov	r3, r0
 80067d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80067e0:	e018      	b.n	8006814 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d115      	bne.n	8006814 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]
      break;
 80067ec:	e012      	b.n	8006814 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
      break;
 80067f2:	e00f      	b.n	8006814 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80067f4:	bf00      	nop
 80067f6:	e00e      	b.n	8006816 <USBH_HandleEnum+0x3be>
      break;
 80067f8:	bf00      	nop
 80067fa:	e00c      	b.n	8006816 <USBH_HandleEnum+0x3be>
      break;
 80067fc:	bf00      	nop
 80067fe:	e00a      	b.n	8006816 <USBH_HandleEnum+0x3be>
      break;
 8006800:	bf00      	nop
 8006802:	e008      	b.n	8006816 <USBH_HandleEnum+0x3be>
      break;
 8006804:	bf00      	nop
 8006806:	e006      	b.n	8006816 <USBH_HandleEnum+0x3be>
      break;
 8006808:	bf00      	nop
 800680a:	e004      	b.n	8006816 <USBH_HandleEnum+0x3be>
      break;
 800680c:	bf00      	nop
 800680e:	e002      	b.n	8006816 <USBH_HandleEnum+0x3be>
      break;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <USBH_HandleEnum+0x3be>
      break;
 8006814:	bf00      	nop
  }
  return Status;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f804 	bl	8006862 <USBH_HandleSof>
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b0b      	cmp	r3, #11
 8006872:	d10a      	bne.n	800688a <USBH_HandleSof+0x28>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
  }
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80068a2:	bf00      	nop
}
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80068be:	bf00      	nop
}
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 f812 	bl	8007942 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	791b      	ldrb	r3, [r3, #4]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fe6d 	bl	8007604 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	795b      	ldrb	r3, [r3, #5]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fe67 	bl	8007604 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af02      	add	r7, sp, #8
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	b29b      	uxth	r3, r3
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800695e:	2100      	movs	r1, #0
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f864 	bl	8006a2e <USBH_GetDescriptor>
 8006966:	4603      	mov	r3, r0
 8006968:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	b292      	uxth	r2, r2
 8006980:	4619      	mov	r1, r3
 8006982:	f000 f918 	bl	8006bb6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006986:	7bfb      	ldrb	r3, [r7, #15]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af02      	add	r7, sp, #8
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	331c      	adds	r3, #28
 80069a0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80069a2:	887b      	ldrh	r3, [r7, #2]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ac:	2100      	movs	r1, #0
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f83d 	bl	8006a2e <USBH_GetDescriptor>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d107      	bne.n	80069ce <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80069be:	887b      	ldrh	r3, [r7, #2]
 80069c0:	461a      	mov	r2, r3
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f987 	bl	8006cd8 <USBH_ParseCfgDesc>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	461a      	mov	r2, r3
 80069e4:	460b      	mov	r3, r1
 80069e6:	72fb      	strb	r3, [r7, #11]
 80069e8:	4613      	mov	r3, r2
 80069ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80069f4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80069fc:	893b      	ldrh	r3, [r7, #8]
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	460b      	mov	r3, r1
 8006a02:	2100      	movs	r1, #0
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f812 	bl	8006a2e <USBH_GetDescriptor>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d107      	bne.n	8006a24 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a1a:	893a      	ldrh	r2, [r7, #8]
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fb24 	bl	800706c <USBH_ParseStringDesc>
  }

  return status;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	607b      	str	r3, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	72fb      	strb	r3, [r7, #11]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	789b      	ldrb	r3, [r3, #2]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d11c      	bne.n	8006a82 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2206      	movs	r2, #6
 8006a58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	893a      	ldrh	r2, [r7, #8]
 8006a5e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006a60:	893b      	ldrh	r3, [r7, #8]
 8006a62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6a:	d104      	bne.n	8006a76 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f240 4209 	movw	r2, #1033	; 0x409
 8006a72:	829a      	strh	r2, [r3, #20]
 8006a74:	e002      	b.n	8006a7c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8b3a      	ldrh	r2, [r7, #24]
 8006a80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006a82:	8b3b      	ldrh	r3, [r7, #24]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fb3d 	bl	8007108 <USBH_CtlReq>
 8006a8e:	4603      	mov	r3, r0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	789b      	ldrb	r3, [r3, #2]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d10f      	bne.n	8006acc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2205      	movs	r2, #5
 8006ab6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006acc:	2200      	movs	r2, #0
 8006ace:	2100      	movs	r1, #0
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fb19 	bl	8007108 <USBH_CtlReq>
 8006ad6:	4603      	mov	r3, r0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	789b      	ldrb	r3, [r3, #2]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d10e      	bne.n	8006b12 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2209      	movs	r2, #9
 8006afe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	887a      	ldrh	r2, [r7, #2]
 8006b04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 faf6 	bl	8007108 <USBH_CtlReq>
 8006b1c:	4603      	mov	r3, r0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	789b      	ldrb	r3, [r3, #2]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d10f      	bne.n	8006b5a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2203      	movs	r2, #3
 8006b44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fad2 	bl	8007108 <USBH_CtlReq>
 8006b64:	4603      	mov	r3, r0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	789b      	ldrb	r3, [r3, #2]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d10f      	bne.n	8006ba2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 faae 	bl	8007108 <USBH_CtlReq>
 8006bac:	4603      	mov	r3, r0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	781a      	ldrb	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	785a      	ldrb	r2, [r3, #1]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	3303      	adds	r3, #3
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4313      	orrs	r3, r2
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	791a      	ldrb	r2, [r3, #4]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	795a      	ldrb	r2, [r3, #5]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	799a      	ldrb	r2, [r3, #6]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	79da      	ldrb	r2, [r3, #7]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	79db      	ldrb	r3, [r3, #7]
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	dc11      	bgt.n	8006c3c <USBH_ParseDevDesc+0x86>
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	db16      	blt.n	8006c4a <USBH_ParseDevDesc+0x94>
 8006c1c:	3b08      	subs	r3, #8
 8006c1e:	2201      	movs	r2, #1
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <USBH_ParseDevDesc+0x8a>
 8006c3a:	e006      	b.n	8006c4a <USBH_ParseDevDesc+0x94>
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d104      	bne.n	8006c4a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	79da      	ldrb	r2, [r3, #7]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	71da      	strb	r2, [r3, #7]
      break;
 8006c48:	e003      	b.n	8006c52 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2240      	movs	r2, #64	; 0x40
 8006c4e:	71da      	strb	r2, [r3, #7]
      break;
 8006c50:	bf00      	nop
  }

  if (length > 8U)
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d939      	bls.n	8006ccc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	3309      	adds	r3, #9
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	330a      	adds	r3, #10
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	330b      	adds	r3, #11
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	330c      	adds	r3, #12
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	330d      	adds	r3, #13
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	7b9a      	ldrb	r2, [r3, #14]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	7bda      	ldrb	r2, [r3, #15]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	7c1a      	ldrb	r2, [r3, #16]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	7c5a      	ldrb	r2, [r3, #17]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	745a      	strb	r2, [r3, #17]
  }
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08c      	sub	sp, #48	; 0x30
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006cec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	781a      	ldrb	r2, [r3, #0]
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	785a      	ldrb	r2, [r3, #1]
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	3303      	adds	r3, #3
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d34:	bf28      	it	cs
 8006d36:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	791a      	ldrb	r2, [r3, #4]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	795a      	ldrb	r2, [r3, #5]
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	799a      	ldrb	r2, [r3, #6]
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	79da      	ldrb	r2, [r3, #7]
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	7a1a      	ldrb	r2, [r3, #8]
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b09      	cmp	r3, #9
 8006d6e:	d002      	beq.n	8006d76 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	2209      	movs	r2, #9
 8006d74:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b09      	cmp	r3, #9
 8006d7a:	f240 809d 	bls.w	8006eb8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006d7e:	2309      	movs	r3, #9
 8006d80:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d86:	e081      	b.n	8006e8c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d88:	f107 0316 	add.w	r3, r7, #22
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d90:	f000 f99f 	bl	80070d2 <USBH_GetNextDesc>
 8006d94:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	785b      	ldrb	r3, [r3, #1]
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d176      	bne.n	8006e8c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b09      	cmp	r3, #9
 8006da4:	d002      	beq.n	8006dac <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	2209      	movs	r2, #9
 8006daa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db0:	221a      	movs	r2, #26
 8006db2:	fb02 f303 	mul.w	r3, r2, r3
 8006db6:	3308      	adds	r3, #8
 8006db8:	6a3a      	ldr	r2, [r7, #32]
 8006dba:	4413      	add	r3, r2
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc2:	69f8      	ldr	r0, [r7, #28]
 8006dc4:	f000 f87e 	bl	8006ec4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006dd2:	e043      	b.n	8006e5c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006dd4:	f107 0316 	add.w	r3, r7, #22
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ddc:	f000 f979 	bl	80070d2 <USBH_GetNextDesc>
 8006de0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	2b05      	cmp	r3, #5
 8006de8:	d138      	bne.n	8006e5c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	795b      	ldrb	r3, [r3, #5]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d10f      	bne.n	8006e12 <USBH_ParseCfgDesc+0x13a>
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	799b      	ldrb	r3, [r3, #6]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d10b      	bne.n	8006e12 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	79db      	ldrb	r3, [r3, #7]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10f      	bne.n	8006e22 <USBH_ParseCfgDesc+0x14a>
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b09      	cmp	r3, #9
 8006e08:	d00b      	beq.n	8006e22 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	2209      	movs	r2, #9
 8006e0e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006e10:	e007      	b.n	8006e22 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b07      	cmp	r3, #7
 8006e18:	d004      	beq.n	8006e24 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	2207      	movs	r2, #7
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e000      	b.n	8006e24 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006e22:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006e2c:	3201      	adds	r2, #1
 8006e2e:	00d2      	lsls	r2, r2, #3
 8006e30:	211a      	movs	r1, #26
 8006e32:	fb01 f303 	mul.w	r3, r1, r3
 8006e36:	4413      	add	r3, r2
 8006e38:	3308      	adds	r3, #8
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3304      	adds	r3, #4
 8006e40:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e44:	69b9      	ldr	r1, [r7, #24]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f86b 	bl	8006f22 <USBH_ParseEPDesc>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e56:	3301      	adds	r3, #1
 8006e58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	791b      	ldrb	r3, [r3, #4]
 8006e60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d204      	bcs.n	8006e72 <USBH_ParseCfgDesc+0x19a>
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	885a      	ldrh	r2, [r3, #2]
 8006e6c:	8afb      	ldrh	r3, [r7, #22]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d8b0      	bhi.n	8006dd4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	791b      	ldrb	r3, [r3, #4]
 8006e76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d201      	bcs.n	8006e82 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e01c      	b.n	8006ebc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e86:	3301      	adds	r3, #1
 8006e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d805      	bhi.n	8006ea0 <USBH_ParseCfgDesc+0x1c8>
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	885a      	ldrh	r2, [r3, #2]
 8006e98:	8afb      	ldrh	r3, [r7, #22]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	f63f af74 	bhi.w	8006d88 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	791b      	ldrb	r3, [r3, #4]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	bf28      	it	cs
 8006ea8:	2302      	movcs	r3, #2
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d201      	bcs.n	8006eb8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e001      	b.n	8006ebc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3730      	adds	r7, #48	; 0x30
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781a      	ldrb	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	785a      	ldrb	r2, [r3, #1]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	789a      	ldrb	r2, [r3, #2]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	78da      	ldrb	r2, [r3, #3]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	791a      	ldrb	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	795a      	ldrb	r2, [r3, #5]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	799a      	ldrb	r2, [r3, #6]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	79da      	ldrb	r2, [r3, #7]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	7a1a      	ldrb	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	721a      	strb	r2, [r3, #8]
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b087      	sub	sp, #28
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	785a      	ldrb	r2, [r3, #1]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	789a      	ldrb	r2, [r3, #2]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	78da      	ldrb	r2, [r3, #3]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3304      	adds	r3, #4
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3305      	adds	r3, #5
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	799a      	ldrb	r2, [r3, #6]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	889b      	ldrh	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	75fb      	strb	r3, [r7, #23]
 8006f82:	e033      	b.n	8006fec <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	889b      	ldrh	r3, [r3, #4]
 8006f88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f8c:	f023 0307 	bic.w	r3, r3, #7
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	889b      	ldrh	r3, [r3, #4]
 8006f9a:	b21a      	sxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b299      	uxth	r1, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3305      	adds	r3, #5
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d110      	bne.n	8006fde <USBH_ParseEPDesc+0xbc>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	b299      	uxth	r1, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3305      	adds	r3, #5
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	b21b      	sxth	r3, r3
 8006fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fda:	b21b      	sxth	r3, r3
 8006fdc:	e001      	b.n	8006fe2 <USBH_ParseEPDesc+0xc0>
 8006fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	b21b      	sxth	r3, r3
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d116      	bne.n	8007024 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	78db      	ldrb	r3, [r3, #3]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d005      	beq.n	800700e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	78db      	ldrb	r3, [r3, #3]
 8007006:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800700a:	2b03      	cmp	r3, #3
 800700c:	d127      	bne.n	800705e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	799b      	ldrb	r3, [r3, #6]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <USBH_ParseEPDesc+0xfc>
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	799b      	ldrb	r3, [r3, #6]
 800701a:	2b10      	cmp	r3, #16
 800701c:	d91f      	bls.n	800705e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800701e:	2303      	movs	r3, #3
 8007020:	75fb      	strb	r3, [r7, #23]
 8007022:	e01c      	b.n	800705e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	78db      	ldrb	r3, [r3, #3]
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	2b01      	cmp	r3, #1
 800702e:	d10a      	bne.n	8007046 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	799b      	ldrb	r3, [r3, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <USBH_ParseEPDesc+0x11e>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	799b      	ldrb	r3, [r3, #6]
 800703c:	2b10      	cmp	r3, #16
 800703e:	d90e      	bls.n	800705e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007040:	2303      	movs	r3, #3
 8007042:	75fb      	strb	r3, [r7, #23]
 8007044:	e00b      	b.n	800705e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	78db      	ldrb	r3, [r3, #3]
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b03      	cmp	r3, #3
 8007050:	d105      	bne.n	800705e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	799b      	ldrb	r3, [r3, #6]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800705a:	2303      	movs	r3, #3
 800705c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800705e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007060:	4618      	mov	r0, r3
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b03      	cmp	r3, #3
 8007082:	d120      	bne.n	80070c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	1e9a      	subs	r2, r3, #2
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	4293      	cmp	r3, r2
 800708e:	bf28      	it	cs
 8007090:	4613      	movcs	r3, r2
 8007092:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3302      	adds	r3, #2
 8007098:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800709a:	2300      	movs	r3, #0
 800709c:	82fb      	strh	r3, [r7, #22]
 800709e:	e00b      	b.n	80070b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80070a0:	8afb      	ldrh	r3, [r7, #22]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80070b2:	8afb      	ldrh	r3, [r7, #22]
 80070b4:	3302      	adds	r3, #2
 80070b6:	82fb      	strh	r3, [r7, #22]
 80070b8:	8afa      	ldrh	r2, [r7, #22]
 80070ba:	8abb      	ldrh	r3, [r7, #20]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d3ef      	bcc.n	80070a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
  }
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	881a      	ldrh	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070fa:	68fb      	ldr	r3, [r7, #12]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007116:	2301      	movs	r3, #1
 8007118:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	789b      	ldrb	r3, [r3, #2]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d002      	beq.n	8007128 <USBH_CtlReq+0x20>
 8007122:	2b02      	cmp	r3, #2
 8007124:	d00f      	beq.n	8007146 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007126:	e027      	b.n	8007178 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	88fa      	ldrh	r2, [r7, #6]
 8007132:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2202      	movs	r2, #2
 800713e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007140:	2301      	movs	r3, #1
 8007142:	75fb      	strb	r3, [r7, #23]
      break;
 8007144:	e018      	b.n	8007178 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 f81c 	bl	8007184 <USBH_HandleControl>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <USBH_CtlReq+0x54>
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d106      	bne.n	800716a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	761a      	strb	r2, [r3, #24]
      break;
 8007168:	e005      	b.n	8007176 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d102      	bne.n	8007176 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2201      	movs	r2, #1
 8007174:	709a      	strb	r2, [r3, #2]
      break;
 8007176:	bf00      	nop
  }
  return status;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af02      	add	r7, sp, #8
 800718a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007190:	2300      	movs	r3, #0
 8007192:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	7e1b      	ldrb	r3, [r3, #24]
 8007198:	3b01      	subs	r3, #1
 800719a:	2b0a      	cmp	r3, #10
 800719c:	f200 8156 	bhi.w	800744c <USBH_HandleControl+0x2c8>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <USBH_HandleControl+0x24>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	080071ef 	.word	0x080071ef
 80071b0:	08007259 	.word	0x08007259
 80071b4:	0800727f 	.word	0x0800727f
 80071b8:	080072b7 	.word	0x080072b7
 80071bc:	080072e1 	.word	0x080072e1
 80071c0:	08007333 	.word	0x08007333
 80071c4:	08007355 	.word	0x08007355
 80071c8:	08007391 	.word	0x08007391
 80071cc:	080073b7 	.word	0x080073b7
 80071d0:	080073f5 	.word	0x080073f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f103 0110 	add.w	r1, r3, #16
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	795b      	ldrb	r3, [r3, #5]
 80071de:	461a      	mov	r2, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f943 	bl	800746c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	761a      	strb	r2, [r3, #24]
      break;
 80071ec:	e139      	b.n	8007462 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	795b      	ldrb	r3, [r3, #5]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fc93 	bl	8007b20 <USBH_LL_GetURBState>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d11e      	bne.n	8007242 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	7c1b      	ldrb	r3, [r3, #16]
 8007208:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800720c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	8adb      	ldrh	r3, [r3, #22]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007216:	7b7b      	ldrb	r3, [r7, #13]
 8007218:	2b80      	cmp	r3, #128	; 0x80
 800721a:	d103      	bne.n	8007224 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2203      	movs	r2, #3
 8007220:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007222:	e115      	b.n	8007450 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2205      	movs	r2, #5
 8007228:	761a      	strb	r2, [r3, #24]
      break;
 800722a:	e111      	b.n	8007450 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800722c:	7b7b      	ldrb	r3, [r7, #13]
 800722e:	2b80      	cmp	r3, #128	; 0x80
 8007230:	d103      	bne.n	800723a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2209      	movs	r2, #9
 8007236:	761a      	strb	r2, [r3, #24]
      break;
 8007238:	e10a      	b.n	8007450 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2207      	movs	r2, #7
 800723e:	761a      	strb	r2, [r3, #24]
      break;
 8007240:	e106      	b.n	8007450 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d003      	beq.n	8007250 <USBH_HandleControl+0xcc>
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b02      	cmp	r3, #2
 800724c:	f040 8100 	bne.w	8007450 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	220b      	movs	r2, #11
 8007254:	761a      	strb	r2, [r3, #24]
      break;
 8007256:	e0fb      	b.n	8007450 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800725e:	b29a      	uxth	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6899      	ldr	r1, [r3, #8]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	899a      	ldrh	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	791b      	ldrb	r3, [r3, #4]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f93a 	bl	80074ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2204      	movs	r2, #4
 800727a:	761a      	strb	r2, [r3, #24]
      break;
 800727c:	e0f1      	b.n	8007462 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	791b      	ldrb	r3, [r3, #4]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fc4b 	bl	8007b20 <USBH_LL_GetURBState>
 800728a:	4603      	mov	r3, r0
 800728c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d102      	bne.n	800729a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2209      	movs	r2, #9
 8007298:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b05      	cmp	r3, #5
 800729e:	d102      	bne.n	80072a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80072a0:	2303      	movs	r3, #3
 80072a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072a4:	e0d6      	b.n	8007454 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	f040 80d3 	bne.w	8007454 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	220b      	movs	r2, #11
 80072b2:	761a      	strb	r2, [r3, #24]
      break;
 80072b4:	e0ce      	b.n	8007454 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6899      	ldr	r1, [r3, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	899a      	ldrh	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	795b      	ldrb	r3, [r3, #5]
 80072c2:	2001      	movs	r0, #1
 80072c4:	9000      	str	r0, [sp, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f8ea 	bl	80074a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2206      	movs	r2, #6
 80072dc:	761a      	strb	r2, [r3, #24]
      break;
 80072de:	e0c0      	b.n	8007462 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	795b      	ldrb	r3, [r3, #5]
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fc1a 	bl	8007b20 <USBH_LL_GetURBState>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d103      	bne.n	80072fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2207      	movs	r2, #7
 80072fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072fc:	e0ac      	b.n	8007458 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b05      	cmp	r3, #5
 8007302:	d105      	bne.n	8007310 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	220c      	movs	r2, #12
 8007308:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800730a:	2303      	movs	r3, #3
 800730c:	73fb      	strb	r3, [r7, #15]
      break;
 800730e:	e0a3      	b.n	8007458 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d103      	bne.n	800731e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2205      	movs	r2, #5
 800731a:	761a      	strb	r2, [r3, #24]
      break;
 800731c:	e09c      	b.n	8007458 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b04      	cmp	r3, #4
 8007322:	f040 8099 	bne.w	8007458 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	220b      	movs	r2, #11
 800732a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800732c:	2302      	movs	r3, #2
 800732e:	73fb      	strb	r3, [r7, #15]
      break;
 8007330:	e092      	b.n	8007458 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	791b      	ldrb	r3, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	2100      	movs	r1, #0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f8d5 	bl	80074ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2208      	movs	r2, #8
 8007350:	761a      	strb	r2, [r3, #24]

      break;
 8007352:	e086      	b.n	8007462 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	791b      	ldrb	r3, [r3, #4]
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fbe0 	bl	8007b20 <USBH_LL_GetURBState>
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d105      	bne.n	8007376 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	220d      	movs	r2, #13
 800736e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007374:	e072      	b.n	800745c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	2b04      	cmp	r3, #4
 800737a:	d103      	bne.n	8007384 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	220b      	movs	r2, #11
 8007380:	761a      	strb	r2, [r3, #24]
      break;
 8007382:	e06b      	b.n	800745c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	2b05      	cmp	r3, #5
 8007388:	d168      	bne.n	800745c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800738a:	2303      	movs	r3, #3
 800738c:	73fb      	strb	r3, [r7, #15]
      break;
 800738e:	e065      	b.n	800745c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	795b      	ldrb	r3, [r3, #5]
 8007394:	2201      	movs	r2, #1
 8007396:	9200      	str	r2, [sp, #0]
 8007398:	2200      	movs	r2, #0
 800739a:	2100      	movs	r1, #0
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f87f 	bl	80074a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	220a      	movs	r2, #10
 80073b2:	761a      	strb	r2, [r3, #24]
      break;
 80073b4:	e055      	b.n	8007462 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	795b      	ldrb	r3, [r3, #5]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fbaf 	bl	8007b20 <USBH_LL_GetURBState>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d105      	bne.n	80073d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	220d      	movs	r2, #13
 80073d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073d6:	e043      	b.n	8007460 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d103      	bne.n	80073e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2209      	movs	r2, #9
 80073e2:	761a      	strb	r2, [r3, #24]
      break;
 80073e4:	e03c      	b.n	8007460 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d139      	bne.n	8007460 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	220b      	movs	r2, #11
 80073f0:	761a      	strb	r2, [r3, #24]
      break;
 80073f2:	e035      	b.n	8007460 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7e5b      	ldrb	r3, [r3, #25]
 80073f8:	3301      	adds	r3, #1
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	765a      	strb	r2, [r3, #25]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	7e5b      	ldrb	r3, [r3, #25]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d806      	bhi.n	8007416 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007414:	e025      	b.n	8007462 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800741c:	2106      	movs	r1, #6
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	795b      	ldrb	r3, [r3, #5]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f8e8 	bl	8007604 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	791b      	ldrb	r3, [r3, #4]
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8e2 	bl	8007604 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007446:	2302      	movs	r3, #2
 8007448:	73fb      	strb	r3, [r7, #15]
      break;
 800744a:	e00a      	b.n	8007462 <USBH_HandleControl+0x2de>

    default:
      break;
 800744c:	bf00      	nop
 800744e:	e008      	b.n	8007462 <USBH_HandleControl+0x2de>
      break;
 8007450:	bf00      	nop
 8007452:	e006      	b.n	8007462 <USBH_HandleControl+0x2de>
      break;
 8007454:	bf00      	nop
 8007456:	e004      	b.n	8007462 <USBH_HandleControl+0x2de>
      break;
 8007458:	bf00      	nop
 800745a:	e002      	b.n	8007462 <USBH_HandleControl+0x2de>
      break;
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <USBH_HandleControl+0x2de>
      break;
 8007460:	bf00      	nop
  }

  return status;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af04      	add	r7, sp, #16
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800747a:	79f9      	ldrb	r1, [r7, #7]
 800747c:	2300      	movs	r3, #0
 800747e:	9303      	str	r3, [sp, #12]
 8007480:	2308      	movs	r3, #8
 8007482:	9302      	str	r3, [sp, #8]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	2300      	movs	r3, #0
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	2300      	movs	r3, #0
 800748e:	2200      	movs	r2, #0
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fb14 	bl	8007abe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af04      	add	r7, sp, #16
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4611      	mov	r1, r2
 80074ac:	461a      	mov	r2, r3
 80074ae:	460b      	mov	r3, r1
 80074b0:	80fb      	strh	r3, [r7, #6]
 80074b2:	4613      	mov	r3, r2
 80074b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074c4:	7979      	ldrb	r1, [r7, #5]
 80074c6:	7e3b      	ldrb	r3, [r7, #24]
 80074c8:	9303      	str	r3, [sp, #12]
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	9302      	str	r3, [sp, #8]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	2301      	movs	r3, #1
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	2300      	movs	r3, #0
 80074d8:	2200      	movs	r2, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 faef 	bl	8007abe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b088      	sub	sp, #32
 80074ee:	af04      	add	r7, sp, #16
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	4611      	mov	r1, r2
 80074f6:	461a      	mov	r2, r3
 80074f8:	460b      	mov	r3, r1
 80074fa:	80fb      	strh	r3, [r7, #6]
 80074fc:	4613      	mov	r3, r2
 80074fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007500:	7979      	ldrb	r1, [r7, #5]
 8007502:	2300      	movs	r3, #0
 8007504:	9303      	str	r3, [sp, #12]
 8007506:	88fb      	ldrh	r3, [r7, #6]
 8007508:	9302      	str	r3, [sp, #8]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	2301      	movs	r3, #1
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	2300      	movs	r3, #0
 8007514:	2201      	movs	r2, #1
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fad1 	bl	8007abe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800751c:	2300      	movs	r3, #0

}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b088      	sub	sp, #32
 800752a:	af04      	add	r7, sp, #16
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	4611      	mov	r1, r2
 8007532:	461a      	mov	r2, r3
 8007534:	460b      	mov	r3, r1
 8007536:	71fb      	strb	r3, [r7, #7]
 8007538:	4613      	mov	r3, r2
 800753a:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800753c:	79fb      	ldrb	r3, [r7, #7]
 800753e:	b29b      	uxth	r3, r3
 8007540:	79b9      	ldrb	r1, [r7, #6]
 8007542:	2200      	movs	r2, #0
 8007544:	9203      	str	r2, [sp, #12]
 8007546:	9302      	str	r3, [sp, #8]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	2301      	movs	r3, #1
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2303      	movs	r3, #3
 8007552:	2201      	movs	r2, #1
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fab2 	bl	8007abe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af04      	add	r7, sp, #16
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	4608      	mov	r0, r1
 800756e:	4611      	mov	r1, r2
 8007570:	461a      	mov	r2, r3
 8007572:	4603      	mov	r3, r0
 8007574:	70fb      	strb	r3, [r7, #3]
 8007576:	460b      	mov	r3, r1
 8007578:	70bb      	strb	r3, [r7, #2]
 800757a:	4613      	mov	r3, r2
 800757c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800757e:	7878      	ldrb	r0, [r7, #1]
 8007580:	78ba      	ldrb	r2, [r7, #2]
 8007582:	78f9      	ldrb	r1, [r7, #3]
 8007584:	8b3b      	ldrh	r3, [r7, #24]
 8007586:	9302      	str	r3, [sp, #8]
 8007588:	7d3b      	ldrb	r3, [r7, #20]
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	7c3b      	ldrb	r3, [r7, #16]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4603      	mov	r3, r0
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fa45 	bl	8007a22 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa64 	bl	8007a80 <USBH_LL_ClosePipe>

  return USBH_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f836 	bl	8007640 <USBH_GetFreePipe>
 80075d4:	4603      	mov	r3, r0
 80075d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80075d8:	89fb      	ldrh	r3, [r7, #14]
 80075da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00a      	beq.n	80075f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	89fb      	ldrh	r3, [r7, #14]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	33e0      	adds	r3, #224	; 0xe0
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80075f8:	89fb      	ldrh	r3, [r7, #14]
 80075fa:	b2db      	uxtb	r3, r3
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	2b0f      	cmp	r3, #15
 8007614:	d80d      	bhi.n	8007632 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	33e0      	adds	r3, #224	; 0xe0
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	33e0      	adds	r3, #224	; 0xe0
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
 8007650:	e00f      	b.n	8007672 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	33e0      	adds	r3, #224	; 0xe0
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	b29b      	uxth	r3, r3
 800766a:	e007      	b.n	800767c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	3301      	adds	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	2b0f      	cmp	r3, #15
 8007676:	d9ec      	bls.n	8007652 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007678:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800768c:	2201      	movs	r2, #1
 800768e:	490e      	ldr	r1, [pc, #56]	; (80076c8 <MX_USB_HOST_Init+0x40>)
 8007690:	480e      	ldr	r0, [pc, #56]	; (80076cc <MX_USB_HOST_Init+0x44>)
 8007692:	f7fe fbcb 	bl	8005e2c <USBH_Init>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800769c:	f7f9 f89a 	bl	80007d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 80076a0:	490b      	ldr	r1, [pc, #44]	; (80076d0 <MX_USB_HOST_Init+0x48>)
 80076a2:	480a      	ldr	r0, [pc, #40]	; (80076cc <MX_USB_HOST_Init+0x44>)
 80076a4:	f7fe fc50 	bl	8005f48 <USBH_RegisterClass>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80076ae:	f7f9 f891 	bl	80007d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80076b2:	4806      	ldr	r0, [pc, #24]	; (80076cc <MX_USB_HOST_Init+0x44>)
 80076b4:	f7fe fcd4 	bl	8006060 <USBH_Start>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80076be:	f7f9 f889 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80076c2:	bf00      	nop
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	20000228 	.word	0x20000228
 80076d0:	2000000c 	.word	0x2000000c

080076d4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80076d8:	4802      	ldr	r0, [pc, #8]	; (80076e4 <MX_USB_HOST_Process+0x10>)
 80076da:	f7fe fcd1 	bl	8006080 <USBH_Process>
}
 80076de:	bf00      	nop
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000228 	.word	0x20000228

080076e8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d819      	bhi.n	8007730 <USBH_UserProcess+0x48>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <USBH_UserProcess+0x1c>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007731 	.word	0x08007731
 8007708:	08007721 	.word	0x08007721
 800770c:	08007731 	.word	0x08007731
 8007710:	08007729 	.word	0x08007729
 8007714:	08007719 	.word	0x08007719
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007718:	4b09      	ldr	r3, [pc, #36]	; (8007740 <USBH_UserProcess+0x58>)
 800771a:	2203      	movs	r2, #3
 800771c:	701a      	strb	r2, [r3, #0]
  break;
 800771e:	e008      	b.n	8007732 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <USBH_UserProcess+0x58>)
 8007722:	2202      	movs	r2, #2
 8007724:	701a      	strb	r2, [r3, #0]
  break;
 8007726:	e004      	b.n	8007732 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <USBH_UserProcess+0x58>)
 800772a:	2201      	movs	r2, #1
 800772c:	701a      	strb	r2, [r3, #0]
  break;
 800772e:	e000      	b.n	8007732 <USBH_UserProcess+0x4a>

  default:
  break;
 8007730:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	200000b0 	.word	0x200000b0

08007744 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800774c:	f107 0314 	add.w	r3, r7, #20
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007764:	d13a      	bne.n	80077dc <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <HAL_HCD_MspInit+0xa0>)
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <HAL_HCD_MspInit+0xa0>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	6313      	str	r3, [r2, #48]	; 0x30
 8007776:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <HAL_HCD_MspInit+0xa0>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007782:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007788:	2302      	movs	r3, #2
 800778a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778c:	2300      	movs	r3, #0
 800778e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007790:	2303      	movs	r3, #3
 8007792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007794:	230a      	movs	r3, #10
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007798:	f107 0314 	add.w	r3, r7, #20
 800779c:	4619      	mov	r1, r3
 800779e:	4812      	ldr	r0, [pc, #72]	; (80077e8 <HAL_HCD_MspInit+0xa4>)
 80077a0:	f7f9 fc80 	bl	80010a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <HAL_HCD_MspInit+0xa0>)
 80077a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a8:	4a0e      	ldr	r2, [pc, #56]	; (80077e4 <HAL_HCD_MspInit+0xa0>)
 80077aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ae:	6353      	str	r3, [r2, #52]	; 0x34
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <HAL_HCD_MspInit+0xa0>)
 80077b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b8:	4a0a      	ldr	r2, [pc, #40]	; (80077e4 <HAL_HCD_MspInit+0xa0>)
 80077ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077be:	6453      	str	r3, [r2, #68]	; 0x44
 80077c0:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <HAL_HCD_MspInit+0xa0>)
 80077c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077cc:	2200      	movs	r2, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	2043      	movs	r0, #67	; 0x43
 80077d2:	f7f9 fc14 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077d6:	2043      	movs	r0, #67	; 0x43
 80077d8:	f7f9 fc2d 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077dc:	bf00      	nop
 80077de:	3728      	adds	r7, #40	; 0x28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40023800 	.word	0x40023800
 80077e8:	40020000 	.word	0x40020000

080077ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff f81f 	bl	800683e <USBH_LL_IncTimer>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff f857 	bl	80068ca <USBH_LL_Connect>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff f860 	bl	80068f8 <USBH_LL_Disconnect>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
 800784c:	4613      	mov	r3, r2
 800784e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff f811 	bl	8006892 <USBH_LL_PortEnabled>
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff f811 	bl	80068ae <USBH_LL_PortDisabled>
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d12a      	bne.n	80078fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80078a6:	4a18      	ldr	r2, [pc, #96]	; (8007908 <USBH_LL_Init+0x74>)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a15      	ldr	r2, [pc, #84]	; (8007908 <USBH_LL_Init+0x74>)
 80078b2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <USBH_LL_Init+0x74>)
 80078b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <USBH_LL_Init+0x74>)
 80078c0:	2208      	movs	r2, #8
 80078c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 80078c4:	4b10      	ldr	r3, [pc, #64]	; (8007908 <USBH_LL_Init+0x74>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078ca:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <USBH_LL_Init+0x74>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80078d0:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <USBH_LL_Init+0x74>)
 80078d2:	2202      	movs	r2, #2
 80078d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078d6:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <USBH_LL_Init+0x74>)
 80078d8:	2200      	movs	r2, #0
 80078da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80078dc:	480a      	ldr	r0, [pc, #40]	; (8007908 <USBH_LL_Init+0x74>)
 80078de:	f7f9 fd98 	bl	8001412 <HAL_HCD_Init>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80078e8:	f7f8 ff74 	bl	80007d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80078ec:	4806      	ldr	r0, [pc, #24]	; (8007908 <USBH_LL_Init+0x74>)
 80078ee:	f7fa f97c 	bl	8001bea <HAL_HCD_GetCurrentFrame>
 80078f2:	4603      	mov	r3, r0
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7fe ff92 	bl	8006820 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000600 	.word	0x20000600

0800790c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007922:	4618      	mov	r0, r3
 8007924:	f7fa f8eb 	bl	8001afe <HAL_HCD_Start>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f95c 	bl	8007bec <USBH_Get_USB_Status>
 8007934:	4603      	mov	r3, r0
 8007936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007938:	7bbb      	ldrb	r3, [r7, #14]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007958:	4618      	mov	r0, r3
 800795a:	f7fa f8f3 	bl	8001b44 <HAL_HCD_Stop>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f941 	bl	8007bec <USBH_Get_USB_Status>
 800796a:	4603      	mov	r3, r0
 800796c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800796e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800798a:	4618      	mov	r0, r3
 800798c:	f7fa f93b 	bl	8001c06 <HAL_HCD_GetCurrentSpeed>
 8007990:	4603      	mov	r3, r0
 8007992:	2b02      	cmp	r3, #2
 8007994:	d00c      	beq.n	80079b0 <USBH_LL_GetSpeed+0x38>
 8007996:	2b02      	cmp	r3, #2
 8007998:	d80d      	bhi.n	80079b6 <USBH_LL_GetSpeed+0x3e>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <USBH_LL_GetSpeed+0x2c>
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d003      	beq.n	80079aa <USBH_LL_GetSpeed+0x32>
 80079a2:	e008      	b.n	80079b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]
    break;
 80079a8:	e008      	b.n	80079bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80079aa:	2301      	movs	r3, #1
 80079ac:	73fb      	strb	r3, [r7, #15]
    break;
 80079ae:	e005      	b.n	80079bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80079b0:	2302      	movs	r3, #2
 80079b2:	73fb      	strb	r3, [r7, #15]
    break;
 80079b4:	e002      	b.n	80079bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80079b6:	2301      	movs	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]
    break;
 80079ba:	bf00      	nop
  }
  return  speed;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fa f8ce 	bl	8001b7e <HAL_HCD_ResetPort>
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 f8ff 	bl	8007bec <USBH_Get_USB_Status>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fa f8d5 	bl	8001bc2 <HAL_HCD_HC_GetXferCount>
 8007a18:	4603      	mov	r3, r0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a22:	b590      	push	{r4, r7, lr}
 8007a24:	b089      	sub	sp, #36	; 0x24
 8007a26:	af04      	add	r7, sp, #16
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4603      	mov	r3, r0
 8007a32:	70fb      	strb	r3, [r7, #3]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70bb      	strb	r3, [r7, #2]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a4a:	787c      	ldrb	r4, [r7, #1]
 8007a4c:	78ba      	ldrb	r2, [r7, #2]
 8007a4e:	78f9      	ldrb	r1, [r7, #3]
 8007a50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a52:	9302      	str	r3, [sp, #8]
 8007a54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	4623      	mov	r3, r4
 8007a62:	f7f9 fd38 	bl	80014d6 <HAL_HCD_HC_Init>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f8bd 	bl	8007bec <USBH_Get_USB_Status>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd90      	pop	{r4, r7, pc}

08007a80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7f9 fda8 	bl	80015f4 <HAL_HCD_HC_Halt>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f89e 	bl	8007bec <USBH_Get_USB_Status>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007abe:	b590      	push	{r4, r7, lr}
 8007ac0:	b089      	sub	sp, #36	; 0x24
 8007ac2:	af04      	add	r7, sp, #16
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	461a      	mov	r2, r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	70fb      	strb	r3, [r7, #3]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70bb      	strb	r3, [r7, #2]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ae6:	787c      	ldrb	r4, [r7, #1]
 8007ae8:	78ba      	ldrb	r2, [r7, #2]
 8007aea:	78f9      	ldrb	r1, [r7, #3]
 8007aec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007af0:	9303      	str	r3, [sp, #12]
 8007af2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007af4:	9302      	str	r3, [sp, #8]
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	4623      	mov	r3, r4
 8007b02:	f7f9 fd9b 	bl	800163c <HAL_HCD_HC_SubmitRequest>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 f86d 	bl	8007bec <USBH_Get_USB_Status>
 8007b12:	4603      	mov	r3, r0
 8007b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd90      	pop	{r4, r7, pc}

08007b20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fa f82f 	bl	8001b9a <HAL_HCD_HC_GetURBState>
 8007b3c:	4603      	mov	r3, r0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	460b      	mov	r3, r1
 8007b50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d103      	bne.n	8007b64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f870 	bl	8007c44 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007b64:	20c8      	movs	r0, #200	; 0xc8
 8007b66:	f7f9 f94b 	bl	8000e00 <HAL_Delay>
  return USBH_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
 8007b80:	4613      	mov	r3, r2
 8007b82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	212c      	movs	r1, #44	; 0x2c
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	333b      	adds	r3, #59	; 0x3b
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	212c      	movs	r1, #44	; 0x2c
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	4413      	add	r3, r2
 8007bac:	3354      	adds	r3, #84	; 0x54
 8007bae:	78ba      	ldrb	r2, [r7, #2]
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	e008      	b.n	8007bc6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	212c      	movs	r1, #44	; 0x2c
 8007bba:	fb01 f303 	mul.w	r3, r1, r3
 8007bbe:	4413      	add	r3, r2
 8007bc0:	3355      	adds	r3, #85	; 0x55
 8007bc2:	78ba      	ldrb	r2, [r7, #2]
 8007bc4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7f9 f90f 	bl	8000e00 <HAL_Delay>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d817      	bhi.n	8007c30 <USBH_Get_USB_Status+0x44>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBH_Get_USB_Status+0x1c>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c1f 	.word	0x08007c1f
 8007c10:	08007c25 	.word	0x08007c25
 8007c14:	08007c2b 	.word	0x08007c2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1c:	e00b      	b.n	8007c36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	73fb      	strb	r3, [r7, #15]
    break;
 8007c22:	e008      	b.n	8007c36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
    break;
 8007c28:	e005      	b.n	8007c36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2e:	e002      	b.n	8007c36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73fb      	strb	r3, [r7, #15]
    break;
 8007c34:	bf00      	nop
  }
  return usb_status;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
 8007c5c:	e001      	b.n	8007c62 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,(GPIO_PinState)data);
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	461a      	mov	r2, r3
 8007c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c6a:	4803      	ldr	r0, [pc, #12]	; (8007c78 <MX_DriverVbusFS+0x34>)
 8007c6c:	f7f9 fb9e 	bl	80013ac <HAL_GPIO_WritePin>
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40020800 	.word	0x40020800

08007c7c <__errno>:
 8007c7c:	4b01      	ldr	r3, [pc, #4]	; (8007c84 <__errno+0x8>)
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	2000002c 	.word	0x2000002c

08007c88 <__libc_init_array>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	4d0d      	ldr	r5, [pc, #52]	; (8007cc0 <__libc_init_array+0x38>)
 8007c8c:	4c0d      	ldr	r4, [pc, #52]	; (8007cc4 <__libc_init_array+0x3c>)
 8007c8e:	1b64      	subs	r4, r4, r5
 8007c90:	10a4      	asrs	r4, r4, #2
 8007c92:	2600      	movs	r6, #0
 8007c94:	42a6      	cmp	r6, r4
 8007c96:	d109      	bne.n	8007cac <__libc_init_array+0x24>
 8007c98:	4d0b      	ldr	r5, [pc, #44]	; (8007cc8 <__libc_init_array+0x40>)
 8007c9a:	4c0c      	ldr	r4, [pc, #48]	; (8007ccc <__libc_init_array+0x44>)
 8007c9c:	f000 fc5e 	bl	800855c <_init>
 8007ca0:	1b64      	subs	r4, r4, r5
 8007ca2:	10a4      	asrs	r4, r4, #2
 8007ca4:	2600      	movs	r6, #0
 8007ca6:	42a6      	cmp	r6, r4
 8007ca8:	d105      	bne.n	8007cb6 <__libc_init_array+0x2e>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb0:	4798      	blx	r3
 8007cb2:	3601      	adds	r6, #1
 8007cb4:	e7ee      	b.n	8007c94 <__libc_init_array+0xc>
 8007cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cba:	4798      	blx	r3
 8007cbc:	3601      	adds	r6, #1
 8007cbe:	e7f2      	b.n	8007ca6 <__libc_init_array+0x1e>
 8007cc0:	0800869c 	.word	0x0800869c
 8007cc4:	0800869c 	.word	0x0800869c
 8007cc8:	0800869c 	.word	0x0800869c
 8007ccc:	080086a0 	.word	0x080086a0

08007cd0 <malloc>:
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <malloc+0xc>)
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	f000 b863 	b.w	8007da0 <_malloc_r>
 8007cda:	bf00      	nop
 8007cdc:	2000002c 	.word	0x2000002c

08007ce0 <free>:
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <free+0xc>)
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f000 b80b 	b.w	8007d00 <_free_r>
 8007cea:	bf00      	nop
 8007cec:	2000002c 	.word	0x2000002c

08007cf0 <memset>:
 8007cf0:	4402      	add	r2, r0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d100      	bne.n	8007cfa <memset+0xa>
 8007cf8:	4770      	bx	lr
 8007cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfe:	e7f9      	b.n	8007cf4 <memset+0x4>

08007d00 <_free_r>:
 8007d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d02:	2900      	cmp	r1, #0
 8007d04:	d048      	beq.n	8007d98 <_free_r+0x98>
 8007d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d0a:	9001      	str	r0, [sp, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d12:	bfb8      	it	lt
 8007d14:	18e4      	addlt	r4, r4, r3
 8007d16:	f000 f8cd 	bl	8007eb4 <__malloc_lock>
 8007d1a:	4a20      	ldr	r2, [pc, #128]	; (8007d9c <_free_r+0x9c>)
 8007d1c:	9801      	ldr	r0, [sp, #4]
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	4615      	mov	r5, r2
 8007d22:	b933      	cbnz	r3, 8007d32 <_free_r+0x32>
 8007d24:	6063      	str	r3, [r4, #4]
 8007d26:	6014      	str	r4, [r2, #0]
 8007d28:	b003      	add	sp, #12
 8007d2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d2e:	f000 b8c7 	b.w	8007ec0 <__malloc_unlock>
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	d90b      	bls.n	8007d4e <_free_r+0x4e>
 8007d36:	6821      	ldr	r1, [r4, #0]
 8007d38:	1862      	adds	r2, r4, r1
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	bf04      	itt	eq
 8007d3e:	681a      	ldreq	r2, [r3, #0]
 8007d40:	685b      	ldreq	r3, [r3, #4]
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	bf04      	itt	eq
 8007d46:	1852      	addeq	r2, r2, r1
 8007d48:	6022      	streq	r2, [r4, #0]
 8007d4a:	602c      	str	r4, [r5, #0]
 8007d4c:	e7ec      	b.n	8007d28 <_free_r+0x28>
 8007d4e:	461a      	mov	r2, r3
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	b10b      	cbz	r3, 8007d58 <_free_r+0x58>
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d9fa      	bls.n	8007d4e <_free_r+0x4e>
 8007d58:	6811      	ldr	r1, [r2, #0]
 8007d5a:	1855      	adds	r5, r2, r1
 8007d5c:	42a5      	cmp	r5, r4
 8007d5e:	d10b      	bne.n	8007d78 <_free_r+0x78>
 8007d60:	6824      	ldr	r4, [r4, #0]
 8007d62:	4421      	add	r1, r4
 8007d64:	1854      	adds	r4, r2, r1
 8007d66:	42a3      	cmp	r3, r4
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	d1dd      	bne.n	8007d28 <_free_r+0x28>
 8007d6c:	681c      	ldr	r4, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	6053      	str	r3, [r2, #4]
 8007d72:	4421      	add	r1, r4
 8007d74:	6011      	str	r1, [r2, #0]
 8007d76:	e7d7      	b.n	8007d28 <_free_r+0x28>
 8007d78:	d902      	bls.n	8007d80 <_free_r+0x80>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	6003      	str	r3, [r0, #0]
 8007d7e:	e7d3      	b.n	8007d28 <_free_r+0x28>
 8007d80:	6825      	ldr	r5, [r4, #0]
 8007d82:	1961      	adds	r1, r4, r5
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf04      	itt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	6063      	str	r3, [r4, #4]
 8007d8e:	bf04      	itt	eq
 8007d90:	1949      	addeq	r1, r1, r5
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	6054      	str	r4, [r2, #4]
 8007d96:	e7c7      	b.n	8007d28 <_free_r+0x28>
 8007d98:	b003      	add	sp, #12
 8007d9a:	bd30      	pop	{r4, r5, pc}
 8007d9c:	200000b4 	.word	0x200000b4

08007da0 <_malloc_r>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	1ccd      	adds	r5, r1, #3
 8007da4:	f025 0503 	bic.w	r5, r5, #3
 8007da8:	3508      	adds	r5, #8
 8007daa:	2d0c      	cmp	r5, #12
 8007dac:	bf38      	it	cc
 8007dae:	250c      	movcc	r5, #12
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	4606      	mov	r6, r0
 8007db4:	db01      	blt.n	8007dba <_malloc_r+0x1a>
 8007db6:	42a9      	cmp	r1, r5
 8007db8:	d903      	bls.n	8007dc2 <_malloc_r+0x22>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	6033      	str	r3, [r6, #0]
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc2:	f000 f877 	bl	8007eb4 <__malloc_lock>
 8007dc6:	4921      	ldr	r1, [pc, #132]	; (8007e4c <_malloc_r+0xac>)
 8007dc8:	680a      	ldr	r2, [r1, #0]
 8007dca:	4614      	mov	r4, r2
 8007dcc:	b99c      	cbnz	r4, 8007df6 <_malloc_r+0x56>
 8007dce:	4f20      	ldr	r7, [pc, #128]	; (8007e50 <_malloc_r+0xb0>)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	b923      	cbnz	r3, 8007dde <_malloc_r+0x3e>
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f000 f83c 	bl	8007e54 <_sbrk_r>
 8007ddc:	6038      	str	r0, [r7, #0]
 8007dde:	4629      	mov	r1, r5
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f837 	bl	8007e54 <_sbrk_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	d123      	bne.n	8007e32 <_malloc_r+0x92>
 8007dea:	230c      	movs	r3, #12
 8007dec:	6033      	str	r3, [r6, #0]
 8007dee:	4630      	mov	r0, r6
 8007df0:	f000 f866 	bl	8007ec0 <__malloc_unlock>
 8007df4:	e7e3      	b.n	8007dbe <_malloc_r+0x1e>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	1b5b      	subs	r3, r3, r5
 8007dfa:	d417      	bmi.n	8007e2c <_malloc_r+0x8c>
 8007dfc:	2b0b      	cmp	r3, #11
 8007dfe:	d903      	bls.n	8007e08 <_malloc_r+0x68>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	441c      	add	r4, r3
 8007e04:	6025      	str	r5, [r4, #0]
 8007e06:	e004      	b.n	8007e12 <_malloc_r+0x72>
 8007e08:	6863      	ldr	r3, [r4, #4]
 8007e0a:	42a2      	cmp	r2, r4
 8007e0c:	bf0c      	ite	eq
 8007e0e:	600b      	streq	r3, [r1, #0]
 8007e10:	6053      	strne	r3, [r2, #4]
 8007e12:	4630      	mov	r0, r6
 8007e14:	f000 f854 	bl	8007ec0 <__malloc_unlock>
 8007e18:	f104 000b 	add.w	r0, r4, #11
 8007e1c:	1d23      	adds	r3, r4, #4
 8007e1e:	f020 0007 	bic.w	r0, r0, #7
 8007e22:	1ac2      	subs	r2, r0, r3
 8007e24:	d0cc      	beq.n	8007dc0 <_malloc_r+0x20>
 8007e26:	1a1b      	subs	r3, r3, r0
 8007e28:	50a3      	str	r3, [r4, r2]
 8007e2a:	e7c9      	b.n	8007dc0 <_malloc_r+0x20>
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	6864      	ldr	r4, [r4, #4]
 8007e30:	e7cc      	b.n	8007dcc <_malloc_r+0x2c>
 8007e32:	1cc4      	adds	r4, r0, #3
 8007e34:	f024 0403 	bic.w	r4, r4, #3
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d0e3      	beq.n	8007e04 <_malloc_r+0x64>
 8007e3c:	1a21      	subs	r1, r4, r0
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 f808 	bl	8007e54 <_sbrk_r>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d1dd      	bne.n	8007e04 <_malloc_r+0x64>
 8007e48:	e7cf      	b.n	8007dea <_malloc_r+0x4a>
 8007e4a:	bf00      	nop
 8007e4c:	200000b4 	.word	0x200000b4
 8007e50:	200000b8 	.word	0x200000b8

08007e54 <_sbrk_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4d06      	ldr	r5, [pc, #24]	; (8007e70 <_sbrk_r+0x1c>)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	f7f8 fe58 	bl	8000b14 <_sbrk>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_sbrk_r+0x1a>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_sbrk_r+0x1a>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	20000904 	.word	0x20000904

08007e74 <siprintf>:
 8007e74:	b40e      	push	{r1, r2, r3}
 8007e76:	b500      	push	{lr}
 8007e78:	b09c      	sub	sp, #112	; 0x70
 8007e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8007e7c:	9002      	str	r0, [sp, #8]
 8007e7e:	9006      	str	r0, [sp, #24]
 8007e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e84:	4809      	ldr	r0, [pc, #36]	; (8007eac <siprintf+0x38>)
 8007e86:	9107      	str	r1, [sp, #28]
 8007e88:	9104      	str	r1, [sp, #16]
 8007e8a:	4909      	ldr	r1, [pc, #36]	; (8007eb0 <siprintf+0x3c>)
 8007e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e90:	9105      	str	r1, [sp, #20]
 8007e92:	6800      	ldr	r0, [r0, #0]
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	a902      	add	r1, sp, #8
 8007e98:	f000 f874 	bl	8007f84 <_svfiprintf_r>
 8007e9c:	9b02      	ldr	r3, [sp, #8]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	b01c      	add	sp, #112	; 0x70
 8007ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea8:	b003      	add	sp, #12
 8007eaa:	4770      	bx	lr
 8007eac:	2000002c 	.word	0x2000002c
 8007eb0:	ffff0208 	.word	0xffff0208

08007eb4 <__malloc_lock>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__malloc_lock+0x8>)
 8007eb6:	f000 baf9 	b.w	80084ac <__retarget_lock_acquire_recursive>
 8007eba:	bf00      	nop
 8007ebc:	2000090c 	.word	0x2000090c

08007ec0 <__malloc_unlock>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__malloc_unlock+0x8>)
 8007ec2:	f000 baf4 	b.w	80084ae <__retarget_lock_release_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	2000090c 	.word	0x2000090c

08007ecc <__ssputs_r>:
 8007ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed0:	688e      	ldr	r6, [r1, #8]
 8007ed2:	429e      	cmp	r6, r3
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	4690      	mov	r8, r2
 8007eda:	461f      	mov	r7, r3
 8007edc:	d838      	bhi.n	8007f50 <__ssputs_r+0x84>
 8007ede:	898a      	ldrh	r2, [r1, #12]
 8007ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ee4:	d032      	beq.n	8007f4c <__ssputs_r+0x80>
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	6909      	ldr	r1, [r1, #16]
 8007eea:	eba5 0901 	sub.w	r9, r5, r1
 8007eee:	6965      	ldr	r5, [r4, #20]
 8007ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ef8:	3301      	adds	r3, #1
 8007efa:	444b      	add	r3, r9
 8007efc:	106d      	asrs	r5, r5, #1
 8007efe:	429d      	cmp	r5, r3
 8007f00:	bf38      	it	cc
 8007f02:	461d      	movcc	r5, r3
 8007f04:	0553      	lsls	r3, r2, #21
 8007f06:	d531      	bpl.n	8007f6c <__ssputs_r+0xa0>
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f7ff ff49 	bl	8007da0 <_malloc_r>
 8007f0e:	4606      	mov	r6, r0
 8007f10:	b950      	cbnz	r0, 8007f28 <__ssputs_r+0x5c>
 8007f12:	230c      	movs	r3, #12
 8007f14:	f8ca 3000 	str.w	r3, [sl]
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f28:	6921      	ldr	r1, [r4, #16]
 8007f2a:	464a      	mov	r2, r9
 8007f2c:	f000 fac0 	bl	80084b0 <memcpy>
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3a:	81a3      	strh	r3, [r4, #12]
 8007f3c:	6126      	str	r6, [r4, #16]
 8007f3e:	6165      	str	r5, [r4, #20]
 8007f40:	444e      	add	r6, r9
 8007f42:	eba5 0509 	sub.w	r5, r5, r9
 8007f46:	6026      	str	r6, [r4, #0]
 8007f48:	60a5      	str	r5, [r4, #8]
 8007f4a:	463e      	mov	r6, r7
 8007f4c:	42be      	cmp	r6, r7
 8007f4e:	d900      	bls.n	8007f52 <__ssputs_r+0x86>
 8007f50:	463e      	mov	r6, r7
 8007f52:	4632      	mov	r2, r6
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	4641      	mov	r1, r8
 8007f58:	f000 fab8 	bl	80084cc <memmove>
 8007f5c:	68a3      	ldr	r3, [r4, #8]
 8007f5e:	6822      	ldr	r2, [r4, #0]
 8007f60:	1b9b      	subs	r3, r3, r6
 8007f62:	4432      	add	r2, r6
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	6022      	str	r2, [r4, #0]
 8007f68:	2000      	movs	r0, #0
 8007f6a:	e7db      	b.n	8007f24 <__ssputs_r+0x58>
 8007f6c:	462a      	mov	r2, r5
 8007f6e:	f000 fac7 	bl	8008500 <_realloc_r>
 8007f72:	4606      	mov	r6, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d1e1      	bne.n	8007f3c <__ssputs_r+0x70>
 8007f78:	6921      	ldr	r1, [r4, #16]
 8007f7a:	4650      	mov	r0, sl
 8007f7c:	f7ff fec0 	bl	8007d00 <_free_r>
 8007f80:	e7c7      	b.n	8007f12 <__ssputs_r+0x46>
	...

08007f84 <_svfiprintf_r>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	4698      	mov	r8, r3
 8007f8a:	898b      	ldrh	r3, [r1, #12]
 8007f8c:	061b      	lsls	r3, r3, #24
 8007f8e:	b09d      	sub	sp, #116	; 0x74
 8007f90:	4607      	mov	r7, r0
 8007f92:	460d      	mov	r5, r1
 8007f94:	4614      	mov	r4, r2
 8007f96:	d50e      	bpl.n	8007fb6 <_svfiprintf_r+0x32>
 8007f98:	690b      	ldr	r3, [r1, #16]
 8007f9a:	b963      	cbnz	r3, 8007fb6 <_svfiprintf_r+0x32>
 8007f9c:	2140      	movs	r1, #64	; 0x40
 8007f9e:	f7ff feff 	bl	8007da0 <_malloc_r>
 8007fa2:	6028      	str	r0, [r5, #0]
 8007fa4:	6128      	str	r0, [r5, #16]
 8007fa6:	b920      	cbnz	r0, 8007fb2 <_svfiprintf_r+0x2e>
 8007fa8:	230c      	movs	r3, #12
 8007faa:	603b      	str	r3, [r7, #0]
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	e0d1      	b.n	8008156 <_svfiprintf_r+0x1d2>
 8007fb2:	2340      	movs	r3, #64	; 0x40
 8007fb4:	616b      	str	r3, [r5, #20]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fba:	2320      	movs	r3, #32
 8007fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fc4:	2330      	movs	r3, #48	; 0x30
 8007fc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008170 <_svfiprintf_r+0x1ec>
 8007fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fce:	f04f 0901 	mov.w	r9, #1
 8007fd2:	4623      	mov	r3, r4
 8007fd4:	469a      	mov	sl, r3
 8007fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fda:	b10a      	cbz	r2, 8007fe0 <_svfiprintf_r+0x5c>
 8007fdc:	2a25      	cmp	r2, #37	; 0x25
 8007fde:	d1f9      	bne.n	8007fd4 <_svfiprintf_r+0x50>
 8007fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8007fe4:	d00b      	beq.n	8007ffe <_svfiprintf_r+0x7a>
 8007fe6:	465b      	mov	r3, fp
 8007fe8:	4622      	mov	r2, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7ff ff6d 	bl	8007ecc <__ssputs_r>
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	f000 80aa 	beq.w	800814c <_svfiprintf_r+0x1c8>
 8007ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ffa:	445a      	add	r2, fp
 8007ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 80a2 	beq.w	800814c <_svfiprintf_r+0x1c8>
 8008008:	2300      	movs	r3, #0
 800800a:	f04f 32ff 	mov.w	r2, #4294967295
 800800e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008012:	f10a 0a01 	add.w	sl, sl, #1
 8008016:	9304      	str	r3, [sp, #16]
 8008018:	9307      	str	r3, [sp, #28]
 800801a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800801e:	931a      	str	r3, [sp, #104]	; 0x68
 8008020:	4654      	mov	r4, sl
 8008022:	2205      	movs	r2, #5
 8008024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008028:	4851      	ldr	r0, [pc, #324]	; (8008170 <_svfiprintf_r+0x1ec>)
 800802a:	f7f8 f8d9 	bl	80001e0 <memchr>
 800802e:	9a04      	ldr	r2, [sp, #16]
 8008030:	b9d8      	cbnz	r0, 800806a <_svfiprintf_r+0xe6>
 8008032:	06d0      	lsls	r0, r2, #27
 8008034:	bf44      	itt	mi
 8008036:	2320      	movmi	r3, #32
 8008038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800803c:	0711      	lsls	r1, r2, #28
 800803e:	bf44      	itt	mi
 8008040:	232b      	movmi	r3, #43	; 0x2b
 8008042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008046:	f89a 3000 	ldrb.w	r3, [sl]
 800804a:	2b2a      	cmp	r3, #42	; 0x2a
 800804c:	d015      	beq.n	800807a <_svfiprintf_r+0xf6>
 800804e:	9a07      	ldr	r2, [sp, #28]
 8008050:	4654      	mov	r4, sl
 8008052:	2000      	movs	r0, #0
 8008054:	f04f 0c0a 	mov.w	ip, #10
 8008058:	4621      	mov	r1, r4
 800805a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800805e:	3b30      	subs	r3, #48	; 0x30
 8008060:	2b09      	cmp	r3, #9
 8008062:	d94e      	bls.n	8008102 <_svfiprintf_r+0x17e>
 8008064:	b1b0      	cbz	r0, 8008094 <_svfiprintf_r+0x110>
 8008066:	9207      	str	r2, [sp, #28]
 8008068:	e014      	b.n	8008094 <_svfiprintf_r+0x110>
 800806a:	eba0 0308 	sub.w	r3, r0, r8
 800806e:	fa09 f303 	lsl.w	r3, r9, r3
 8008072:	4313      	orrs	r3, r2
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	46a2      	mov	sl, r4
 8008078:	e7d2      	b.n	8008020 <_svfiprintf_r+0x9c>
 800807a:	9b03      	ldr	r3, [sp, #12]
 800807c:	1d19      	adds	r1, r3, #4
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	9103      	str	r1, [sp, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	bfbb      	ittet	lt
 8008086:	425b      	neglt	r3, r3
 8008088:	f042 0202 	orrlt.w	r2, r2, #2
 800808c:	9307      	strge	r3, [sp, #28]
 800808e:	9307      	strlt	r3, [sp, #28]
 8008090:	bfb8      	it	lt
 8008092:	9204      	strlt	r2, [sp, #16]
 8008094:	7823      	ldrb	r3, [r4, #0]
 8008096:	2b2e      	cmp	r3, #46	; 0x2e
 8008098:	d10c      	bne.n	80080b4 <_svfiprintf_r+0x130>
 800809a:	7863      	ldrb	r3, [r4, #1]
 800809c:	2b2a      	cmp	r3, #42	; 0x2a
 800809e:	d135      	bne.n	800810c <_svfiprintf_r+0x188>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	1d1a      	adds	r2, r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	9203      	str	r2, [sp, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bfb8      	it	lt
 80080ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80080b0:	3402      	adds	r4, #2
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008180 <_svfiprintf_r+0x1fc>
 80080b8:	7821      	ldrb	r1, [r4, #0]
 80080ba:	2203      	movs	r2, #3
 80080bc:	4650      	mov	r0, sl
 80080be:	f7f8 f88f 	bl	80001e0 <memchr>
 80080c2:	b140      	cbz	r0, 80080d6 <_svfiprintf_r+0x152>
 80080c4:	2340      	movs	r3, #64	; 0x40
 80080c6:	eba0 000a 	sub.w	r0, r0, sl
 80080ca:	fa03 f000 	lsl.w	r0, r3, r0
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	4303      	orrs	r3, r0
 80080d2:	3401      	adds	r4, #1
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080da:	4826      	ldr	r0, [pc, #152]	; (8008174 <_svfiprintf_r+0x1f0>)
 80080dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080e0:	2206      	movs	r2, #6
 80080e2:	f7f8 f87d 	bl	80001e0 <memchr>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d038      	beq.n	800815c <_svfiprintf_r+0x1d8>
 80080ea:	4b23      	ldr	r3, [pc, #140]	; (8008178 <_svfiprintf_r+0x1f4>)
 80080ec:	bb1b      	cbnz	r3, 8008136 <_svfiprintf_r+0x1b2>
 80080ee:	9b03      	ldr	r3, [sp, #12]
 80080f0:	3307      	adds	r3, #7
 80080f2:	f023 0307 	bic.w	r3, r3, #7
 80080f6:	3308      	adds	r3, #8
 80080f8:	9303      	str	r3, [sp, #12]
 80080fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fc:	4433      	add	r3, r6
 80080fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008100:	e767      	b.n	8007fd2 <_svfiprintf_r+0x4e>
 8008102:	fb0c 3202 	mla	r2, ip, r2, r3
 8008106:	460c      	mov	r4, r1
 8008108:	2001      	movs	r0, #1
 800810a:	e7a5      	b.n	8008058 <_svfiprintf_r+0xd4>
 800810c:	2300      	movs	r3, #0
 800810e:	3401      	adds	r4, #1
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	4619      	mov	r1, r3
 8008114:	f04f 0c0a 	mov.w	ip, #10
 8008118:	4620      	mov	r0, r4
 800811a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800811e:	3a30      	subs	r2, #48	; 0x30
 8008120:	2a09      	cmp	r2, #9
 8008122:	d903      	bls.n	800812c <_svfiprintf_r+0x1a8>
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0c5      	beq.n	80080b4 <_svfiprintf_r+0x130>
 8008128:	9105      	str	r1, [sp, #20]
 800812a:	e7c3      	b.n	80080b4 <_svfiprintf_r+0x130>
 800812c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008130:	4604      	mov	r4, r0
 8008132:	2301      	movs	r3, #1
 8008134:	e7f0      	b.n	8008118 <_svfiprintf_r+0x194>
 8008136:	ab03      	add	r3, sp, #12
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	462a      	mov	r2, r5
 800813c:	4b0f      	ldr	r3, [pc, #60]	; (800817c <_svfiprintf_r+0x1f8>)
 800813e:	a904      	add	r1, sp, #16
 8008140:	4638      	mov	r0, r7
 8008142:	f3af 8000 	nop.w
 8008146:	1c42      	adds	r2, r0, #1
 8008148:	4606      	mov	r6, r0
 800814a:	d1d6      	bne.n	80080fa <_svfiprintf_r+0x176>
 800814c:	89ab      	ldrh	r3, [r5, #12]
 800814e:	065b      	lsls	r3, r3, #25
 8008150:	f53f af2c 	bmi.w	8007fac <_svfiprintf_r+0x28>
 8008154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008156:	b01d      	add	sp, #116	; 0x74
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	ab03      	add	r3, sp, #12
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	462a      	mov	r2, r5
 8008162:	4b06      	ldr	r3, [pc, #24]	; (800817c <_svfiprintf_r+0x1f8>)
 8008164:	a904      	add	r1, sp, #16
 8008166:	4638      	mov	r0, r7
 8008168:	f000 f87a 	bl	8008260 <_printf_i>
 800816c:	e7eb      	b.n	8008146 <_svfiprintf_r+0x1c2>
 800816e:	bf00      	nop
 8008170:	08008660 	.word	0x08008660
 8008174:	0800866a 	.word	0x0800866a
 8008178:	00000000 	.word	0x00000000
 800817c:	08007ecd 	.word	0x08007ecd
 8008180:	08008666 	.word	0x08008666

08008184 <_printf_common>:
 8008184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	4616      	mov	r6, r2
 800818a:	4699      	mov	r9, r3
 800818c:	688a      	ldr	r2, [r1, #8]
 800818e:	690b      	ldr	r3, [r1, #16]
 8008190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008194:	4293      	cmp	r3, r2
 8008196:	bfb8      	it	lt
 8008198:	4613      	movlt	r3, r2
 800819a:	6033      	str	r3, [r6, #0]
 800819c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081a0:	4607      	mov	r7, r0
 80081a2:	460c      	mov	r4, r1
 80081a4:	b10a      	cbz	r2, 80081aa <_printf_common+0x26>
 80081a6:	3301      	adds	r3, #1
 80081a8:	6033      	str	r3, [r6, #0]
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	0699      	lsls	r1, r3, #26
 80081ae:	bf42      	ittt	mi
 80081b0:	6833      	ldrmi	r3, [r6, #0]
 80081b2:	3302      	addmi	r3, #2
 80081b4:	6033      	strmi	r3, [r6, #0]
 80081b6:	6825      	ldr	r5, [r4, #0]
 80081b8:	f015 0506 	ands.w	r5, r5, #6
 80081bc:	d106      	bne.n	80081cc <_printf_common+0x48>
 80081be:	f104 0a19 	add.w	sl, r4, #25
 80081c2:	68e3      	ldr	r3, [r4, #12]
 80081c4:	6832      	ldr	r2, [r6, #0]
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	42ab      	cmp	r3, r5
 80081ca:	dc26      	bgt.n	800821a <_printf_common+0x96>
 80081cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081d0:	1e13      	subs	r3, r2, #0
 80081d2:	6822      	ldr	r2, [r4, #0]
 80081d4:	bf18      	it	ne
 80081d6:	2301      	movne	r3, #1
 80081d8:	0692      	lsls	r2, r2, #26
 80081da:	d42b      	bmi.n	8008234 <_printf_common+0xb0>
 80081dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081e0:	4649      	mov	r1, r9
 80081e2:	4638      	mov	r0, r7
 80081e4:	47c0      	blx	r8
 80081e6:	3001      	adds	r0, #1
 80081e8:	d01e      	beq.n	8008228 <_printf_common+0xa4>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	68e5      	ldr	r5, [r4, #12]
 80081ee:	6832      	ldr	r2, [r6, #0]
 80081f0:	f003 0306 	and.w	r3, r3, #6
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	bf08      	it	eq
 80081f8:	1aad      	subeq	r5, r5, r2
 80081fa:	68a3      	ldr	r3, [r4, #8]
 80081fc:	6922      	ldr	r2, [r4, #16]
 80081fe:	bf0c      	ite	eq
 8008200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008204:	2500      	movne	r5, #0
 8008206:	4293      	cmp	r3, r2
 8008208:	bfc4      	itt	gt
 800820a:	1a9b      	subgt	r3, r3, r2
 800820c:	18ed      	addgt	r5, r5, r3
 800820e:	2600      	movs	r6, #0
 8008210:	341a      	adds	r4, #26
 8008212:	42b5      	cmp	r5, r6
 8008214:	d11a      	bne.n	800824c <_printf_common+0xc8>
 8008216:	2000      	movs	r0, #0
 8008218:	e008      	b.n	800822c <_printf_common+0xa8>
 800821a:	2301      	movs	r3, #1
 800821c:	4652      	mov	r2, sl
 800821e:	4649      	mov	r1, r9
 8008220:	4638      	mov	r0, r7
 8008222:	47c0      	blx	r8
 8008224:	3001      	adds	r0, #1
 8008226:	d103      	bne.n	8008230 <_printf_common+0xac>
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008230:	3501      	adds	r5, #1
 8008232:	e7c6      	b.n	80081c2 <_printf_common+0x3e>
 8008234:	18e1      	adds	r1, r4, r3
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	2030      	movs	r0, #48	; 0x30
 800823a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800823e:	4422      	add	r2, r4
 8008240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008248:	3302      	adds	r3, #2
 800824a:	e7c7      	b.n	80081dc <_printf_common+0x58>
 800824c:	2301      	movs	r3, #1
 800824e:	4622      	mov	r2, r4
 8008250:	4649      	mov	r1, r9
 8008252:	4638      	mov	r0, r7
 8008254:	47c0      	blx	r8
 8008256:	3001      	adds	r0, #1
 8008258:	d0e6      	beq.n	8008228 <_printf_common+0xa4>
 800825a:	3601      	adds	r6, #1
 800825c:	e7d9      	b.n	8008212 <_printf_common+0x8e>
	...

08008260 <_printf_i>:
 8008260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008264:	460c      	mov	r4, r1
 8008266:	4691      	mov	r9, r2
 8008268:	7e27      	ldrb	r7, [r4, #24]
 800826a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800826c:	2f78      	cmp	r7, #120	; 0x78
 800826e:	4680      	mov	r8, r0
 8008270:	469a      	mov	sl, r3
 8008272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008276:	d807      	bhi.n	8008288 <_printf_i+0x28>
 8008278:	2f62      	cmp	r7, #98	; 0x62
 800827a:	d80a      	bhi.n	8008292 <_printf_i+0x32>
 800827c:	2f00      	cmp	r7, #0
 800827e:	f000 80d8 	beq.w	8008432 <_printf_i+0x1d2>
 8008282:	2f58      	cmp	r7, #88	; 0x58
 8008284:	f000 80a3 	beq.w	80083ce <_printf_i+0x16e>
 8008288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800828c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008290:	e03a      	b.n	8008308 <_printf_i+0xa8>
 8008292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008296:	2b15      	cmp	r3, #21
 8008298:	d8f6      	bhi.n	8008288 <_printf_i+0x28>
 800829a:	a001      	add	r0, pc, #4	; (adr r0, 80082a0 <_printf_i+0x40>)
 800829c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082a0:	080082f9 	.word	0x080082f9
 80082a4:	0800830d 	.word	0x0800830d
 80082a8:	08008289 	.word	0x08008289
 80082ac:	08008289 	.word	0x08008289
 80082b0:	08008289 	.word	0x08008289
 80082b4:	08008289 	.word	0x08008289
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	08008289 	.word	0x08008289
 80082c0:	08008289 	.word	0x08008289
 80082c4:	08008289 	.word	0x08008289
 80082c8:	08008289 	.word	0x08008289
 80082cc:	08008419 	.word	0x08008419
 80082d0:	0800833d 	.word	0x0800833d
 80082d4:	080083fb 	.word	0x080083fb
 80082d8:	08008289 	.word	0x08008289
 80082dc:	08008289 	.word	0x08008289
 80082e0:	0800843b 	.word	0x0800843b
 80082e4:	08008289 	.word	0x08008289
 80082e8:	0800833d 	.word	0x0800833d
 80082ec:	08008289 	.word	0x08008289
 80082f0:	08008289 	.word	0x08008289
 80082f4:	08008403 	.word	0x08008403
 80082f8:	680b      	ldr	r3, [r1, #0]
 80082fa:	1d1a      	adds	r2, r3, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	600a      	str	r2, [r1, #0]
 8008300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008308:	2301      	movs	r3, #1
 800830a:	e0a3      	b.n	8008454 <_printf_i+0x1f4>
 800830c:	6825      	ldr	r5, [r4, #0]
 800830e:	6808      	ldr	r0, [r1, #0]
 8008310:	062e      	lsls	r6, r5, #24
 8008312:	f100 0304 	add.w	r3, r0, #4
 8008316:	d50a      	bpl.n	800832e <_printf_i+0xce>
 8008318:	6805      	ldr	r5, [r0, #0]
 800831a:	600b      	str	r3, [r1, #0]
 800831c:	2d00      	cmp	r5, #0
 800831e:	da03      	bge.n	8008328 <_printf_i+0xc8>
 8008320:	232d      	movs	r3, #45	; 0x2d
 8008322:	426d      	negs	r5, r5
 8008324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008328:	485e      	ldr	r0, [pc, #376]	; (80084a4 <_printf_i+0x244>)
 800832a:	230a      	movs	r3, #10
 800832c:	e019      	b.n	8008362 <_printf_i+0x102>
 800832e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008332:	6805      	ldr	r5, [r0, #0]
 8008334:	600b      	str	r3, [r1, #0]
 8008336:	bf18      	it	ne
 8008338:	b22d      	sxthne	r5, r5
 800833a:	e7ef      	b.n	800831c <_printf_i+0xbc>
 800833c:	680b      	ldr	r3, [r1, #0]
 800833e:	6825      	ldr	r5, [r4, #0]
 8008340:	1d18      	adds	r0, r3, #4
 8008342:	6008      	str	r0, [r1, #0]
 8008344:	0628      	lsls	r0, r5, #24
 8008346:	d501      	bpl.n	800834c <_printf_i+0xec>
 8008348:	681d      	ldr	r5, [r3, #0]
 800834a:	e002      	b.n	8008352 <_printf_i+0xf2>
 800834c:	0669      	lsls	r1, r5, #25
 800834e:	d5fb      	bpl.n	8008348 <_printf_i+0xe8>
 8008350:	881d      	ldrh	r5, [r3, #0]
 8008352:	4854      	ldr	r0, [pc, #336]	; (80084a4 <_printf_i+0x244>)
 8008354:	2f6f      	cmp	r7, #111	; 0x6f
 8008356:	bf0c      	ite	eq
 8008358:	2308      	moveq	r3, #8
 800835a:	230a      	movne	r3, #10
 800835c:	2100      	movs	r1, #0
 800835e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008362:	6866      	ldr	r6, [r4, #4]
 8008364:	60a6      	str	r6, [r4, #8]
 8008366:	2e00      	cmp	r6, #0
 8008368:	bfa2      	ittt	ge
 800836a:	6821      	ldrge	r1, [r4, #0]
 800836c:	f021 0104 	bicge.w	r1, r1, #4
 8008370:	6021      	strge	r1, [r4, #0]
 8008372:	b90d      	cbnz	r5, 8008378 <_printf_i+0x118>
 8008374:	2e00      	cmp	r6, #0
 8008376:	d04d      	beq.n	8008414 <_printf_i+0x1b4>
 8008378:	4616      	mov	r6, r2
 800837a:	fbb5 f1f3 	udiv	r1, r5, r3
 800837e:	fb03 5711 	mls	r7, r3, r1, r5
 8008382:	5dc7      	ldrb	r7, [r0, r7]
 8008384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008388:	462f      	mov	r7, r5
 800838a:	42bb      	cmp	r3, r7
 800838c:	460d      	mov	r5, r1
 800838e:	d9f4      	bls.n	800837a <_printf_i+0x11a>
 8008390:	2b08      	cmp	r3, #8
 8008392:	d10b      	bne.n	80083ac <_printf_i+0x14c>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	07df      	lsls	r7, r3, #31
 8008398:	d508      	bpl.n	80083ac <_printf_i+0x14c>
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	6861      	ldr	r1, [r4, #4]
 800839e:	4299      	cmp	r1, r3
 80083a0:	bfde      	ittt	le
 80083a2:	2330      	movle	r3, #48	; 0x30
 80083a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083ac:	1b92      	subs	r2, r2, r6
 80083ae:	6122      	str	r2, [r4, #16]
 80083b0:	f8cd a000 	str.w	sl, [sp]
 80083b4:	464b      	mov	r3, r9
 80083b6:	aa03      	add	r2, sp, #12
 80083b8:	4621      	mov	r1, r4
 80083ba:	4640      	mov	r0, r8
 80083bc:	f7ff fee2 	bl	8008184 <_printf_common>
 80083c0:	3001      	adds	r0, #1
 80083c2:	d14c      	bne.n	800845e <_printf_i+0x1fe>
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	b004      	add	sp, #16
 80083ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ce:	4835      	ldr	r0, [pc, #212]	; (80084a4 <_printf_i+0x244>)
 80083d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	680e      	ldr	r6, [r1, #0]
 80083d8:	061f      	lsls	r7, r3, #24
 80083da:	f856 5b04 	ldr.w	r5, [r6], #4
 80083de:	600e      	str	r6, [r1, #0]
 80083e0:	d514      	bpl.n	800840c <_printf_i+0x1ac>
 80083e2:	07d9      	lsls	r1, r3, #31
 80083e4:	bf44      	itt	mi
 80083e6:	f043 0320 	orrmi.w	r3, r3, #32
 80083ea:	6023      	strmi	r3, [r4, #0]
 80083ec:	b91d      	cbnz	r5, 80083f6 <_printf_i+0x196>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	f023 0320 	bic.w	r3, r3, #32
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	2310      	movs	r3, #16
 80083f8:	e7b0      	b.n	800835c <_printf_i+0xfc>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	f043 0320 	orr.w	r3, r3, #32
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	2378      	movs	r3, #120	; 0x78
 8008404:	4828      	ldr	r0, [pc, #160]	; (80084a8 <_printf_i+0x248>)
 8008406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800840a:	e7e3      	b.n	80083d4 <_printf_i+0x174>
 800840c:	065e      	lsls	r6, r3, #25
 800840e:	bf48      	it	mi
 8008410:	b2ad      	uxthmi	r5, r5
 8008412:	e7e6      	b.n	80083e2 <_printf_i+0x182>
 8008414:	4616      	mov	r6, r2
 8008416:	e7bb      	b.n	8008390 <_printf_i+0x130>
 8008418:	680b      	ldr	r3, [r1, #0]
 800841a:	6826      	ldr	r6, [r4, #0]
 800841c:	6960      	ldr	r0, [r4, #20]
 800841e:	1d1d      	adds	r5, r3, #4
 8008420:	600d      	str	r5, [r1, #0]
 8008422:	0635      	lsls	r5, r6, #24
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	d501      	bpl.n	800842c <_printf_i+0x1cc>
 8008428:	6018      	str	r0, [r3, #0]
 800842a:	e002      	b.n	8008432 <_printf_i+0x1d2>
 800842c:	0671      	lsls	r1, r6, #25
 800842e:	d5fb      	bpl.n	8008428 <_printf_i+0x1c8>
 8008430:	8018      	strh	r0, [r3, #0]
 8008432:	2300      	movs	r3, #0
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	4616      	mov	r6, r2
 8008438:	e7ba      	b.n	80083b0 <_printf_i+0x150>
 800843a:	680b      	ldr	r3, [r1, #0]
 800843c:	1d1a      	adds	r2, r3, #4
 800843e:	600a      	str	r2, [r1, #0]
 8008440:	681e      	ldr	r6, [r3, #0]
 8008442:	6862      	ldr	r2, [r4, #4]
 8008444:	2100      	movs	r1, #0
 8008446:	4630      	mov	r0, r6
 8008448:	f7f7 feca 	bl	80001e0 <memchr>
 800844c:	b108      	cbz	r0, 8008452 <_printf_i+0x1f2>
 800844e:	1b80      	subs	r0, r0, r6
 8008450:	6060      	str	r0, [r4, #4]
 8008452:	6863      	ldr	r3, [r4, #4]
 8008454:	6123      	str	r3, [r4, #16]
 8008456:	2300      	movs	r3, #0
 8008458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800845c:	e7a8      	b.n	80083b0 <_printf_i+0x150>
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	4632      	mov	r2, r6
 8008462:	4649      	mov	r1, r9
 8008464:	4640      	mov	r0, r8
 8008466:	47d0      	blx	sl
 8008468:	3001      	adds	r0, #1
 800846a:	d0ab      	beq.n	80083c4 <_printf_i+0x164>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	079b      	lsls	r3, r3, #30
 8008470:	d413      	bmi.n	800849a <_printf_i+0x23a>
 8008472:	68e0      	ldr	r0, [r4, #12]
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	4298      	cmp	r0, r3
 8008478:	bfb8      	it	lt
 800847a:	4618      	movlt	r0, r3
 800847c:	e7a4      	b.n	80083c8 <_printf_i+0x168>
 800847e:	2301      	movs	r3, #1
 8008480:	4632      	mov	r2, r6
 8008482:	4649      	mov	r1, r9
 8008484:	4640      	mov	r0, r8
 8008486:	47d0      	blx	sl
 8008488:	3001      	adds	r0, #1
 800848a:	d09b      	beq.n	80083c4 <_printf_i+0x164>
 800848c:	3501      	adds	r5, #1
 800848e:	68e3      	ldr	r3, [r4, #12]
 8008490:	9903      	ldr	r1, [sp, #12]
 8008492:	1a5b      	subs	r3, r3, r1
 8008494:	42ab      	cmp	r3, r5
 8008496:	dcf2      	bgt.n	800847e <_printf_i+0x21e>
 8008498:	e7eb      	b.n	8008472 <_printf_i+0x212>
 800849a:	2500      	movs	r5, #0
 800849c:	f104 0619 	add.w	r6, r4, #25
 80084a0:	e7f5      	b.n	800848e <_printf_i+0x22e>
 80084a2:	bf00      	nop
 80084a4:	08008671 	.word	0x08008671
 80084a8:	08008682 	.word	0x08008682

080084ac <__retarget_lock_acquire_recursive>:
 80084ac:	4770      	bx	lr

080084ae <__retarget_lock_release_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <memcpy>:
 80084b0:	440a      	add	r2, r1
 80084b2:	4291      	cmp	r1, r2
 80084b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084b8:	d100      	bne.n	80084bc <memcpy+0xc>
 80084ba:	4770      	bx	lr
 80084bc:	b510      	push	{r4, lr}
 80084be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084c6:	4291      	cmp	r1, r2
 80084c8:	d1f9      	bne.n	80084be <memcpy+0xe>
 80084ca:	bd10      	pop	{r4, pc}

080084cc <memmove>:
 80084cc:	4288      	cmp	r0, r1
 80084ce:	b510      	push	{r4, lr}
 80084d0:	eb01 0402 	add.w	r4, r1, r2
 80084d4:	d902      	bls.n	80084dc <memmove+0x10>
 80084d6:	4284      	cmp	r4, r0
 80084d8:	4623      	mov	r3, r4
 80084da:	d807      	bhi.n	80084ec <memmove+0x20>
 80084dc:	1e43      	subs	r3, r0, #1
 80084de:	42a1      	cmp	r1, r4
 80084e0:	d008      	beq.n	80084f4 <memmove+0x28>
 80084e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ea:	e7f8      	b.n	80084de <memmove+0x12>
 80084ec:	4402      	add	r2, r0
 80084ee:	4601      	mov	r1, r0
 80084f0:	428a      	cmp	r2, r1
 80084f2:	d100      	bne.n	80084f6 <memmove+0x2a>
 80084f4:	bd10      	pop	{r4, pc}
 80084f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084fe:	e7f7      	b.n	80084f0 <memmove+0x24>

08008500 <_realloc_r>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	4607      	mov	r7, r0
 8008504:	4614      	mov	r4, r2
 8008506:	460e      	mov	r6, r1
 8008508:	b921      	cbnz	r1, 8008514 <_realloc_r+0x14>
 800850a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800850e:	4611      	mov	r1, r2
 8008510:	f7ff bc46 	b.w	8007da0 <_malloc_r>
 8008514:	b922      	cbnz	r2, 8008520 <_realloc_r+0x20>
 8008516:	f7ff fbf3 	bl	8007d00 <_free_r>
 800851a:	4625      	mov	r5, r4
 800851c:	4628      	mov	r0, r5
 800851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008520:	f000 f814 	bl	800854c <_malloc_usable_size_r>
 8008524:	42a0      	cmp	r0, r4
 8008526:	d20f      	bcs.n	8008548 <_realloc_r+0x48>
 8008528:	4621      	mov	r1, r4
 800852a:	4638      	mov	r0, r7
 800852c:	f7ff fc38 	bl	8007da0 <_malloc_r>
 8008530:	4605      	mov	r5, r0
 8008532:	2800      	cmp	r0, #0
 8008534:	d0f2      	beq.n	800851c <_realloc_r+0x1c>
 8008536:	4631      	mov	r1, r6
 8008538:	4622      	mov	r2, r4
 800853a:	f7ff ffb9 	bl	80084b0 <memcpy>
 800853e:	4631      	mov	r1, r6
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff fbdd 	bl	8007d00 <_free_r>
 8008546:	e7e9      	b.n	800851c <_realloc_r+0x1c>
 8008548:	4635      	mov	r5, r6
 800854a:	e7e7      	b.n	800851c <_realloc_r+0x1c>

0800854c <_malloc_usable_size_r>:
 800854c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008550:	1f18      	subs	r0, r3, #4
 8008552:	2b00      	cmp	r3, #0
 8008554:	bfbc      	itt	lt
 8008556:	580b      	ldrlt	r3, [r1, r0]
 8008558:	18c0      	addlt	r0, r0, r3
 800855a:	4770      	bx	lr

0800855c <_init>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr

08008568 <_fini>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr
